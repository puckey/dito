"use strict";

exports.__esModule = true;
exports.getExternalsFromDependencies = getExternalsFromDependencies;

const {
  camelize
} = require('@ditojs/utils');

function getExternalsFromDependencies(exclude = []) {
  const excludes = exclude.reduce((exclude, dependency) => {
    exclude[dependency] = true;
    return exclude;
  }, {});
  const externals = {};

  const addDependencies = dependencies => {
    for (const dependency in dependencies) {
      addDependency(dependency);
    }
  };

  const addDependency = dependency => {
    if (!externals[dependency] && !excludes[dependency]) {
      externals[dependency] = {
        root: camelize(dependency, true),
        amd: dependency,
        commonjs: dependency,
        commonjs2: dependency
      };

      try {
        const packageJson = require(`${dependency}/package.json`);

        addDependencies(packageJson.dependencies);
        addDependencies(packageJson.peerDependencies);
        addDependencies(packageJson.devDependencies);
      } catch (err) {}
    }
  };

  addDependency(process.cwd());
  return externals;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93ZWJwYWNrLmpzIl0sIm5hbWVzIjpbImNhbWVsaXplIiwicmVxdWlyZSIsImdldEV4dGVybmFsc0Zyb21EZXBlbmRlbmNpZXMiLCJleGNsdWRlIiwiZXhjbHVkZXMiLCJyZWR1Y2UiLCJkZXBlbmRlbmN5IiwiZXh0ZXJuYWxzIiwiYWRkRGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jaWVzIiwiYWRkRGVwZW5kZW5jeSIsInJvb3QiLCJhbWQiLCJjb21tb25qcyIsImNvbW1vbmpzMiIsInBhY2thZ2VKc29uIiwicGVlckRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsImVyciIsInByb2Nlc3MiLCJjd2QiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQWVDLE9BQU8sQ0FBQyxlQUFELENBQTVCOztBQUVPLFNBQVNDLDRCQUFULENBQXNDQyxPQUFPLEdBQUcsRUFBaEQsRUFBb0Q7QUFDekQsUUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUNFLE1BQVIsQ0FBZSxDQUFDRixPQUFELEVBQVVHLFVBQVYsS0FBeUI7QUFDdkRILElBQUFBLE9BQU8sQ0FBQ0csVUFBRCxDQUFQLEdBQXNCLElBQXRCO0FBQ0EsV0FBT0gsT0FBUDtBQUNELEdBSGdCLEVBR2QsRUFIYyxDQUFqQjtBQUlBLFFBQU1JLFNBQVMsR0FBRyxFQUFsQjs7QUFDQSxRQUFNQyxlQUFlLEdBQUdDLFlBQVksSUFBSTtBQUN0QyxTQUFLLE1BQU1ILFVBQVgsSUFBeUJHLFlBQXpCLEVBQXVDO0FBQ3JDQyxNQUFBQSxhQUFhLENBQUNKLFVBQUQsQ0FBYjtBQUNEO0FBQ0YsR0FKRDs7QUFLQSxRQUFNSSxhQUFhLEdBQUdKLFVBQVUsSUFBSTtBQUNsQyxRQUFJLENBQUNDLFNBQVMsQ0FBQ0QsVUFBRCxDQUFWLElBQTBCLENBQUNGLFFBQVEsQ0FBQ0UsVUFBRCxDQUF2QyxFQUFxRDtBQUNuREMsTUFBQUEsU0FBUyxDQUFDRCxVQUFELENBQVQsR0FBd0I7QUFDdEJLLFFBQUFBLElBQUksRUFBRVgsUUFBUSxDQUFDTSxVQUFELEVBQWEsSUFBYixDQURRO0FBRXRCTSxRQUFBQSxHQUFHLEVBQUVOLFVBRmlCO0FBR3RCTyxRQUFBQSxRQUFRLEVBQUVQLFVBSFk7QUFJdEJRLFFBQUFBLFNBQVMsRUFBRVI7QUFKVyxPQUF4Qjs7QUFNQSxVQUFJO0FBR0YsY0FBTVMsV0FBVyxHQUFHZCxPQUFPLENBQUUsR0FBRUssVUFBVyxlQUFmLENBQTNCOztBQUNBRSxRQUFBQSxlQUFlLENBQUNPLFdBQVcsQ0FBQ04sWUFBYixDQUFmO0FBQ0FELFFBQUFBLGVBQWUsQ0FBQ08sV0FBVyxDQUFDQyxnQkFBYixDQUFmO0FBQ0FSLFFBQUFBLGVBQWUsQ0FBQ08sV0FBVyxDQUFDRSxlQUFiLENBQWY7QUFDRCxPQVBELENBT0UsT0FBT0MsR0FBUCxFQUFZLENBQ2I7QUFDRjtBQUNGLEdBbEJEOztBQW9CQVIsRUFBQUEsYUFBYSxDQUFDUyxPQUFPLENBQUNDLEdBQVIsRUFBRCxDQUFiO0FBQ0EsU0FBT2IsU0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBjYW1lbGl6ZSB9ID0gcmVxdWlyZSgnQGRpdG9qcy91dGlscycpXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRlcm5hbHNGcm9tRGVwZW5kZW5jaWVzKGV4Y2x1ZGUgPSBbXSkge1xuICBjb25zdCBleGNsdWRlcyA9IGV4Y2x1ZGUucmVkdWNlKChleGNsdWRlLCBkZXBlbmRlbmN5KSA9PiB7XG4gICAgZXhjbHVkZVtkZXBlbmRlbmN5XSA9IHRydWVcbiAgICByZXR1cm4gZXhjbHVkZVxuICB9LCB7fSlcbiAgY29uc3QgZXh0ZXJuYWxzID0ge31cbiAgY29uc3QgYWRkRGVwZW5kZW5jaWVzID0gZGVwZW5kZW5jaWVzID0+IHtcbiAgICBmb3IgKGNvbnN0IGRlcGVuZGVuY3kgaW4gZGVwZW5kZW5jaWVzKSB7XG4gICAgICBhZGREZXBlbmRlbmN5KGRlcGVuZGVuY3kpXG4gICAgfVxuICB9XG4gIGNvbnN0IGFkZERlcGVuZGVuY3kgPSBkZXBlbmRlbmN5ID0+IHtcbiAgICBpZiAoIWV4dGVybmFsc1tkZXBlbmRlbmN5XSAmJiAhZXhjbHVkZXNbZGVwZW5kZW5jeV0pIHtcbiAgICAgIGV4dGVybmFsc1tkZXBlbmRlbmN5XSA9IHtcbiAgICAgICAgcm9vdDogY2FtZWxpemUoZGVwZW5kZW5jeSwgdHJ1ZSksXG4gICAgICAgIGFtZDogZGVwZW5kZW5jeSxcbiAgICAgICAgY29tbW9uanM6IGRlcGVuZGVuY3ksXG4gICAgICAgIGNvbW1vbmpzMjogZGVwZW5kZW5jeVxuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQXR0ZW1wdCBsb2FkaW5nIHRoZSBkZXBlbmRlbmN5J3Mgb3duIGRlcGVuZGVuY2llcyBhbmQgcmVjdXJzaXZlbHlcbiAgICAgICAgLy8gbWFyayB0aGVzZSBhcyBleHRlcm5hbHMgYXMgd2VsbDpcbiAgICAgICAgY29uc3QgcGFja2FnZUpzb24gPSByZXF1aXJlKGAke2RlcGVuZGVuY3l9L3BhY2thZ2UuanNvbmApXG4gICAgICAgIGFkZERlcGVuZGVuY2llcyhwYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMpXG4gICAgICAgIGFkZERlcGVuZGVuY2llcyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKVxuICAgICAgICBhZGREZXBlbmRlbmNpZXMocGFja2FnZUpzb24uZGV2RGVwZW5kZW5jaWVzKVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFN0YXJ0IHdpdGggY3dkIHRvIHJlYWQgZnJvbSAnLi9wYWNrYWdlLmpzb24nIGFuZCB0YWtlIGl0IGZyb20gdGhlcmUuXG4gIGFkZERlcGVuZGVuY3kocHJvY2Vzcy5jd2QoKSlcbiAgcmV0dXJuIGV4dGVybmFsc1xufVxuIl19