"use strict";

exports.__esModule = true;
exports.default = void 0;

var _utils = require("@ditojs/utils");

const TYPE_STATIC = 0;
const TYPE_PARAM = 1;
const TYPE_MATCH_ANY = 2;
const CHAR_PARAM = ':'.charCodeAt(0);
const CHAR_MATCH_ANY = '*'.charCodeAt(0);
const CHAR_SLASH = '/'.charCodeAt(0);

class Node {
  constructor(...args) {
    this.initialize(...args);
  }

  initialize(prefix = '/', type = TYPE_STATIC, children = [], handler = null, paramNames = null) {
    this.label = prefix.charCodeAt(0);
    this.prefix = prefix;
    this.type = type;
    this.children = children;
    this.handler = handler;
    this.paramNames = paramNames;
    this.paramName = null;
  }

  addChild(child) {
    this.children.push(child);
  }

  findChild(label, type) {
    for (const child of this.children) {
      if (child.label === label && child.type === type) {
        return child;
      }
    }
  }

  findChildWithLabel(label) {
    for (const child of this.children) {
      if (child.label === label) {
        return child;
      }
    }
  }

  findChildWithType(type) {
    for (const child of this.children) {
      if (child.type === type) {
        return child;
      }
    }
  }

  add(path, handler) {
    const paramNames = [];

    for (let pos = 0, length = path.length; pos < length; pos++) {
      const ch = path.charCodeAt(pos);

      if (ch === CHAR_PARAM) {
        this.insert(path.slice(0, pos), TYPE_STATIC);
        pos++;
        const start = pos;
        pos += path.slice(pos).match(/^([^/]*)/)[1].length;
        paramNames.push(path.slice(start, pos));
        path = path.slice(0, start) + path.slice(pos);
        length = path.length;

        if (start === length) {
          return this.insert(path, TYPE_PARAM, paramNames, handler);
        }

        pos = start;
        this.insert(path.slice(0, pos), TYPE_PARAM, paramNames);
      } else if (ch === CHAR_MATCH_ANY) {
        this.insert(path.slice(0, pos), TYPE_STATIC);
        paramNames.push('*');
        return this.insert(path, TYPE_MATCH_ANY, paramNames, handler);
      }
    }

    this.insert(path, TYPE_STATIC, paramNames, handler);
  }

  insert(path, type, paramNames, handler) {
    let current = this;

    while (true) {
      const pos = (0, _utils.getCommonOffset)(current.prefix, path);
      const {
        prefix
      } = current;

      if (pos < prefix.length) {
        const node = new Node(prefix.slice(pos), current.type, current.children, current.handler, current.paramNames);
        current.initialize(prefix.slice(0, pos));
        current.addChild(node);

        if (pos < path.length) {
          const node = new Node(path.slice(pos), type);
          current.addChild(node);
          current = node;
        }
      } else if (pos < path.length) {
        path = path.slice(pos);
        const child = current.findChildWithLabel(path.charCodeAt(0));

        if (child !== undefined) {
          current = child;
          continue;
        }

        const node = new Node(path, type);
        current.addChild(node);
        current = node;
      }

      if (handler) {
        current.handler = handler;
        current.paramNames = paramNames;
      }

      if (paramNames) {
        current.paramName = paramNames[paramNames.length - 1];
      }

      break;
    }
  }

  find(path, paramValues = []) {
    const {
      prefix
    } = this;

    if (!path || path === prefix) {
      const {
        handler
      } = this;

      if (handler) {
        const params = {};
        let i = 0;

        for (const name of this.paramNames) {
          params[name] = paramValues[i++];
        }

        return {
          handler,
          params,
          status: 200
        };
      }

      return null;
    }

    const pos = (0, _utils.getCommonOffset)(this.prefix, path);
    const prefixLength = prefix.length;
    const fullMatch = pos === prefixLength;

    if (fullMatch) {
      path = path.slice(prefixLength);
    } else if (this.type !== TYPE_PARAM) {
      return null;
    }

    const staticChild = this.findChild(path.charCodeAt(0), TYPE_STATIC);

    if (staticChild) {
      const result = staticChild.find(path, paramValues);

      if (result) {
        return result;
      }
    }

    if (!fullMatch) {
      return null;
    }

    const paramChild = this.findChildWithType(TYPE_PARAM);

    if (paramChild) {
      let pos = 0;
      const max = path.length;

      while (pos < max && path.charCodeAt(pos) !== CHAR_SLASH) {
        pos++;
      }

      paramValues.push(path.slice(0, pos));
      const result = paramChild.find(path.slice(pos), paramValues);

      if (result) {
        return result;
      }

      paramValues.pop();
    }

    const matchAnyChild = this.findChildWithType(TYPE_MATCH_ANY);

    if (matchAnyChild) {
      paramValues.push(path);
      return matchAnyChild.find('', paramValues);
    }

    return null;
  }

  toString(prefix = '', tail = true, root = true) {
    const handler = this.handler && `${this.handler.name || 'ƒ'}()`;

    const format = (prefix, tail, on, off) => root ? '' : `${prefix}${tail ? on : off}`;

    const {
      children
    } = this;
    const lines = [`${format(prefix, tail, '└── ', '├── ')}${this.type === TYPE_PARAM ? `${this.prefix}${this.paramName}` : this.prefix}${handler ? ` ${handler}` : ''} children=${children.length}`];
    const str = format(prefix, tail, '    ', '│   ');

    for (let i = 0, l = children.length - 1; i <= l; i++) {
      lines.push(children[i].toString(str, i === l, false));
    }

    return lines.join('\n');
  }

}

exports.default = Node;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,