"use strict";

exports.__esModule = true;
exports.default = void 0;

var _http = _interopRequireDefault(require("http"));

var _Node = _interopRequireDefault(require("./Node"));

var _Result = _interopRequireDefault(require("./Result"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CHAR_SLASH = '/'.charCodeAt(0);

class Router {
  constructor(options) {
    this.trees = {};
    this._options = options || {};
  }

  add(method, path, handler) {
    path = this.normalizePath(path);
    const tree = this.trees[method] || (this.trees[method] = new _Node.default());
    tree.add(path, handler);
    return this;
  }

  find(method, path) {
    path = this.normalizePath(path);
    const tree = this.trees[method];
    return tree && tree.find(path) || new _Result.default(this, method, path, tree);
  }

  getAllowedMethods(path = null, exclude = null) {
    if (path) {
      const allowed = [];

      for (const method in this.trees) {
        var _tree$find;

        if (method === exclude) {
          continue;
        }

        const tree = this.trees[method];

        if ((_tree$find = tree.find(path)) != null && _tree$find.handler) {
          allowed.push(method);
        }
      }

      return allowed;
    } else {
      return Object.keys(this.trees);
    }
  }

  get(...args) {
    return this.add('GET', ...args);
  }

  put(...args) {
    return this.add('PUT', ...args);
  }

  post(...args) {
    return this.add('POST', ...args);
  }

  delete(...args) {
    return this.add('DELETE', ...args);
  }

  head(...args) {
    return this.add('HEAD', ...args);
  }

  patch(...args) {
    return this.add('PATCH', ...args);
  }

  options(...args) {
    return this.add('OPTIONS', ...args);
  }

  trace(...args) {
    return this.add('TRACE', ...args);
  }

  connect(...args) {
    return this.add('CONNECT', ...args);
  }

  all(...args) {
    for (const method of _http.default.METHODS) {
      this.add(method, ...args);
    }

    return this;
  }

  normalizePath(path) {
    const {
      strict,
      prefix
    } = this._options;

    if (!strict && path !== '/') {
      const {
        length
      } = path;

      if (path.charCodeAt(length - 1) === CHAR_SLASH) {
        path = path.slice(0, length - 1);
      }

      if (path.charCodeAt(0) !== CHAR_SLASH) {
        path = '/' + path;
      }
    }

    return prefix ? prefix + path : path;
  }

  toString(method = 'GET') {
    const tree = this.trees[method.toUpperCase()];
    return tree ? tree.toString() : '';
  }

}

exports.default = Router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9Sb3V0ZXIuanMiXSwibmFtZXMiOlsiQ0hBUl9TTEFTSCIsImNoYXJDb2RlQXQiLCJSb3V0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJ0cmVlcyIsIl9vcHRpb25zIiwiYWRkIiwibWV0aG9kIiwicGF0aCIsImhhbmRsZXIiLCJub3JtYWxpemVQYXRoIiwidHJlZSIsIk5vZGUiLCJmaW5kIiwiUmVzdWx0IiwiZ2V0QWxsb3dlZE1ldGhvZHMiLCJleGNsdWRlIiwiYWxsb3dlZCIsInB1c2giLCJPYmplY3QiLCJrZXlzIiwiZ2V0IiwiYXJncyIsInB1dCIsInBvc3QiLCJkZWxldGUiLCJoZWFkIiwicGF0Y2giLCJ0cmFjZSIsImNvbm5lY3QiLCJhbGwiLCJodHRwIiwiTUVUSE9EUyIsInN0cmljdCIsInByZWZpeCIsImxlbmd0aCIsInNsaWNlIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLFVBQVUsR0FBRyxJQUFJQyxVQUFKLENBQWUsQ0FBZixDQUFuQjs7QUFFZSxNQUFNQyxNQUFOLENBQWE7QUFDMUJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLEtBQUwsR0FBYSxFQUFiO0FBRUEsU0FBS0MsUUFBTCxHQUFnQkYsT0FBTyxJQUFJLEVBQTNCO0FBQ0Q7O0FBRURHLEVBQUFBLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTQyxJQUFULEVBQWVDLE9BQWYsRUFBd0I7QUFDekJELElBQUFBLElBQUksR0FBRyxLQUFLRSxhQUFMLENBQW1CRixJQUFuQixDQUFQO0FBQ0EsVUFBTUcsSUFBSSxHQUFHLEtBQUtQLEtBQUwsQ0FBV0csTUFBWCxNQUF1QixLQUFLSCxLQUFMLENBQVdHLE1BQVgsSUFBcUIsSUFBSUssYUFBSixFQUE1QyxDQUFiO0FBQ0FELElBQUFBLElBQUksQ0FBQ0wsR0FBTCxDQUFTRSxJQUFULEVBQWVDLE9BQWY7QUFDQSxX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O0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBRURaLEVBQUFBLGFBQWEsQ0FBQ0YsSUFBRCxFQUFPO0FBQ2xCLFVBQU07QUFBRXlCLE1BQUFBLE1BQUY7QUFBVUMsTUFBQUE7QUFBVixRQUFxQixLQUFLN0IsUUFBaEM7O0FBQ0EsUUFBSSxDQUFDNEIsTUFBRCxJQUFXekIsSUFBSSxLQUFLLEdBQXhCLEVBQTZCO0FBRzNCLFlBQU07QUFBRTJCLFFBQUFBO0FBQUYsVUFBYTNCLElBQW5COztBQUNBLFVBQUlBLElBQUksQ0FBQ1IsVUFBTCxDQUFnQm1DLE1BQU0sR0FBRyxDQUF6QixNQUFnQ3BDLFVBQXBDLEVBQWdEO0FBQzlDUyxRQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQzRCLEtBQUwsQ0FBVyxDQUFYLEVBQWNELE1BQU0sR0FBRyxDQUF2QixDQUFQO0FBQ0Q7O0FBQ0QsVUFBSTNCLElBQUksQ0FBQ1IsVUFBTCxDQUFnQixDQUFoQixNQUF1QkQsVUFBM0IsRUFBdUM7QUFDckNTLFFBQUFBLElBQUksR0FBRyxNQUFNQSxJQUFiO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPMEIsTUFBTSxHQUFHQSxNQUFNLEdBQUcxQixJQUFaLEdBQW1CQSxJQUFoQztBQUNEOztBQUVENkIsRUFBQUEsUUFBUSxDQUFDOUIsTUFBTSxHQUFHLEtBQVYsRUFBaUI7QUFDdkIsVUFBTUksSUFBSSxHQUFHLEtBQUtQLEtBQUwsQ0FBV0csTUFBTSxDQUFDK0IsV0FBUCxFQUFYLENBQWI7QUFDQSxXQUFPM0IsSUFBSSxHQUFHQSxJQUFJLENBQUMwQixRQUFMLEVBQUgsR0FBcUIsRUFBaEM7QUFDRDs7QUFyR3lCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCdcbmltcG9ydCBOb2RlIGZyb20gJy4vTm9kZSdcbmltcG9ydCBSZXN1bHQgZnJvbSAnLi9SZXN1bHQnXG5cbmNvbnN0IENIQVJfU0xBU0ggPSAnLycuY2hhckNvZGVBdCgwKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy50cmVlcyA9IHt9XG4gICAgLy8gYHRoaXMub3B0aW9ucygpYCBpcyBhbHJlYWR5IGEgbWV0aG9kIGZvciB0aGUgT1BUSU9OUyB2ZXJiIVxuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIH1cblxuICBhZGQobWV0aG9kLCBwYXRoLCBoYW5kbGVyKSB7XG4gICAgcGF0aCA9IHRoaXMubm9ybWFsaXplUGF0aChwYXRoKVxuICAgIGNvbnN0IHRyZWUgPSB0aGlzLnRyZWVzW21ldGhvZF0gfHwgKHRoaXMudHJlZXNbbWV0aG9kXSA9IG5ldyBOb2RlKCkpXG4gICAgdHJlZS5hZGQocGF0aCwgaGFuZGxlcilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgZmluZChtZXRob2QsIHBhdGgpIHtcbiAgICBwYXRoID0gdGhpcy5ub3JtYWxpemVQYXRoKHBhdGgpXG4gICAgY29uc3QgdHJlZSA9IHRoaXMudHJlZXNbbWV0aG9kXVxuICAgIHJldHVybiB0cmVlICYmIHRyZWUuZmluZChwYXRoKSB8fCBuZXcgUmVzdWx0KHRoaXMsIG1ldGhvZCwgcGF0aCwgdHJlZSlcbiAgfVxuXG4gIGdldEFsbG93ZWRNZXRob2RzKHBhdGggPSBudWxsLCBleGNsdWRlID0gbnVsbCkge1xuICAgIGlmIChwYXRoKSB7XG4gICAgICBjb25zdCBhbGxvd2VkID0gW11cbiAgICAgIC8vIFNlYXJjaCBmb3IgYWxsb3dlZCBtZXRob2RzIGluIGFsbCB0cmVlcy5cbiAgICAgIGZvciAoY29uc3QgbWV0aG9kIGluIHRoaXMudHJlZXMpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gZXhjbHVkZSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHJlZSA9IHRoaXMudHJlZXNbbWV0aG9kXVxuICAgICAgICBpZiAodHJlZS5maW5kKHBhdGgpPy5oYW5kbGVyKSB7XG4gICAgICAgICAgYWxsb3dlZC5wdXNoKG1ldGhvZClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFsbG93ZWRcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudHJlZXMpXG4gICAgfVxuICB9XG5cbiAgZ2V0KC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5hZGQoJ0dFVCcsIC4uLmFyZ3MpXG4gIH1cblxuICBwdXQoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmFkZCgnUFVUJywgLi4uYXJncylcbiAgfVxuXG4gIHBvc3QoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmFkZCgnUE9TVCcsIC4uLmFyZ3MpXG4gIH1cblxuICBkZWxldGUoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmFkZCgnREVMRVRFJywgLi4uYXJncylcbiAgfVxuXG4gIGhlYWQoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmFkZCgnSEVBRCcsIC4uLmFyZ3MpXG4gIH1cblxuICBwYXRjaCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKCdQQVRDSCcsIC4uLmFyZ3MpXG4gIH1cblxuICBvcHRpb25zKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5hZGQoJ09QVElPTlMnLCAuLi5hcmdzKVxuICB9XG5cbiAgdHJhY2UoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLmFkZCgnVFJBQ0UnLCAuLi5hcmdzKVxuICB9XG5cbiAgY29ubmVjdCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuYWRkKCdDT05ORUNUJywgLi4uYXJncylcbiAgfVxuXG4gIGFsbCguLi5hcmdzKSB7XG4gICAgZm9yIChjb25zdCBtZXRob2Qgb2YgaHR0cC5NRVRIT0RTKSB7XG4gICAgICB0aGlzLmFkZChtZXRob2QsIC4uLmFyZ3MpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBub3JtYWxpemVQYXRoKHBhdGgpIHtcbiAgICBjb25zdCB7IHN0cmljdCwgcHJlZml4IH0gPSB0aGlzLl9vcHRpb25zXG4gICAgaWYgKCFzdHJpY3QgJiYgcGF0aCAhPT0gJy8nKSB7XG4gICAgICAvLyBXaGVuIG5vdCBpbiBzdHJpY3QgbW9kZSwgcmVtb3ZlIHRyYWlsaW5nIHNsYXNoIGZyb20gYW55IHBhdGggZXhjZXB0XG4gICAgICAvLyAnLycsIGFuZCBtYWtlIHN1cmUgcGF0aCBzdGFydHMgd2l0aCAnLydcbiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSBwYXRoXG4gICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpID09PSBDSEFSX1NMQVNIKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGxlbmd0aCAtIDEpXG4gICAgICB9XG4gICAgICBpZiAocGF0aC5jaGFyQ29kZUF0KDApICE9PSBDSEFSX1NMQVNIKSB7XG4gICAgICAgIHBhdGggPSAnLycgKyBwYXRoXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBwYXRoIDogcGF0aFxuICB9XG5cbiAgdG9TdHJpbmcobWV0aG9kID0gJ0dFVCcpIHtcbiAgICBjb25zdCB0cmVlID0gdGhpcy50cmVlc1ttZXRob2QudG9VcHBlckNhc2UoKV1cbiAgICByZXR1cm4gdHJlZSA/IHRyZWUudG9TdHJpbmcoKSA6ICcnXG4gIH1cbn1cbiJdfQ==