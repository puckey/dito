"use strict";

require("core-js/modules/esnext.weak-map.delete-all.js");

exports.__esModule = true;
exports.Validator = void 0;

var _objection = _interopRequireDefault(require("objection"));

var _ajv = _interopRequireDefault(require("ajv"));

var _ajvFormats = _interopRequireDefault(require("ajv-formats"));

var _utils = require("@ditojs/utils");

var _utils2 = require("../utils");

var schema = _interopRequireWildcard(require("../schema"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Validator extends _objection.default.Validator {
  constructor({
    options,
    keywords,
    formats
  } = {}) {
    super();
    this.options = { ...defaultOptions,
      ...options
    };
    this.keywords = { ...schema.keywords,
      ...keywords
    };
    this.formats = { ...schema.formats,
      ...formats
    };
    this.schemas = [];
    this.ajvCache = Object.create(null);
  }

  createAjv(options) {
    const {
      async,
      patch,
      ...opts
    } = options;
    const ajv = new _ajv.default({ ...this.options,
      ...opts,
      ...(patch && {
        useDefaults: false
      })
    });
    (0, _ajvFormats.default)(ajv, {
      mode: 'full'
    });

    const addSchemas = (schemas, callback) => {
      for (const [name, schema] of Object.entries(schemas)) {
        if (schema) {
          callback(name.replace(/^_/, ''), schema);
        }
      }
    };

    addSchemas(this.keywords, (keyword, schema) => ajv.addKeyword({
      keyword,
      ...schema
    }));
    addSchemas(this.formats, (format, schema) => ajv.addFormat(format, { ...schema
    }));

    for (const schema of this.schemas) {
      ajv.addSchema(this.processSchema(schema, options));
    }

    return ajv;
  }

  getAjv(options = {}) {
    const opts = Object.entries(options).reduce((opts, [key, value]) => {
      if (key in validatorOptions && value !== validatorOptions[key]) {
        opts[key] = value;
      }

      return opts;
    }, {});
    const cacheKey = (0, _utils2.formatJson)(opts, false);
    const {
      ajv
    } = this.ajvCache[cacheKey] || (this.ajvCache[cacheKey] = {
      ajv: this.createAjv(opts),
      options
    });
    return ajv;
  }

  compile(jsonSchema, options = {}) {
    const ajv = this.getAjv(options);
    const validator = ajv.compile(this.processSchema(jsonSchema, options));
    const dontThrow = options.throw === false;
    return options.async ? dontThrow ? async function validate(data) {
      let result;

      try {
        result = await validator.call(this, data);
      } catch (error) {
        if (error.errors) {
          validate.errors = error.errors;
          result = false;
        } else {
          throw error;
        }
      }

      return result;
    } : validator : dontThrow ? validator : function (data) {
      const result = validator.call(this, data);

      if (!result) {
        throw new _ajv.default.ValidationError(validator.errors);
      }

      return result;
    };
  }

  getKeyword(keyword) {
    return this.keywords[keyword];
  }

  getFormat(format) {
    return this.formats[format];
  }

  addSchema(jsonSchema) {
    this.schemas.push(jsonSchema);

    for (const {
      ajv,
      options
    } of Object.values(this.ajvCache)) {
      ajv.addSchema(this.processSchema(jsonSchema, options));
    }
  }

  processSchema(jsonSchema, options = {}) {
    const {
      patch,
      async
    } = options;
    const schema = (0, _utils.clone)(jsonSchema, value => {
      if ((0, _utils.isObject)(value)) {
        if (patch) {
          delete value.required;

          if (value.format === 'required') {
            delete value.format;
          }
        }

        if ((0, _utils.isAsync)(value.validate)) {
          value.validateAsync = value.validate;
          delete value.validate;
        }

        if (!async) {
          for (const key in value) {
            const keyword = this.getKeyword(key);

            if (keyword != null && keyword.async) {
              delete value[key];
            }
          }
        }
      }
    });

    if (async) {
      schema.$async = true;
    }

    return schema;
  }

  parseErrors(errors, options = {}) {
    const errorHash = {};
    const duplicates = {};

    for (const error of errors) {
      const dataPath = `${(options == null ? void 0 : options.dataPath) || ''}${error.dataPath}`;
      const key = dataPath.replace(/\['([^']*)'\]/g, '.$1').slice(1);
      const {
        message,
        keyword,
        params
      } = error;
      const definition = keyword === 'format' ? this.getFormat(params.format) : this.getKeyword(keyword);
      const identifier = `${key}_${keyword}`;

      if (!duplicates[identifier] && !/^\$/.test(keyword) && !(definition != null && definition.macro) && !(definition != null && definition.silent)) {
        const array = errorHash[key] || (errorHash[key] = []);
        array.push({
          message: (definition == null ? void 0 : definition.message) || message,
          keyword,
          params
        });
        duplicates[identifier] = true;
      }
    }

    for (const [dataPath, errors] of Object.entries(errorHash)) {
      if (errors.length === 2) {
        const [error1, error2] = errors;

        if (error1.keyword === 'type' && error1.params.type === 'null' && error2.keyword === 'oneOf') {
          delete errorHash[dataPath];
        }
      }
    }

    return errorHash;
  }

  prefixDataPaths(errors, dataPathPrefix) {
    return errors.map(error => ({ ...error,
      dataPath: error.dataPath ? `${dataPathPrefix}${error.dataPath}` : dataPathPrefix
    }));
  }

  beforeValidate({
    json,
    model,
    ctx,
    options
  }) {
    ctx.validator = this;
    ctx.app = this.app;
    ctx.options = options;
    ctx.jsonSchema = model.constructor.getJsonSchema();
    const {
      $beforeValidate
    } = model;

    if ($beforeValidate !== _objection.default.Model.prototype.$beforeValidate) {
      if ($beforeValidate.length > 0) {
        ctx.jsonSchema = (0, _utils.clone)(ctx.jsonSchema);
      }

      const ret = model.$beforeValidate(ctx.jsonSchema, json, options);

      if (ret !== undefined) {
        ctx.jsonSchema = ret;
      }
    }
  }

  validate({
    json,
    model,
    ctx,
    options
  }) {
    const {
      jsonSchema
    } = ctx;

    if (jsonSchema) {
      if (!options.mutable && !options.patch && hasDefaults(jsonSchema.properties)) {
        json = (0, _utils.clone)(json);
      }

      const validate = this.getAjv(options).getSchema(jsonSchema.$id);
      const res = validate.call(ctx, json);

      const handleErrors = errors => {
        if (errors) {
          throw model.constructor.createValidationError({
            type: 'ModelValidation',
            errors,
            options,
            json
          });
        }
      };

      if ((0, _utils.isPromise)(res)) {
        return res.catch(error => handleErrors(error.errors)).then(() => json);
      } else {
        handleErrors(validate.errors);
        return json;
      }
    }
  }

}

exports.Validator = Validator;

function hasDefaults(obj) {
  if ((0, _utils.isArray)(obj)) {
    for (const val of obj) {
      if (val && hasDefaults(val)) {
        return true;
      }
    }
  } else if ((0, _utils.isObject)(obj)) {
    for (const [key, val] of Object.entries(obj)) {
      if (key === 'default' || val && hasDefaults(val)) {
        return true;
      }
    }
  }

  return false;
}

const defaultOptions = {
  strict: false,
  allErrors: true,
  ownProperties: true,
  passContext: true,
  useDefaults: true,
  validateSchema: true
};
const validatorOptions = {
  async: false,
  patch: false,
  $data: false,
  $comment: false,
  coerceTypes: false,
  multipleOfPrecision: false,
  ownProperties: true,
  removeAdditional: false,
  uniqueItems: true,
  useDefaults: true,
  verbose: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,