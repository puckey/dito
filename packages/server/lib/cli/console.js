"use strict";

exports.__esModule = true;
exports.default = startConsole;

var _repl = _interopRequireDefault(require("repl"));

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chalk = _interopRequireDefault(require("chalk"));

var _objection = _interopRequireDefault(require("objection"));

var _utils = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let started = false;
let server = null;

async function startConsole(app, config) {
  config = {
    quiet: false,
    prompt: 'dito > ',
    useColors: true,
    ignoreUndefined: true,
    ...config
  };

  if (started) {
    return server;
  }

  started = true;
  server = _repl.default.start({ ...config,
    prompt: ''
  });
  server.pause();
  Object.assign(server.context, {
    app,
    objection: _objection.default,
    ...app.models
  });
  server.eval = wrapEval(server);
  server.defineCommand('usage', {
    help: 'Detailed Dito Console usage information',

    action() {
      displayUsage(app, config, true);
      this.displayPrompt();
    }

  });
  server.defineCommand('models', {
    help: 'Display available Dito models',

    action() {
      console.info(Object.keys(app.models).join(', '));
      this.displayPrompt();
    }

  });

  const historyFile = _path.default.join(process.cwd(), '.console_history');

  try {
    await _fsExtra.default.stat(historyFile);
    const lines = await _fsExtra.default.readFile(historyFile);
    lines.toString().split('\n').reverse().slice(0, config.historySize).filter(line => line.trim()).map(line => server.history.push(line));
  } catch (e) {
    console.info((0, _utils.deindent)`
      Unable to REPL history file at ${historyFile}.
      A history file will be created on shutdown
    `);
  }

  await app.start();

  if (!config.quiet) {
    displayUsage(app, config);
  }

  server.setPrompt(config.prompt);
  server.resume();
  server.write('', {
    name: 'return'
  });
  return new Promise(resolve => {
    server.once('exit', async () => {
      try {
        await app.stop();
      } catch (err) {
        logError(err);
      }

      try {
        const lines = (server.history || []).reverse().filter(line => line.trim()).join('\n');
        await _fsExtra.default.writeFile(historyFile, lines);
      } catch (err) {
        logError(err);
      }

      resolve(true);
    });
  });
}

function displayUsage(app, config, details) {
  const modelHandleNames = Object.keys(app.models);
  console.info((0, _utils.deindent)`

    ------------------------------------------------------------
    Dito Console

    Available references:
     - Dito app: ${_chalk.default.cyan('app')}
    ${modelHandleNames.length > 0 ? ` - Dito models: ${modelHandleNames.map(m => _chalk.default.cyan(m)).join(', ')}` : ''}
  `);

  if (details) {
    console.info((0, _utils.deindent)`
      Examples:

      ${config.prompt} user = User.where({ lastName: 'Doe' }).first()
      ${config.prompt} user.$patch({ firstName: 'Joe' })
      ${config.prompt} user.$comments.insert({ ... })
    `);
  }

  console.info('------------------------------------------------------------');
}

function wrapEval({
  eval: defaultEval
}) {
  return async function (code, context, file, cb) {
    return defaultEval.call(this, code, context, file, async (err, result) => {
      if (err || !(result && (0, _utils.isFunction)(result.then))) {
        return cb(err, result);
      }

      try {
        const resolved = await result;

        for (const key in context) {
          if (context[key] === result) {
            context[key] = resolved;
          }
        }

        cb(null, resolved);
      } catch (error) {
        logError(error);
        cb();
      }
    });
  };
}

function logError(error) {
  console.info(`\x1b[31m${error}\x1b[0m`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,