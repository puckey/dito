"use strict";

exports.__esModule = true;
exports.createMigration = createMigration;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _chalk = _interopRequireDefault(require("chalk"));

var _schema = require("../../schema");

var _utils = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const typeToKnex = {
  number: 'double',
  object: 'json',
  array: 'json'
};
const defaultValues = {
  'now()': `knex.raw('CURRENT_TIMESTAMP')`
};

const migrationDir = _path.default.join(process.cwd(), 'migrations');

async function createMigration(app, name, ...modelNames) {
  const models = modelNames.map(modelName => {
    const modelClass = app.models[modelName];

    if (!modelClass) {
      throw new Error(`Model class with name '${modelName}' does not exist`);
    }

    return modelClass;
  });
  const tables = [];

  for (const modelClass of models) {
    collectModelTables(modelClass, app, tables);
  }

  for (const modelClass of models) {
    collectThroughTables(modelClass, app, tables);
  }

  const createTables = [];
  const dropTables = [];

  for (const {
    tableName,
    statements
  } of tables) {
    createTables.push((0, _utils.deindent)`
      .createTable('${tableName}', table => {
        ${statements.join('\n')}
      })`);
    dropTables.unshift((0, _utils.deindent)`
      .dropTableIfExists('${tableName}')`);
  }

  const getCode = tables => tables.length > 0 ? (0, _utils.deindent)`
      await knex.schema
        ${tables.join('\n')}` : '';

  const filename = `${getTimestamp()}_${name}.js`;

  const file = _path.default.join(migrationDir, filename);

  if (await _fsExtra.default.exists(file)) {
    console.info(_chalk.default.red(`Migration '${filename}' already exists.`));
    return false;
  } else {
    await _fsExtra.default.writeFile(file, (0, _utils.deindent)`
      export async function up(knex) {
        ${getCode(createTables)}
      }

      export async function down(knex) {
        ${getCode(dropTables)}
      }
    `);
    console.info(_chalk.default.cyan(`Migration '${filename}' successfully created.`));
    return true;
  }
}

async function collectModelTables(modelClass, app, tables) {
  const tableName = app.normalizeIdentifier(modelClass.tableName);
  const {
    properties,
    relations
  } = modelClass.definition;
  const statements = [];
  tables.push({
    tableName,
    statements
  });
  const uniqueComposites = {};

  for (const [name, property] of Object.entries(properties)) {
    const column = app.normalizeIdentifier(name);
    let {
      description,
      type,
      specificType,
      unsigned,
      computed,
      nullable,
      required,
      primary,
      foreign,
      unique,
      index,
      default: _default
    } = property;
    const knexType = typeToKnex[type] || type;

    if (!computed) {
      if (description) {
        statements.push(`// ${description.replace(/\s{2,}/g, ' ').trim()}`);
      }

      if ((0, _utils.isString)(unique)) {
        const composites = uniqueComposites[unique] || (uniqueComposites[unique] = []);
        composites.push(column);
        unique = false;
      }

      const statement = primary ? [`table.increments('${column}').primary()`] : specificType ? [`table.specificType('${column}', '${specificType}')`] : [`table.${knexType}('${column}')`];
      statement.push(unsigned && 'unsigned()', !primary && required && 'notNullable()', nullable && 'nullable()', unique && 'unique()', index && 'index()');

      if (_default !== undefined) {
        let value = defaultValues[_default];

        if (!value) {
          value = (0, _utils.isArray)(_default) || (0, _utils.isObject)(_default) ? JSON.stringify(_default) : _default;

          if ((0, _utils.isString)(value)) {
            value = `'${value}'`;
          }
        }

        statement.push(`defaultTo(${value})`);
      }

      if (foreign) {
        for (const relation of Object.values(relations)) {
          const {
            from,
            to,
            owner
          } = relation;
          const [fromClass, fromProperty] = (from == null ? void 0 : from.split('.')) || [];

          if (fromProperty === name) {
            if (fromClass !== modelClass.name) {
              throw Error(`Invalid relation declaration: ${relation}`);
            }

            const [toClass, toProperty] = (to == null ? void 0 : to.split('.')) || [];
            statement.push('\n', `references('${app.normalizeIdentifier(toProperty)}')`, `inTable('${app.normalizeIdentifier(toClass)}')`, !owner && `onDelete('CASCADE')`);
          }
        }
      }

      statements.push(statement.filter(str => !!str).join('.').replace(/\.\n\./g, '\n  .'));
    }
  }

  for (const composites of Object.values(uniqueComposites)) {
    statements.push(`table.unique([${composites.map(column => `'${column}'`).join(', ')}])`);
  }
}

async function collectThroughTables(modelClass, app, tables) {
  const {
    relations
  } = modelClass.definition;

  for (const relation of Object.values(relations)) {
    const {
      from,
      to,
      inverse
    } = relation;
    const relationClass = (0, _schema.getRelationClass)(relation.relation);

    if ((0, _schema.isThroughRelationClass)(relationClass) && !inverse) {
      const [fromClass, fromProperty] = (from == null ? void 0 : from.split('.')) || [];
      const [toClass, toProperty] = (to == null ? void 0 : to.split('.')) || [];
      const statements = [];
      const tableName = app.normalizeIdentifier(`${fromClass}${toClass}`);
      const fromId = app.normalizeIdentifier(`${fromClass}${(0, _utils.capitalize)(fromProperty)}`);
      const toId = app.normalizeIdentifier(`${toClass}${(0, _utils.capitalize)(toProperty)}`);
      tables.push({
        tableName,
        statements
      });
      statements.push(`table.increments('id').primary()`);
      statements.push((0, _utils.deindent)`
        table.integer('${fromId}').unsigned().index()
          .references('${app.normalizeIdentifier(fromProperty)}')\\
          .inTable('${app.normalizeIdentifier(fromClass)}')\\
          .onDelete('CASCADE')`);
      statements.push((0, _utils.deindent)`
        table.integer('${toId}').unsigned().index()
          .references('${app.normalizeIdentifier(toProperty)}')\\
          .inTable('${app.normalizeIdentifier(toClass)}')\\
          .onDelete('CASCADE')`);
    }
  }
}

function padDate(segment) {
  return segment.toString().padStart(2, '0');
}

function getTimestamp() {
  const d = new Date();
  return d.getFullYear().toString() + padDate(d.getMonth() + 1) + padDate(d.getDate()) + padDate(d.getHours()) + padDate(d.getMinutes()) + padDate(d.getSeconds());
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,