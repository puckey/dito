"use strict";

exports.__esModule = true;
exports.AdminController = void 0;

var _path = _interopRequireDefault(require("path"));

var _koa = _interopRequireDefault(require("koa"));

var _koaMount = _interopRequireDefault(require("koa-mount"));

var _koaStatic = _interopRequireDefault(require("koa-static"));

var _koaWebpack = _interopRequireDefault(require("koa-webpack"));

var _koaConnectHistoryApiFallback = _interopRequireDefault(require("koa-connect-history-api-fallback"));

var _cliService = _interopRequireDefault(require("@vue/cli-service"));

var _htmlWebpackTagsPlugin = _interopRequireDefault(require("html-webpack-tags-plugin"));

var _Controller = require("./Controller");

var _errors = require("../errors");

var _utils = require("../utils");

var _utils2 = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class AdminController extends _Controller.Controller {
  constructor(app, namespace) {
    super(app, namespace);
    this.config = { ...this.app.config.admin,
      ...this.config
    };
    this.mode = this.config.mode || (this.app.config.env === 'development' ? 'development' : 'production');
  }

  getPath(name) {
    var _this$config$name;

    const str = (_this$config$name = this.config[name]) == null ? void 0 : _this$config$name.path;

    if (!str) {
      throw new _errors.ControllerError(this, `Missing admin.${name}.path configuration.`);
    }

    return _path.default.resolve(str);
  }

  getDitoObject() {
    const {
      api = {},
      settings = {}
    } = this.config;

    if (api.normalizePaths == null) {
      api.normalizePaths = this.app.config.app.normalizePaths;
    }

    return {
      base: this.url,
      api,
      settings
    };
  }

  sendDitoObject(ctx) {
    ctx.type = 'text/javascript';
    ctx.body = `window.dito = ${(0, _utils.formatJson)(this.getDitoObject(), false)}`;
  }

  middleware() {
    const authorization = this.processAuthorize(this.authorize);
    return async (ctx, next) => {
      if (/^\/dito\b/.test(ctx.url)) {
        return this.sendDitoObject(ctx);
      } else if (/\/views\b/.test(ctx.url)) {
        await this.handleAuthorization(authorization, ctx);
      }

      await next();
    };
  }

  compose() {
    this.koa = new _koa.default();
    this.koa.use(this.middleware());

    if (this.mode === 'development') {
      if (this.getPath('build')) {
        this.app.once('after:start', () => this.setupKoaWebpack());
      }
    } else {
      this.koa.use(async (ctx, next) => {
        if (!ctx.url.match(/^\/(app\.|css\/|js\/)/)) {
          ctx.url = '/';
        }

        await next();
      });
      this.koa.use((0, _koaStatic.default)(this.getPath('dist')));
    }

    return (0, _koaMount.default)(this.url, this.koa);
  }

  async setupKoaWebpack() {
    const stats = {
      all: false,
      errors: true,
      errorDetails: true
    };
    const middleware = await (0, _koaWebpack.default)({
      config: this.getWebpackConfig(),
      devMiddleware: {
        publicPath: '/',
        stats
      },
      hotClient: this.config.hotReload !== false && {
        logLevel: 'error',
        stats
      }
    });
    this.koa.use((0, _koaConnectHistoryApiFallback.default)());
    this.koa.use(middleware);
  }

  getVueConfig() {
    const development = this.mode === 'development';
    const {
      build = {},
      devtool = development ? 'source-map' : false
    } = this.config;
    return {
      runtimeCompiler: true,
      publicPath: `${this.url}/`,
      configureWebpack: {
        devtool,
        entry: [this.getPath('build')],
        resolve: {
          alias: {
            'webpack-hot-client/client': require.resolve('webpack-hot-client/client')
          }
        },
        output: {
          filename: '[name].[hash].js'
        },
        optimization: {
          splitChunks: {
            cacheGroups: {
              common: {
                name: 'common',
                test: /\/node_modules\//,
                chunks: 'all'
              },
              views: {
                name: 'views',
                test: /\/views\//,
                chunks: 'all'
              }
            }
          }
        },
        module: development ? {
          rules: [{
            test: /\.(js|css)$/,
            enforce: 'pre',
            use: [require.resolve('source-map-loader')]
          }]
        } : {},
        plugins: [new _htmlWebpackTagsPlugin.default({
          scripts: ['dito.js'],
          useHash: true,
          addHash: (path, hash) => path.replace(/\.js$/, `.${hash}.js`),
          append: false
        })],
        stats: {
          warningsFilter: /Failed to parse source map/
        }
      },
      chainWebpack: conf => {
        const {
          template = 'index.html'
        } = build;
        conf.plugin('html').tap(args => {
          args[0].template = /^[./]/.test(template) ? _path.default.resolve(template) : _path.default.join(this.getPath('build'), template);
          return args;
        });

        if (development) {
          var _jsRule$toConfig$use;

          const jsRule = conf.module.rule('js');
          const hasBabel = (_jsRule$toConfig$use = jsRule.toConfig().use) == null ? void 0 : _jsRule$toConfig$use.some(({
            loader
          }) => /\bbabel-loader\b/.test(loader));

          if (hasBabel) {
            jsRule.use('babel-loader').options({
              compact: false
            });
          }

          conf.plugins.delete('friendly-errors');
        }
      }
    };
  }

  getVuePlugins() {
    var _this$config$plugins;

    return (_this$config$plugins = this.config.plugins) == null ? void 0 : _this$config$plugins.map(definition => {
      const plugin = (0, _utils2.isString)(definition) ? {
        id: definition
      } : (0, _utils2.isObject)(definition) ? definition : {};
      const {
        id,
        apply = require(id)
      } = plugin;

      if (!id) {
        throw new _errors.ControllerError(this, `Invalid plugin definition: ${definition}`);
      }

      return {
        id,
        apply
      };
    });
  }

  getWebpackConfig() {
    const service = new _cliService.default(this.getPath('build'), {
      inlineOptions: this.getVueConfig(),
      plugins: this.getVuePlugins()
    });
    service.init(this.mode);
    return service.resolveWebpackConfig();
  }

}

exports.AdminController = AdminController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,