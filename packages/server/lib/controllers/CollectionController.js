"use strict";

exports.__esModule = true;
exports.CollectionController = void 0;

var _Controller = require("./Controller");

var _errors = require("../errors");

var _utils = require("@ditojs/utils");

class CollectionController extends _Controller.Controller {
  constructor(app, namespace) {
    super(app, namespace);
    this.collection = this.toCoreActions({
      async find(ctx, modify) {
        const result = await this.execute(ctx, (query, trx) => {
          query.find(ctx.query, this.allowParam).modify(getModify(modify, trx));
          return this.isOneToOne ? query.first() : query;
        });
        return result || null;
      },

      async delete(ctx, modify) {
        const count = await this.execute(ctx, (query, trx) => query.ignoreScope().find(ctx.query, this.allowParam).modify(query => this.isOneToOne && query.throwIfNotFound()).modify(getModify(modify, trx)).modify(query => this.unrelate ? query.unrelate() : query.delete()));
        return {
          count
        };
      },

      async insert(ctx, modify) {
        const result = this.relate ? await this.execute(ctx, (query, trx) => query.patchDitoGraphAndFetch(ctx.request.body, {
          relate: true
        }).modify(getModify(modify, trx))) : await this.executeAndFetch('insert', ctx, modify);
        ctx.status = 201;

        if ((0, _utils.isObject)(result)) {
          ctx.set('Location', this.getUrl('collection', result.id));
        }

        return result;
      },

      async update(ctx, modify) {
        return this.executeAndFetch('update', ctx, modify);
      },

      async patch(ctx, modify) {
        return this.executeAndFetch('patch', ctx, modify);
      }

    });
    this.member = this.toCoreActions({
      async find(ctx, modify) {
        return this.execute(ctx, (query, trx) => query.findById(ctx.memberId).find(ctx.query, this.allowParam).throwIfNotFound().modify(getModify(modify, trx)));
      },

      async delete(ctx, modify) {
        const count = await this.execute(ctx, (query, trx) => query.ignoreScope().findById(ctx.memberId).find(ctx.query, this.allowParam).throwIfNotFound().modify(getModify(modify, trx)).modify(query => this.unrelate ? query.unrelate() : query.delete()));
        return {
          count
        };
      },

      async update(ctx, modify) {
        return this.executeAndFetchById('update', ctx, modify);
      },

      async patch(ctx, modify) {
        return this.executeAndFetchById('patch', ctx, modify);
      }

    });
    this.modelClass = null;
    this.isOneToOne = false;
    this.relate = false;
    this.unrelate = false;
  }

  setup(isRoot) {
    super.setup(isRoot, false);
    this.idParam = this.level ? `id${this.level}` : 'id';
    this.graph = !!this.graph;
    this.transacted = !!this.transacted;
    this.scope = this.scope || null;
    this.collection = this.setupActions('collection');
    this.member = this.isOneToOne ? {} : this.setupActions('member');
    this.idValidator = new this.modelClass();
  }

  setupAction(type, actions, name, handler, authorize, verb, path) {
    if (name in actionToVerb) {
      verb = actionToVerb[name];
      path = '';
    }

    return super.setupAction(type, actions, name, handler, authorize, verb, path);
  }

  setupAssets() {
    const {
      modelClass
    } = this;

    if (this.assets === true) {
      this.assets = modelClass.definition.assets || null;
    } else if ((0, _utils.isObject)(this.assets)) {
      this.assets = { ...modelClass.definition.assets,
        ...this.assets
      };
    } else {
      this.assets = null;
    }

    return super.setupAssets();
  }

  getPath(type, path) {
    return type === 'member' ? path ? `:${this.idParam}/${path}` : `:${this.idParam}` : path;
  }

  extendContext(ctx, object) {
    return Object.setPrototypeOf(object, ctx);
  }

  getMemberId(ctx) {
    return this.validateId(ctx.params[this.idParam]);
  }

  getContextWithMemberId(ctx, memberId = this.getMemberId(ctx)) {
    return this.extendContext(ctx, {
      memberId
    });
  }

  getCollectionIds(ctx) {
    const idProperty = this.modelClass.getIdProperty();
    const getId = (0, _utils.isArray)(idProperty) ? model => idProperty.reduce((id, key) => {
      id.push(model[key]);
      return id;
    }, []) : model => model[idProperty];
    return (0, _utils.asArray)(ctx.request.body).map(model => this.validateId(getId(model)));
  }

  getIds(ctx) {
    const {
      type
    } = ctx.action;
    return type === 'member' ? [this.getMemberId(ctx)] : type === 'collection' ? this.getCollectionIds(ctx) : [];
  }

  validateId(id) {
    const reference = this.modelClass.getReference(id);
    this.idValidator.$validate(reference, {
      coerceTypes: true,
      patch: true
    });
    const values = Object.values(reference);
    return values.length > 1 ? values : values[0];
  }

  async getMember(ctx, base = this, {
    query = {},
    modify = null,
    forUpdate = false
  } = {}) {
    return this.member.find.call(this, this.extendContext(ctx, {
      query
    }), (query, trx) => {
      this.setupQuery(query, base);
      query.modify(modify);

      if (forUpdate) {
        if (!trx) {
          throw new _errors.ControllerError(this, 'Using `forUpdate()` without a transaction is invalid');
        }

        query.forUpdate();
      }
    });
  }

  query(trx) {
    return this.setupQuery(this.modelClass.query(trx));
  }

  setupQuery(query, base = this) {
    const {
      scope
    } = base;
    const {
      allowScope,
      allowFilter
    } = this;

    const asAllowArray = value => value === false ? [] : (0, _utils.asArray)(value);

    if (allowScope !== undefined && allowScope !== true) {
      query.allowScope(...asAllowArray(allowScope), ...(0, _utils.asArray)(scope));
    }

    if (allowFilter !== undefined && allowFilter !== true) {
      query.allowFilter(...asAllowArray(allowFilter));
    }

    if (scope) {
      query.withScope(...(0, _utils.asArray)(scope));
    }

    return query;
  }

  async execute() {}

  async executeAndFetch(action, ctx, modify, body = ctx.request.body) {
    const name = `${action}${this.graph ? 'DitoGraph' : ''}AndFetch`;
    return this.execute(ctx, (query, trx) => query[name](body).modify(getModify(modify, trx)));
  }

  async executeAndFetchById(action, ctx, modify, body = ctx.request.body) {
    const name = `${action}${this.graph ? 'DitoGraph' : ''}AndFetchById`;
    return this.execute(ctx, (query, trx) => query[name](ctx.memberId, body).throwIfNotFound().modify(getModify(modify, trx)));
  }

  toCoreActions(actions) {
    for (const action of Object.values(actions)) {
      action.core = true;
    }

    actions.$core = true;
    return actions;
  }

}

exports.CollectionController = CollectionController;

function getModify(modify, trx) {
  return modify ? query => modify(query, trx) : null;
}

const actionToVerb = {
  find: 'get',
  delete: 'delete',
  insert: 'post',
  update: 'put',
  patch: 'patch'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,