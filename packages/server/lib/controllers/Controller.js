"use strict";

exports.__esModule = true;
exports.Controller = void 0;

require("core-js/modules/esnext.weak-map.delete-all.js");

var _chalk = _interopRequireDefault(require("chalk"));

var _utils = require("../utils");

var _lib = require("../lib");

var _ControllerAction = _interopRequireDefault(require("./ControllerAction"));

var _MemberAction = _interopRequireDefault(require("./MemberAction"));

var _errors = require("../errors");

var _utils2 = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  constructor(app, namespace) {
    this.app = app;
    this.namespace = this.namespace || namespace;
    this.logging = this.app.config.log.routes;
    this.level = 0;
  }

  initialize() {}

  setup(isRoot = true, setupActionsObject = true) {
    this._setupEmitter(this.hooks, {
      wildcard: true
    });

    this.name = this.name || this.constructor.name.match(/^(.*?)(?:Controller|)$/)[1];

    if (this.path === undefined) {
      this.path = this.app.normalizePath(this.name);
    }

    this.transacted = !!this.transacted;

    if (isRoot) {
      const {
        path,
        namespace
      } = this;
      const url = path ? `/${path}` : '';
      this.url = namespace ? `/${namespace}${url}` : url;
      this.log(`${namespace ? _chalk.default.green(`/${namespace}/`) : ''}${_chalk.default.cyan(path)}${_chalk.default.white(':')}`, this.level);

      if (setupActionsObject) {
        this.actions = this.actions || this.reflectActionsObject();
        this.actions = this.setupActions('actions');
      }

      this.assets = this.setupAssets();
    }
  }

  reflectActionsObject() {
    const {
      allow
    } = this;
    const controller = allow ? {
      allow
    } : {};

    const addAction = key => {
      const value = this[key];

      if (value != null && value.verb || value != null && value.handler) {
        controller[key] = value;
      }
    };

    const proto = Object.getPrototypeOf(this);
    Object.getOwnPropertyNames(proto).forEach(addAction);
    Object.getOwnPropertyNames(this).forEach(addAction);
    return controller;
  }

  setupRoute(verb, url, transacted, authorize, action, handlers) {
    this.log(`${_chalk.default.magenta(verb.toUpperCase())} ${_chalk.default.green(this.url)}${_chalk.default.cyan(url.slice(this.url.length))} ${_chalk.default.white(this.describeAuthorize(authorize))}`, this.level + 1);
    this.app.addRoute(verb, url, transacted, handlers, this, action);
  }

  setupActions(type) {
    const {
      values: actions,
      authorize
    } = this.processValues(this.inheritValues(type));

    for (const [name, handler] of Object.entries(actions)) {
      this.setupAction(type, actions, name, handler, authorize[name]);
    }

    return actions;
  }

  setupAction(type, actions, name, handler, authorize, verb = 'get', path = this.app.normalizePath(name)) {
    if (!(0, _utils2.isFunction)(handler)) {
      handler = setupHandlerFromObject(handler, actions);
    }

    const actionClass = type === 'member' ? _MemberAction.default : _ControllerAction.default;
    this.setupActionRoute(type, new actionClass(this, handler, type, name, verb, path, authorize));
  }

  setupActionRoute(type, action) {
    const url = this.getUrl(type, action.path);
    const {
      verb,
      transacted,
      authorize
    } = action;
    this.setupRoute(verb, url, transacted, authorize, action, [async ctx => {
      try {
        const res = await action.callAction(ctx);

        if (res !== undefined) {
          ctx.body = res;
        }
      } catch (err) {
        throw err instanceof _errors.ResponseError ? err : new _errors.WrappedError(err);
      }
    }]);
  }

  setupAssets() {
    const {
      values: assets,
      authorize
    } = this.processValues(this.inheritValues('assets'));

    for (const [dataPath, config] of Object.entries(assets || {})) {
      this.setupAssetRoute(dataPath, config, authorize[dataPath]);
    }

    return assets;
  }

  setupAssetRoute(dataPath, config, authorize) {
    const {
      storage: storageName,
      transacted,
      ...settings
    } = config;
    const storage = this.app.getStorage(storageName);

    if (!storage) {
      throw new _errors.ControllerError(this, `Unknown storage configuration: '${storageName}'`);
    }

    const tokens = (0, _utils2.parseDataPath)(dataPath);

    const getDataPath = callback => (0, _utils2.normalizeDataPath)(tokens.map(callback));

    let index = 0;
    const multipleWildcards = tokens.filter(token => token === '*').length > 1;
    const normalizedPath = getDataPath(token => token === '*' ? multipleWildcards ? `:index${++index}` : ':index' : this.app.normalizePath(token));
    const matchDataPath = new RegExp(`^${getDataPath(token => token === '*' ? '\\w+' : token)}$`);
    const url = this.getUrl('controller', `upload/${normalizedPath}`);
    const upload = storage.getUploadHandler({ ...settings,
      fileFilter: (req, file, cb) => {
        cb(null, matchDataPath.test(file.fieldname));
      }
    });
    const authorization = this.processAuthorize(authorize);
    this.setupRoute('post', url, transacted, authorize, null, [async (ctx, next) => {
      await this.handleAuthorization(authorization, ctx);
      return next();
    }, upload, async (ctx, next) => {
      const files = storage.convertStorageFiles(ctx.request.files);
      await this.app.createAssets(storage, files, 0, ctx.transaction);
      ctx.body = files;
      return next();
    }]);
  }

  compose() {}

  getPath(type, path) {
    return path;
  }

  getUrl(type, path) {
    path = this.getPath(type, path);
    return path && path !== '.' ? `${this.url}/${path}` : this.url;
  }

  inheritValues(type) {
    const parentClass = Object.getPrototypeOf(this.constructor);

    if (!inheritanceMap.has(parentClass)) {
      inheritanceMap.set(parentClass, {
        instance: new parentClass(this.app, this.namespace)
      });
    }

    const entry = inheritanceMap.get(parentClass);

    if (!entry[type]) {
      const parent = entry.instance;
      let values = parent[type];

      if (parentClass !== Controller) {
        values = parent.inheritValues(type);
      }

      entry[type] = values;
    }

    const parentValues = entry[type];
    let currentValues = this[type];

    if (currentValues && currentValues === parentValues) {
      currentValues = this[type] = {};
    }

    return (0, _utils2.isObject)(parentValues) && (0, _utils2.isObject)(currentValues) ? Object.setPrototypeOf(currentValues, parentValues) : currentValues;
  }

  processValues(values) {
    if (!values) return {};
    const mergedAllow = {};
    const mergedAuthorize = {};
    let hasOwnAllow = false;

    const excludeKey = key => ['allow', 'authorize'].includes(key);

    const handleAllow = (allow, current) => {
      if (allow) {
        allow = (0, _utils2.asArray)(allow);
        hasOwnAllow = true;
      } else if (!hasOwnAllow) {
        allow = Object.keys(current);
      }

      if (allow) {
        if (allow.includes('*')) {
          allow = (0, _utils.getAllKeys)(current);
        }

        for (const key of allow) {
          if (!excludeKey(key)) {
            mergedAllow[key] = true;
          }
        }
      }
    };

    const handleAuthorize = authorize => {
      const add = (key, value) => {
        if (key in values && !(key in mergedAuthorize) && !excludeKey(key)) {
          mergedAuthorize[key] = value;
        }
      };

      if ((0, _utils2.isObject)(authorize)) {
        for (const key in authorize) {
          add(key, authorize[key]);
        }
      } else if (authorize != null) {
        for (const key in values) {
          add(key, authorize);
        }
      }
    };

    let current = values;

    while (current !== Object.prototype && !current.hasOwnProperty('$core')) {
      handleAllow((0, _utils.getOwnProperty)(current, 'allow'), current);
      handleAuthorize((0, _utils.getOwnProperty)(current, 'authorize'));
      current = Object.getPrototypeOf(current);
    }

    if (this.allow) {
      handleAllow(this.allow, values);
    }

    if (this.authorize) {
      handleAuthorize(this.authorize);
    }

    return {
      values: (0, _utils.getAllKeys)(values).reduce((result, key) => {
        if (mergedAllow[key]) {
          result[key] = values[key];
        }

        return result;
      }, Object.create(Object.getPrototypeOf(values))),
      allow: Object.keys(mergedAllow),
      authorize: mergedAuthorize
    };
  }

  async emitHook(type, handleResult, ctx, ...args) {
    let result = handleResult ? args.shift() : undefined;

    for (const handler of this.listeners(type)) {
      if (handleResult) {
        const res = await handler.call(this, ctx, result, ...args);

        if (res !== undefined) {
          result = res;
        }
      } else {
        await handler.call(this, ctx, ...args);
      }
    }

    return result;
  }

  async getMember() {
    return null;
  }

  processAuthorize(authorize) {
    if (authorize == null) {
      return () => true;
    } else if ((0, _utils2.isBoolean)(authorize)) {
      return () => authorize;
    } else if ((0, _utils2.isFunction)(authorize)) {
      return async (ctx, member) => {
        const res = await authorize(ctx, member);
        return this.processAuthorize(res)(ctx, member);
      };
    } else if ((0, _utils2.isString)(authorize) || (0, _utils2.isArray)(authorize)) {
      return async (ctx, member) => {
        const {
          user
        } = ctx.state;

        if (!user) {
          return false;
        }

        const values = (0, _utils2.asArray)(authorize);

        if (!member && values.includes('$owner')) {
          member = await this.getMember(ctx);
        }

        return !!values.find(value => {
          var _member;

          return value === '$self' ? user.constructor === this.modelClass && (0, _utils2.equals)(user.$id(), ctx.memberId) : value === '$owner' ? (_member = member) == null ? void 0 : _member.$hasOwner == null ? void 0 : _member.$hasOwner(user) : user.$hasRole(value);
        });
      };
    } else {
      throw new _errors.ControllerError(this, `Unsupported authorize setting: '${authorize}'`);
    }
  }

  describeAuthorize(authorize) {
    return (0, _utils2.isFunction)(authorize) ? (0, _utils.describeFunction)(authorize) : (0, _utils2.isString)(authorize) ? `'${authorize}'` : (0, _utils2.isArray)(authorize) ? `[${authorize.map(value => `'${value}'`).join(', ')}]` : '';
  }

  async handleAuthorization(authorization, ctx, member) {
    const ok = await authorization(ctx, member);

    if (ok !== true) {
      throw new _errors.AuthorizationError();
    }
  }

  log(str, indent = 0) {
    if (this.logging) {
      console.info(`${'  '.repeat(indent)}${str}`);
    }
  }

}

exports.Controller = Controller;

_lib.EventEmitter.mixin(Controller.prototype);

const inheritanceMap = new WeakMap();

function setupHandlerFromObject(object, actions) {
  const {
    handler,
    action,
    authorize,
    parameters,
    returns,
    scope,
    transacted
  } = object;
  Object.setPrototypeOf(object, Object.getPrototypeOf(actions));
  handler.authorize = authorize;
  handler.transacted = transacted;

  if (action) {
    const [verb, path] = (0, _utils2.asArray)(action);
    handler.verb = verb;
    handler.path = path;
  }

  if (parameters) {
    const [_parameters, options] = parameters;
    const hasOptions = (0, _utils2.isArray)(_parameters);
    handler.parameters = hasOptions ? _parameters : parameters;

    if (hasOptions) {
      handler.options = { ...handler.options,
        parameters: options
      };
    }
  }

  if (returns) {
    const [_returns, options] = (0, _utils2.asArray)(returns);
    handler.returns = _returns;

    if (options) {
      handler.options = { ...handler.options,
        parameters: options
      };
    }
  }

  if (scope) {
    handler.scope = (0, _utils2.asArray)(scope);
  }

  return handler;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,