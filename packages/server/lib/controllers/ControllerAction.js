"use strict";

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _utils2 = require("@ditojs/utils");

class ControllerAction {
  constructor(controller, handler, type, name, verb, path, authorize) {
    var _handler$path;

    this.controller = controller;
    this.handler = handler;
    this.type = type;
    this.name = name;
    this.identifier = `${type}:${name}`;
    this.verb = handler.verb || verb;
    this.path = (_handler$path = handler.path) != null ? _handler$path : path;
    this.authorize = handler.authorize || authorize;
    this.transacted = !!(handler.transacted || controller.transacted || handler.core && verb !== 'get' && (controller.graph || controller.assets));
    this.authorization = controller.processAuthorize(this.authorize);
    this.app = controller.app;
    this.paramsName = ['post', 'put', 'patch'].includes(this.verb) ? 'body' : 'query';
    const {
      parameters,
      returns,
      options = {}
    } = this.handler;
    this.parameters = this.app.compileParametersValidator(parameters, {
      async: true,
      ...options.parameters,
      dataName: this.paramsName
    });
    this.returns = this.app.compileParametersValidator(returns ? [returns] : [], {
      async: true,
      useInstanceOf: true,
      ...options.returns,
      dataName: 'returns'
    });
  }

  getParams(ctx, from = this.paramsName) {
    const value = from === 'path' ? ctx.params : ctx.request[from];
    const isNull = from === 'body' && ctx.request.headers['content-length'] === '0' && Object.keys(value).length === 0;
    return isNull ? null : value;
  }

  async callAction(ctx) {
    const params = await this.validateParameters(ctx);
    const {
      args,
      member
    } = await this.collectArguments(ctx, params);
    await this.controller.handleAuthorization(this.authorization, ctx, member);
    const {
      identifier
    } = this;
    await this.controller.emitHook(`before:${identifier}`, false, ctx, ...args);
    const result = await this.callHandler(ctx, ...args);
    return this.validateResult(await this.controller.emitHook(`after:${identifier}`, true, ctx, result));
  }

  async callHandler(ctx, ...args) {
    return this.handler.call(this.controller, ctx, ...args);
  }

  createValidationError(options) {
    return this.app.createValidationError(options);
  }

  async validateParameters(ctx) {
    if (!this.parameters.validate) {
      return null;
    }

    const data = (0, _utils2.clone)(this.getParams(ctx));
    let params = data || {};
    const {
      dataName
    } = this.parameters;
    let unwrapRoot = false;
    const errors = [];

    for (const {
      name,
      type,
      from,
      root,
      member
    } of this.parameters.list) {
      if (member) continue;
      let wrapRoot = root;
      let paramName = name;

      if (!paramName) {
        paramName = dataName;
        wrapRoot = true;
        unwrapRoot = true;
      }

      if (wrapRoot) {
        if (params === data) {
          params = {};
        }

        params[paramName] = data;
      }

      if (from) {
        const data = this.getParams(ctx, from);
        params[paramName] = (0, _utils2.clone)(wrapRoot ? data : data == null ? void 0 : data[paramName]);
      }

      try {
        const value = params[paramName];
        const coerced = this.coerceValue(type, value, {
          skipValidation: true
        });

        if (coerced !== value) {
          params[paramName] = coerced;
        }
      } catch (err) {
        errors.push({
          dataPath: `.${paramName}`,
          keyword: 'type',
          message: err.message || err.toString(),
          params: {
            type
          }
        });
      }
    }

    const getData = () => unwrapRoot ? params[dataName] : params;

    try {
      await this.parameters.validate(params);
      return getData();
    } catch (error) {
      if (error.errors) {
        errors.push(...error.errors);
      } else {
        throw error;
      }
    }

    if (errors.length > 0) {
      throw this.createValidationError({
        type: 'ParameterValidation',
        message: `The provided data is not valid: ${(0, _utils.formatJson)(getData())}`,
        errors
      });
    }
  }

  async validateResult(result) {
    if (this.returns.validate) {
      const returnsName = this.handler.returns.name;
      const data = {
        [returnsName || this.returns.dataName]: result
      };

      const getResult = () => returnsName ? data : result;

      try {
        await this.returns.validate(data);
        return getResult();
      } catch (error) {
        const message = process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'development' ? `Invalid result of action: ${(0, _utils.formatJson)(getResult())}` : 'Invalid result of action';
        throw this.createValidationError({
          type: 'ResultValidation',
          message,
          errors: error.errors
        });
      }
    }

    return result;
  }

  async collectArguments(ctx, params) {
    const {
      list,
      asObject
    } = this.parameters;
    const args = asObject ? [{}] : [];

    const addArgument = (name, value) => {
      if (asObject) {
        args[0][name] = value;
      } else {
        args.push(value);
      }
    };

    let member = null;

    for (const param of list) {
      const {
        name
      } = param;

      if (param.member) {
        member = await this.getMember(ctx, param);
        addArgument(name, member);
      } else {
        addArgument(name, name ? params[name] : params);
      }
    }

    return {
      args,
      member
    };
  }

  coerceValue(type, value, modelOptions) {
    if (['date', 'datetime', 'timestamp'].includes(type)) {
      value = new Date(value);
    } else {
      const objectType = (0, _utils2.asArray)(type).find(type => type === 'object' || type in this.app.models);

      if (objectType) {
        if (value && (0, _utils2.isString)(value)) {
          if (!/^\{.*\}$/.test(value)) {
            if (/"/.test(value)) {
              value = JSON.parse(`{${value}}`);
            } else {
              value = Object.fromEntries(value.split(/\s*,\s*/g).map(entry => {
                let [key, val] = entry.split(/\s*:\s*/);

                try {
                  val = JSON.parse(val);
                } catch (_unused) {}

                return [key, val];
              }));
            }
          } else {
            value = JSON.parse(value);
          }
        }

        if (objectType !== 'object' && (0, _utils2.isObject)(value)) {
          const modelClass = this.app.models[objectType];

          if (modelClass && !(value instanceof modelClass)) {
            value = modelClass.fromJson(value, modelOptions);
          }
        }
      }
    }

    return value;
  }

  async getMember() {
    return null;
  }

}

exports.default = ControllerAction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,