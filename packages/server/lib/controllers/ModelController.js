"use strict";

exports.__esModule = true;
exports.ModelController = void 0;

var _pluralize = _interopRequireDefault(require("pluralize"));

var _utils = require("@ditojs/utils");

var _errors = require("../errors");

var _CollectionController = require("./CollectionController");

var _RelationController = require("./RelationController");

var _utils2 = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ModelController extends _CollectionController.CollectionController {
  setup() {
    super.setup(true);
    this.modelClass = this.modelClass || this.app.models[(0, _utils.camelize)(_pluralize.default.singular(this.name), true)];
    this.relations = this.setupRelations();
  }

  setupRelations() {
    const relations = this.inheritValues('relations');

    for (const name in relations) {
      const relation = (0, _utils2.setupPropertyInheritance)(relations, name);

      if ((0, _utils.isObject)(relation)) {
        relations[name] = this.setupRelation(relation, name);
      } else {
        throw new _errors.ControllerError(this, `Invalid relation '${name}'.`);
      }
    }

    return relations;
  }

  setupRelation(object, name) {
    const relationInstance = this.modelClass.getRelations()[name];
    const relationDefinition = this.modelClass.definition.relations[name];

    if (!relationInstance || !relationDefinition) {
      throw new _errors.ControllerError(this, `Relation '${name}' not found.`);
    }

    return new _RelationController.RelationController(this, object, relationInstance, relationDefinition);
  }

  async execute(ctx, execute) {
    const trx = ctx.transaction;
    const query = this.modelClass.query(trx);
    this.setupQuery(query);
    return execute(query, trx);
  }

}

exports.ModelController = ModelController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cm9sbGVycy9Nb2RlbENvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiTW9kZWxDb250cm9sbGVyIiwiQ29sbGVjdGlvbkNvbnRyb2xsZXIiLCJzZXR1cCIsIm1vZGVsQ2xhc3MiLCJhcHAiLCJtb2RlbHMiLCJwbHVyYWxpemUiLCJzaW5ndWxhciIsIm5hbWUiLCJyZWxhdGlvbnMiLCJzZXR1cFJlbGF0aW9ucyIsImluaGVyaXRWYWx1ZXMiLCJyZWxhdGlvbiIsInNldHVwUmVsYXRpb24iLCJDb250cm9sbGVyRXJyb3IiLCJvYmplY3QiLCJyZWxhdGlvbkluc3RhbmNlIiwiZ2V0UmVsYXRpb25zIiwicmVsYXRpb25EZWZpbml0aW9uIiwiZGVmaW5pdGlvbiIsIlJlbGF0aW9uQ29udHJvbGxlciIsImV4ZWN1dGUiLCJjdHgiLCJ0cngiLCJ0cmFuc2FjdGlvbiIsInF1ZXJ5Iiwic2V0dXBRdWVyeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLE1BQU1BLGVBQU4sU0FBOEJDLDBDQUE5QixDQUFtRDtBQUN4REMsRUFBQUEsS0FBSyxHQUFHO0FBQ04sVUFBTUEsS0FBTixDQUFZLElBQVo7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLEtBQUtBLFVBQUwsSUFDaEIsS0FBS0MsR0FBTCxDQUFTQyxNQUFULENBQWdCLHFCQUFTQyxtQkFBVUMsUUFBVixDQUFtQixLQUFLQyxJQUF4QixDQUFULEVBQXdDLElBQXhDLENBQWhCLENBREY7QUFFQSxTQUFLQyxTQUFMLEdBQWlCLEtBQUtDLGNBQUwsRUFBakI7QUFDRDs7QUFFREEsRUFBQUEsY0FBYyxHQUFHO0FBS2YsVUFBTUQsU0FBUyxHQUFHLEtBQUtFLGFBQUwsQ0FBbUIsV0FBbkIsQ0FBbEI7O0FBQ0EsU0FBSyxNQUFNSCxJQUFYLElBQW1CQyxTQUFuQixFQUE4QjtBQUM1QixZQUFNRyxRQUFRLEdBQUcsc0NBQXlCSCxTQUF6QixFQUFvQ0QsSUFBcEMsQ0FBakI7O0FBQ0EsVUFBSSxxQkFBU0ksUUFBVCxDQUFKLEVBQXdCO0FBQ3RCSCxRQUFBQSxTQUFTLENBQUNELElBQUQsQ0FBVCxHQUFrQixLQUFLSyxhQUFMLENBQW1CRCxRQUFuQixFQUE2QkosSUFBN0IsQ0FBbEI7QUFDRCxPQUZELE1BRU87QUFDTCxjQUFNLElBQUlNLHVCQUFKLENBQW9CLElBQXBCLEVBQTJCLHFCQUFvQk4sSUFBSyxJQUFwRCxDQUFOO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPQyxTQUFQO0FBQ0Q7O0FBRURJLEVBQUFBLGFBQWEsQ0FBQ0UsTUFBRCxFQUFTUCxJQUFULEVBQWU7QUFDMUIsVUFBTVEsZ0JBQWdCLEdBQUcsS0FBS2IsVUFBTCxDQUFnQmMsWUFBaEIsR0FBK0JULElBQS9CLENBQXpCO0FBQ0EsVUFBTVUsa0JBQWtCLEdBQUcsS0FBS2YsVUFBTCxDQUFnQmdCLFVBQWhCLENBQTJCVixTQUEzQixDQUFxQ0QsSUFBckMsQ0FBM0I7O0FBQ0EsUUFBSSxDQUFDUSxnQkFBRCxJQUFxQixDQUFDRSxrQkFBMUIsRUFBOEM7QUFDNUMsWUFBTSxJQUFJSix1QkFBSixDQUFvQixJQUFwQixFQUEyQixhQUFZTixJQUFLLGNBQTVDLENBQU47QUFDRDs7QUFDRCxXQUFPLElBQUlZLHNDQUFKLENBQ0wsSUFESyxFQUNDTCxNQURELEVBQ1NDLGdCQURULEVBQzJCRSxrQkFEM0IsQ0FBUDtBQUdEOztBQUdZLFFBQVBHLE9BQU8sQ0FBQ0MsR0FBRCxFQUFNRCxPQUFOLEVBQWU7QUFDMUIsVUFBTUUsR0FBRyxHQUFHRCxHQUFHLENBQUNFLFdBQWhCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLEtBQUt0QixVQUFMLENBQWdCc0IsS0FBaEIsQ0FBc0JGLEdBQXRCLENBQWQ7QUFDQSxTQUFLRyxVQUFMLENBQWdCRCxLQUFoQjtBQUNBLFdBQU9KLE9BQU8sQ0FBQ0ksS0FBRCxFQUFRRixHQUFSLENBQWQ7QUFDRDs7QUExQ3VEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBsdXJhbGl6ZSBmcm9tICdwbHVyYWxpemUnXG5pbXBvcnQgeyBpc09iamVjdCwgY2FtZWxpemUgfSBmcm9tICdAZGl0b2pzL3V0aWxzJ1xuaW1wb3J0IHsgQ29udHJvbGxlckVycm9yIH0gZnJvbSAnQC9lcnJvcnMnXG5pbXBvcnQgeyBDb2xsZWN0aW9uQ29udHJvbGxlciB9IGZyb20gJy4vQ29sbGVjdGlvbkNvbnRyb2xsZXInXG5pbXBvcnQgeyBSZWxhdGlvbkNvbnRyb2xsZXIgfSBmcm9tICcuL1JlbGF0aW9uQ29udHJvbGxlcidcbmltcG9ydCB7IHNldHVwUHJvcGVydHlJbmhlcml0YW5jZSB9IGZyb20gJ0AvdXRpbHMnXG5cbmV4cG9ydCBjbGFzcyBNb2RlbENvbnRyb2xsZXIgZXh0ZW5kcyBDb2xsZWN0aW9uQ29udHJvbGxlciB7XG4gIHNldHVwKCkge1xuICAgIHN1cGVyLnNldHVwKHRydWUpXG4gICAgdGhpcy5tb2RlbENsYXNzID0gdGhpcy5tb2RlbENsYXNzIHx8XG4gICAgICB0aGlzLmFwcC5tb2RlbHNbY2FtZWxpemUocGx1cmFsaXplLnNpbmd1bGFyKHRoaXMubmFtZSksIHRydWUpXVxuICAgIHRoaXMucmVsYXRpb25zID0gdGhpcy5zZXR1cFJlbGF0aW9ucygpXG4gIH1cblxuICBzZXR1cFJlbGF0aW9ucygpIHtcbiAgICAvLyBJbmhlcml0IGByZWxhdGlvbnNgIGZyb20gdGhlIGNvbnRyb2xsZXIgYW5kIC8gb3IgaXRzIHN1Yi1jbGFzc2VzLFxuICAgIC8vIHRoZW4gYnVpbGQgaW5oZXJpdGFuY2UgY2hhaW5zIGZvciBlYWNoIHJlbGF0aW9uIG9iamVjdCB0aHJvdWdoXG4gICAgLy8gYHNldHVwUHJvcGVydHlJbmhlcml0YW5jZSgpYCwgYmVmb3JlIGNyZWF0aW5nIHRoZSByZWxhdGlvbiBjb250cm9sbGVycyxcbiAgICAvLyB3aGljaCB0aGVuIGNhcnJ5IG9uIHdpdGggc2V0dGluZyB1cCBpbmhlcml0YW5jZSBmb3IgdGhlaXIgYWN0aW9ucy5cbiAgICBjb25zdCByZWxhdGlvbnMgPSB0aGlzLmluaGVyaXRWYWx1ZXMoJ3JlbGF0aW9ucycpXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHJlbGF0aW9ucykge1xuICAgICAgY29uc3QgcmVsYXRpb24gPSBzZXR1cFByb3BlcnR5SW5oZXJpdGFuY2UocmVsYXRpb25zLCBuYW1lKVxuICAgICAgaWYgKGlzT2JqZWN0KHJlbGF0aW9uKSkge1xuICAgICAgICByZWxhdGlvbnNbbmFtZV0gPSB0aGlzLnNldHVwUmVsYXRpb24ocmVsYXRpb24sIG5hbWUpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgQ29udHJvbGxlckVycm9yKHRoaXMsIGBJbnZhbGlkIHJlbGF0aW9uICcke25hbWV9Jy5gKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVsYXRpb25zXG4gIH1cblxuICBzZXR1cFJlbGF0aW9uKG9iamVjdCwgbmFtZSkge1xuICAgIGNvbnN0IHJlbGF0aW9uSW5zdGFuY2UgPSB0aGlzLm1vZGVsQ2xhc3MuZ2V0UmVsYXRpb25zKClbbmFtZV1cbiAgICBjb25zdCByZWxhdGlvbkRlZmluaXRpb24gPSB0aGlzLm1vZGVsQ2xhc3MuZGVmaW5pdGlvbi5yZWxhdGlvbnNbbmFtZV1cbiAgICBpZiAoIXJlbGF0aW9uSW5zdGFuY2UgfHwgIXJlbGF0aW9uRGVmaW5pdGlvbikge1xuICAgICAgdGhyb3cgbmV3IENvbnRyb2xsZXJFcnJvcih0aGlzLCBgUmVsYXRpb24gJyR7bmFtZX0nIG5vdCBmb3VuZC5gKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlbGF0aW9uQ29udHJvbGxlcihcbiAgICAgIHRoaXMsIG9iamVjdCwgcmVsYXRpb25JbnN0YW5jZSwgcmVsYXRpb25EZWZpbml0aW9uXG4gICAgKVxuICB9XG5cbiAgLy8gQG92ZXJyaWRlXG4gIGFzeW5jIGV4ZWN1dGUoY3R4LCBleGVjdXRlKSB7XG4gICAgY29uc3QgdHJ4ID0gY3R4LnRyYW5zYWN0aW9uXG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLm1vZGVsQ2xhc3MucXVlcnkodHJ4KVxuICAgIHRoaXMuc2V0dXBRdWVyeShxdWVyeSlcbiAgICByZXR1cm4gZXhlY3V0ZShxdWVyeSwgdHJ4KVxuICB9XG59XG4iXX0=