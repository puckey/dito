"use strict";

exports.__esModule = true;
exports.RelationController = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _errors = require("../errors");

var _CollectionController = require("./CollectionController");

var _utils = require("../utils");

var _utils2 = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RelationController extends _CollectionController.CollectionController {
  constructor(parent, object, relationInstance, relationDefinition) {
    super(parent.app, null);
    this.collection = this.toCoreActions({});
    this.member = this.toCoreActions({});

    if (parent.modelClass !== relationInstance.ownerModelClass) {
      throw new _errors.ControllerError(parent, `Invalid parent controller for relation '${relationInstance.name}'.`);
    }

    this.parent = parent;
    this.object = object;
    this.relationInstance = relationInstance;
    this.relationDefinition = relationDefinition;
    this.name = relationInstance.name;
    this.modelClass = relationInstance.relatedModelClass;
    this.isOneToOne = relationInstance.isOneToOne();
    this.relate = !relationDefinition.owner;
    this.unrelate = !relationDefinition.owner;
    this.graph = parent.graph;
    this.transacted = parent.transacted;
    this.level = parent.level + 1;

    if (parent.scope) {
      this.scope = (0, _utils2.asArray)(parent.scope).filter(scope => (0, _utils.getScope)(scope).graph);
    }

    this.path = this.app.normalizePath(this.name);
    this.url = `${this.parent.url}/${this.parent.getPath('member', this.path)}`;
    this.log(`${_chalk.default.blue(this.path)}${_chalk.default.white(':')}`, this.level);

    for (const key in this.object) {
      if (!['relation', 'member', 'allow'].includes(key)) {
        this[key] = this.object[key];
      }
    }

    this.setup(false);
  }

  inheritValues(type) {
    const values = (0, _utils.setupPropertyInheritance)(this.object, type === 'collection' ? 'relation' : type, super.inheritValues(type));
    return values;
  }

  async execute(ctx, execute) {
    const id = this.parent.getMemberId(ctx);
    return this.parent.execute(ctx, async (parentQuery, trx) => {
      const model = await parentQuery.ignoreScope().findById(id).throwIfNotFound().select(...this.relationInstance.ownerProp.props);
      const query = model.$relatedQuery(this.relationInstance.name, trx);
      this.setupQuery(query);
      return execute(query, trx);
    });
  }

}

exports.RelationController = RelationController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,