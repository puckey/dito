"use strict";

exports.__esModule = true;
exports.DatabaseError = void 0;

var _WrappedError = require("./WrappedError");

var _objection = require("objection");

class DatabaseError extends _WrappedError.WrappedError {
  constructor(error) {
    const status = error instanceof _objection.CheckViolationError ? 400 : error instanceof _objection.NotNullViolationError ? 400 : error instanceof _objection.ConstraintViolationError ? 409 : error instanceof _objection.DataError ? 400 : error instanceof _objection.DBError ? 500 : 400;
    const [, sql, message] = error.message.match(/^([\s\S]*) - ([\s\S]*?)$/) || [null, null, error.message];
    const overrides = {
      type: error.constructor.name,
      message,
      sql,
      status
    };
    super(error, overrides, {
      message: 'Database error',
      status
    });
  }

  toJSON() {
    if (process.env.NODE_ENV !== 'development' || process.env.NODE_ENV !== 'test') {
      const {
        sql,
        ...data
      } = this.data;
      return data;
    }

    return this.data;
  }

}

exports.DatabaseError = DatabaseError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvRGF0YWJhc2VFcnJvci5qcyJdLCJuYW1lcyI6WyJEYXRhYmFzZUVycm9yIiwiV3JhcHBlZEVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvciIsInN0YXR1cyIsIkNoZWNrVmlvbGF0aW9uRXJyb3IiLCJOb3ROdWxsVmlvbGF0aW9uRXJyb3IiLCJDb25zdHJhaW50VmlvbGF0aW9uRXJyb3IiLCJEYXRhRXJyb3IiLCJEQkVycm9yIiwic3FsIiwibWVzc2FnZSIsIm1hdGNoIiwib3ZlcnJpZGVzIiwidHlwZSIsIm5hbWUiLCJ0b0pTT04iLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUNBOztBQVFPLE1BQU1BLGFBQU4sU0FBNEJDLDBCQUE1QixDQUF5QztBQUM5Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUMsTUFBTSxHQUNWRCxLQUFLLFlBQVlFLDhCQUFqQixHQUF1QyxHQUF2QyxHQUNFRixLQUFLLFlBQVlHLGdDQUFqQixHQUF5QyxHQUF6QyxHQUNBSCxLQUFLLFlBQVlJLG1DQUFqQixHQUE0QyxHQUE1QyxHQUNBSixLQUFLLFlBQVlLLG9CQUFqQixHQUE2QixHQUE3QixHQUNBTCxLQUFLLFlBQVlNLGtCQUFqQixHQUEyQixHQUEzQixHQUNBLEdBTko7QUFVQSxVQUFNLEdBQUdDLEdBQUgsRUFBUUMsT0FBUixJQUFtQlIsS0FBSyxDQUFDUSxPQUFOLENBQWNDLEtBQWQsQ0FBb0IsMEJBQXBCLEtBQ3ZCLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYVQsS0FBSyxDQUFDUSxPQUFuQixDQURGO0FBRUEsVUFBTUUsU0FBUyxHQUFHO0FBQ2hCQyxNQUFBQSxJQUFJLEVBQUVYLEtBQUssQ0FBQ0QsV0FBTixDQUFrQmEsSUFEUjtBQUVoQkosTUFBQUEsT0FGZ0I7QUFHaEJELE1BQUFBLEdBSGdCO0FBSWhCTixNQUFBQTtBQUpnQixLQUFsQjtBQU1BLFVBQU1ELEtBQU4sRUFBYVUsU0FBYixFQUF3QjtBQUFFRixNQUFBQSxPQUFPLEVBQUUsZ0JBQVg7QUFBNkJQLE1BQUFBO0FBQTdCLEtBQXhCO0FBQ0Q7O0FBRURZLEVBQUFBLE1BQU0sR0FBRztBQUdQLFFBQUlDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLGFBQXpCLElBQ0pGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLE1BRHpCLEVBQ2lDO0FBQy9CLFlBQU07QUFBRVQsUUFBQUEsR0FBRjtBQUFPLFdBQUdVO0FBQVYsVUFBbUIsS0FBS0EsSUFBOUI7QUFDQSxhQUFPQSxJQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFLQSxJQUFaO0FBQ0Q7O0FBaEM2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFdyYXBwZWRFcnJvciB9IGZyb20gJy4vV3JhcHBlZEVycm9yJ1xuaW1wb3J0IHtcbiAgREJFcnJvcixcbiAgRGF0YUVycm9yLFxuICBDaGVja1Zpb2xhdGlvbkVycm9yLFxuICBOb3ROdWxsVmlvbGF0aW9uRXJyb3IsXG4gIENvbnN0cmFpbnRWaW9sYXRpb25FcnJvclxufSBmcm9tICdvYmplY3Rpb24nXG5cbmV4cG9ydCBjbGFzcyBEYXRhYmFzZUVycm9yIGV4dGVuZHMgV3JhcHBlZEVycm9yIHtcbiAgY29uc3RydWN0b3IoZXJyb3IpIHtcbiAgICBjb25zdCBzdGF0dXMgPVxuICAgICAgZXJyb3IgaW5zdGFuY2VvZiBDaGVja1Zpb2xhdGlvbkVycm9yID8gNDAwXG4gICAgICA6IGVycm9yIGluc3RhbmNlb2YgTm90TnVsbFZpb2xhdGlvbkVycm9yID8gNDAwXG4gICAgICA6IGVycm9yIGluc3RhbmNlb2YgQ29uc3RyYWludFZpb2xhdGlvbkVycm9yID8gNDA5XG4gICAgICA6IGVycm9yIGluc3RhbmNlb2YgRGF0YUVycm9yID8gNDAwXG4gICAgICA6IGVycm9yIGluc3RhbmNlb2YgREJFcnJvciA/IDUwMFxuICAgICAgOiA0MDBcbiAgICAvLyBSZW1vdmUga25leCBTUUwgcXVlcnkgYW5kIG1vdmUgdG8gc2VwYXJhdGUgYHF1ZXJ5YCBwcm9wZXJ0eS5cbiAgICAvLyBUT0RPOiBGaXggdGhpcyBwcm9wZXJseSBpbiBLbmV4IC8gT2JqZWN0aW9uIGluc3RlYWQsIHNlZTpcbiAgICAvLyBodHRwczovL2dpdHRlci5pbS9WaW5jaXQvb2JqZWN0aW9uLmpzP2F0PTVhNjg3MjhmNWE5ZWJlNGY3NWNhNDBiMFxuICAgIGNvbnN0IFssIHNxbCwgbWVzc2FnZV0gPSBlcnJvci5tZXNzYWdlLm1hdGNoKC9eKFtcXHNcXFNdKikgLSAoW1xcc1xcU10qPykkLykgfHxcbiAgICAgIFtudWxsLCBudWxsLCBlcnJvci5tZXNzYWdlXVxuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHtcbiAgICAgIHR5cGU6IGVycm9yLmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgICBtZXNzYWdlLFxuICAgICAgc3FsLFxuICAgICAgc3RhdHVzXG4gICAgfVxuICAgIHN1cGVyKGVycm9yLCBvdmVycmlkZXMsIHsgbWVzc2FnZTogJ0RhdGFiYXNlIGVycm9yJywgc3RhdHVzIH0pXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgLy8gUmVtb3ZlIFNRTCBxdWVyeSBmcm9tIGRpc3BsYXllZCBkYXRhIGluIGZyb250LWVuZCB3aGVuIG5vdCBpbiBkZXZlbG9wbWVudFxuICAgIC8vIG9yIHRlc3QuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnIHx8XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0Jykge1xuICAgICAgY29uc3QgeyBzcWwsIC4uLmRhdGEgfSA9IHRoaXMuZGF0YVxuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0YVxuICB9XG59XG4iXX0=