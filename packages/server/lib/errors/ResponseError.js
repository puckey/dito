"use strict";

exports.__esModule = true;
exports.ResponseError = void 0;

var _utils = require("@ditojs/utils");

var _utils2 = require("../utils");

class ResponseError extends Error {
  constructor(error, defaults = {
    message: 'Response error',
    status: 400
  }) {
    const object = (0, _utils.isPlainObject)(error) ? error : error instanceof Error ? { ...(error.isAxiosError ? null : error),
      message: error.message,
      status: error.status,
      code: error.code
    } : (0, _utils.isString)(error) ? {
      message: error
    } : error || {};
    const {
      status,
      ...data
    } = { ...defaults,
      ...object
    };
    let {
      message,
      code
    } = data;

    if (process.env.NODE_ENV === 'test' && error === object) {
      const {
        message: _,
        ...rest
      } = data;

      if (Object.keys(rest).length > 0) {
        message = `${message}\nError Data:\n${(0, _utils2.formatJson)(rest)}`;
      }
    }

    super(message);
    this.name = this.constructor.name;
    this.status = status;
    this.code = code;
    this.data = data;
  }

  toJSON() {
    return this.data;
  }

}

exports.ResponseError = ResponseError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lcnJvcnMvUmVzcG9uc2VFcnJvci5qcyJdLCJuYW1lcyI6WyJSZXNwb25zZUVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsImVycm9yIiwiZGVmYXVsdHMiLCJtZXNzYWdlIiwic3RhdHVzIiwib2JqZWN0IiwiaXNBeGlvc0Vycm9yIiwiY29kZSIsImRhdGEiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJfIiwicmVzdCIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJuYW1lIiwidG9KU09OIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUNBOztBQUVPLE1BQU1BLGFBQU4sU0FBNEJDLEtBQTVCLENBQWtDO0FBQ3ZDQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsUUFBUSxHQUFHO0FBQUVDLElBQUFBLE9BQU8sRUFBRSxnQkFBWDtBQUE2QkMsSUFBQUEsTUFBTSxFQUFFO0FBQXJDLEdBQW5CLEVBQStEO0FBQ3hFLFVBQU1DLE1BQU0sR0FBRywwQkFBY0osS0FBZCxJQUNYQSxLQURXLEdBRVhBLEtBQUssWUFBWUYsS0FBakIsR0FDRSxFQU1BLElBQUlFLEtBQUssQ0FBQ0ssWUFBTixHQUFxQixJQUFyQixHQUE0QkwsS0FBaEMsQ0FOQTtBQVFBRSxNQUFBQSxPQUFPLEVBQUVGLEtBQUssQ0FBQ0UsT0FSZjtBQVNBQyxNQUFBQSxNQUFNLEVBQUVILEtBQUssQ0FBQ0csTUFUZDtBQVVBRyxNQUFBQSxJQUFJLEVBQUVOLEtBQUssQ0FBQ007QUFWWixLQURGLEdBYUUscUJBQVNOLEtBQVQsSUFDRTtBQUFFRSxNQUFBQSxPQUFPLEVBQUVGO0FBQVgsS0FERixHQUVFQSxLQUFLLElBQUksRUFqQmpCO0FBa0JBLFVBQU07QUFBRUcsTUFBQUEsTUFBRjtBQUFVLFNBQUdJO0FBQWIsUUFBc0IsRUFBRSxHQUFHTixRQUFMO0FBQWUsU0FBR0c7QUFBbEIsS0FBNUI7QUFDQSxRQUFJO0FBQUVGLE1BQUFBLE9BQUY7QUFBV0ksTUFBQUE7QUFBWCxRQUFvQkMsSUFBeEI7O0FBQ0EsUUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsTUFBekIsSUFBbUNWLEtBQUssS0FBS0ksTUFBakQsRUFBeUQ7QUFFdkQsWUFBTTtBQUFFRixRQUFBQSxPQUFPLEVBQUVTLENBQVg7QUFBYyxXQUFHQztBQUFqQixVQUEwQkwsSUFBaEM7O0FBQ0EsVUFBSU0sTUFBTSxDQUFDQyxJQUFQLENBQVlGLElBQVosRUFBa0JHLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDYixRQUFBQSxPQUFPLEdBQUksR0FBRUEsT0FBUSxrQkFBaUIsd0JBQVdVLElBQVgsQ0FBaUIsRUFBdkQ7QUFDRDtBQUNGOztBQUNELFVBQU1WLE9BQU47QUFDQSxTQUFLYyxJQUFMLEdBQVksS0FBS2pCLFdBQUwsQ0FBaUJpQixJQUE3QjtBQUNBLFNBQUtiLE1BQUwsR0FBY0EsTUFBZDtBQUNBLFNBQUtHLElBQUwsR0FBWUEsSUFBWjtBQUNBLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNEOztBQUVEVSxFQUFBQSxNQUFNLEdBQUc7QUFDUCxXQUFPLEtBQUtWLElBQVo7QUFDRDs7QUF0Q3NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGFpbk9iamVjdCwgaXNTdHJpbmcgfSBmcm9tICdAZGl0b2pzL3V0aWxzJ1xuaW1wb3J0IHsgZm9ybWF0SnNvbiB9IGZyb20gJ0AvdXRpbHMnXG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihlcnJvciwgZGVmYXVsdHMgPSB7IG1lc3NhZ2U6ICdSZXNwb25zZSBlcnJvcicsIHN0YXR1czogNDAwIH0pIHtcbiAgICBjb25zdCBvYmplY3QgPSBpc1BsYWluT2JqZWN0KGVycm9yKVxuICAgICAgPyBlcnJvclxuICAgICAgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgID8ge1xuICAgICAgICAgIC8vIENvcHkgZXJyb3IgaW50byBvYmplY3Qgc28gdGhleSBjYW4gYmUgbWVyZ2VkIHdpdGggZGVmYXVsdHMgYWZ0ZXIuXG4gICAgICAgICAgLy8gRmlyc3QgY29weSBldmVyeXRoaW5nIHRoYXQgaXMgZW51bWVyYWJsZSwgdW5sZXNzIHRoZSBlcnJvciBpcyBmcm9tXG4gICAgICAgICAgLy8gYXhpb3MsIGluIHdoaWNoIGNhc2Ugd2UgZG9uJ3Qgd2FudCB0byBsZWFrIGNvbmZpZyBpbmZvcm1hdGlvbi5cbiAgICAgICAgICAvLyBUT0RPOiBVc2UgYGluc3RhbmNlb2YgQXhpb3NFeGNlcHRpb25gIGluc3RlYWQgb25jZSBheGlvcyBpcyB2MS4wLjA6XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9zL3B1bGwvMjAxNFxuICAgICAgICAgIC4uLihlcnJvci5pc0F4aW9zRXJyb3IgPyBudWxsIDogZXJyb3IpLFxuICAgICAgICAgIC8vIEFsc28gZXhwbGljaXRseSBjb3B5IG1lc3NhZ2UsIHN0YXR1cyBhbmQgY29kZS5cbiAgICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICAgIHN0YXR1czogZXJyb3Iuc3RhdHVzLFxuICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGVcbiAgICAgICAgfVxuICAgICAgICA6IGlzU3RyaW5nKGVycm9yKVxuICAgICAgICAgID8geyBtZXNzYWdlOiBlcnJvciB9XG4gICAgICAgICAgOiBlcnJvciB8fCB7fVxuICAgIGNvbnN0IHsgc3RhdHVzLCAuLi5kYXRhIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5vYmplY3QgfVxuICAgIGxldCB7IG1lc3NhZ2UsIGNvZGUgfSA9IGRhdGFcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0JyAmJiBlcnJvciA9PT0gb2JqZWN0KSB7XG4gICAgICAvLyBJbmNsdWRlIGZ1bGwgSlNPTiBlcnJvciBpbiBtZXNzYWdlIGR1cmluZyB0ZXN0cywgZm9yIGJldHRlciByZXBvcnRpbmcuXG4gICAgICBjb25zdCB7IG1lc3NhZ2U6IF8sIC4uLnJlc3QgfSA9IGRhdGFcbiAgICAgIGlmIChPYmplY3Qua2V5cyhyZXN0KS5sZW5ndGggPiAwKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfVxcbkVycm9yIERhdGE6XFxuJHtmb3JtYXRKc29uKHJlc3QpfWBcbiAgICAgIH1cbiAgICB9XG4gICAgc3VwZXIobWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1c1xuICAgIHRoaXMuY29kZSA9IGNvZGVcbiAgICB0aGlzLmRhdGEgPSBkYXRhXG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVxuICB9XG59XG4iXX0=