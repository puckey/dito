"use strict";

exports.__esModule = true;
exports.DitoGraphProcessor = void 0;

var _utils = require("@ditojs/utils");

var _ = require(".");

class DitoGraphProcessor {
  constructor(rootModelClass, data, options = {}, settings = {}) {
    this.rootModelClass = rootModelClass;
    this.data = (0, _.ensureModelArray)(rootModelClass, data, {
      skipValidation: true
    });
    this.isArray = (0, _utils.isArray)(data);
    this.options = options;
    this.settings = settings;
    this.overrides = {};
    this.extras = {};
    this.numOptions = Object.keys(options).length;
    this.numOverrides = 0;

    if (settings.processOverrides) {
      this.collectOverrides();

      if (this.numOverrides > 0) {
        this.processOverrides();
      }
    }
  }

  getOptions() {
    return { ...this.options,
      ...this.overrides
    };
  }

  getData() {
    const data = this.settings.processRelates ? this.processRelates(this.data) : this.data;
    return this.isArray ? data : data[0];
  }

  getGraphOptions(relation) {
    const ownerOptions = {
      relate: false,
      unrelate: false
    };
    return relation.graphOptions || relation.owner && ownerOptions || {};
  }

  collectOverrides() {
    const processed = {};

    const processModelClass = modelClass => {
      const {
        name
      } = modelClass;

      if (!processed[name]) {
        processed[name] = true;
        const {
          relations
        } = modelClass.definition;
        const relationInstances = modelClass.getRelations();

        for (const [name, relation] of Object.entries(relations)) {
          const graphOptions = this.getGraphOptions(relation);

          if (graphOptions) {
            for (const key in this.options) {
              if (key in graphOptions && graphOptions[key] !== this.options[key] && !this.overrides[key]) {
                this.numOverrides++;
                this.overrides[key] = [];
              }
            }

            if (this.numOverrides < this.numOptions) {
              processModelClass(relationInstances[name].relatedModelClass);
            }
          }
        }
      }
    };

    processModelClass(this.rootModelClass);
  }

  processOverrides() {
    const expr = (0, _.modelGraphToExpression)(this.data);

    const processExpression = (expr, modelClass, relation, relationPath = '') => {
      if (relation) {
        var _relation$through;

        const graphOptions = this.getGraphOptions(relation);

        for (const key in this.overrides) {
          var _graphOptions$key;

          const option = (_graphOptions$key = graphOptions[key]) != null ? _graphOptions$key : this.options[key];

          if (option) {
            this.overrides[key].push(relationPath);
          }
        }

        const extra = (_relation$through = relation.through) == null ? void 0 : _relation$through.extra;

        if ((extra == null ? void 0 : extra.length) > 0) {
          this.extras[relationPath] = extra;
        }
      }

      const {
        relations
      } = modelClass.definition;
      const relationInstances = modelClass.getRelations();

      for (const key in expr) {
        const childExpr = expr[key];
        const {
          relatedModelClass
        } = relationInstances[key];
        processExpression(childExpr, relatedModelClass, relations[key], appendPath(relationPath, '.', key));
      }
    };

    processExpression(expr, this.rootModelClass);
  }

  shouldRelate(relationPath) {
    if (relationPath !== '') {
      const {
        relate
      } = this.overrides;
      return relate ? relate.includes(relationPath) : this.options.relate;
    }
  }

  processRelates(data, relationPath = '', dataPath = '') {
    if (data) {
      if (data.$isObjectionModel) {
        const {
          constructor
        } = data;
        let copy;

        if (this.shouldRelate(relationPath)) {
          copy = constructor.getReference(data, this.extras[relationPath]);
        } else {
          copy = data.$clone({
            shallow: true
          });

          for (const {
            name
          } of Object.values(constructor.getRelations())) {
            if (name in data) {
              copy[name] = this.processRelates(data[name], appendPath(relationPath, '.', name), appendPath(dataPath, '/', name));
            }
          }
        }

        return copy;
      } else if ((0, _utils.isArray)(data)) {
        return data.map((entry, index) => this.processRelates(entry, relationPath, appendPath(dataPath, '/', index)));
      }
    }

    return data;
  }

}

exports.DitoGraphProcessor = DitoGraphProcessor;

function appendPath(path, separator, token) {
  return path !== '' ? `${path}${separator}${token}` : token;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,