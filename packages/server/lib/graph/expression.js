"use strict";

exports.__esModule = true;
exports.collectExpressionPaths = collectExpressionPaths;
exports.expressionPathToString = expressionPathToString;
exports.modelGraphToExpression = modelGraphToExpression;

var _utils = require("@ditojs/utils");

function collectExpressionPaths(expr) {
  const paths = [];

  for (const key of Object.keys(expr)) {
    const child = expr[key];

    if ((0, _utils.isObject)(child)) {
      const relation = child.$relation || key;
      const alias = relation !== key ? key : undefined;
      const modify = child.$modify;
      const entry = {
        relation,
        alias,
        modify
      };
      const subPaths = collectExpressionPaths(child);

      if (subPaths.length > 0) {
        for (const subPath of subPaths) {
          paths.push([entry, ...subPath]);
        }
      } else {
        paths.push([entry]);
      }
    }
  }

  return paths;
}

function expressionPathToString(path, start = 0) {
  return (start ? path.slice(start) : path).map(({
    relation,
    alias,
    modify
  }) => {
    const expr = alias ? `${relation} as ${alias}` : relation;
    return modify.length > 0 ? `${expr}(${modify.join(', ')})` : expr;
  }).join('.');
}

function modelGraphToExpression(modelGraph, expr) {
  if (modelGraph) {
    expr = expr || {};

    for (const model of (0, _utils.asArray)(modelGraph)) {
      if (model) {
        const relations = model.constructor.getRelations();

        for (const {
          name
        } of Object.values(relations)) {
          if (model.hasOwnProperty(name)) {
            expr[name] = modelGraphToExpression(model[name], expr[name]);
          }
        }
      }
    }
  }

  return expr;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ncmFwaC9leHByZXNzaW9uLmpzIl0sIm5hbWVzIjpbImNvbGxlY3RFeHByZXNzaW9uUGF0aHMiLCJleHByIiwicGF0aHMiLCJrZXkiLCJPYmplY3QiLCJrZXlzIiwiY2hpbGQiLCJyZWxhdGlvbiIsIiRyZWxhdGlvbiIsImFsaWFzIiwidW5kZWZpbmVkIiwibW9kaWZ5IiwiJG1vZGlmeSIsImVudHJ5Iiwic3ViUGF0aHMiLCJsZW5ndGgiLCJzdWJQYXRoIiwicHVzaCIsImV4cHJlc3Npb25QYXRoVG9TdHJpbmciLCJwYXRoIiwic3RhcnQiLCJzbGljZSIsIm1hcCIsImpvaW4iLCJtb2RlbEdyYXBoVG9FeHByZXNzaW9uIiwibW9kZWxHcmFwaCIsIm1vZGVsIiwicmVsYXRpb25zIiwiY29uc3RydWN0b3IiLCJnZXRSZWxhdGlvbnMiLCJuYW1lIiwidmFsdWVzIiwiaGFzT3duUHJvcGVydHkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFTyxTQUFTQSxzQkFBVCxDQUFnQ0MsSUFBaEMsRUFBc0M7QUFDM0MsUUFBTUMsS0FBSyxHQUFHLEVBQWQ7O0FBQ0EsT0FBSyxNQUFNQyxHQUFYLElBQWtCQyxNQUFNLENBQUNDLElBQVAsQ0FBWUosSUFBWixDQUFsQixFQUFxQztBQUNuQyxVQUFNSyxLQUFLLEdBQUdMLElBQUksQ0FBQ0UsR0FBRCxDQUFsQjs7QUFDQSxRQUFJLHFCQUFTRyxLQUFULENBQUosRUFBcUI7QUFDbkIsWUFBTUMsUUFBUSxHQUFHRCxLQUFLLENBQUNFLFNBQU4sSUFBbUJMLEdBQXBDO0FBQ0EsWUFBTU0sS0FBSyxHQUFHRixRQUFRLEtBQUtKLEdBQWIsR0FBbUJBLEdBQW5CLEdBQXlCTyxTQUF2QztBQUNBLFlBQU1DLE1BQU0sR0FBR0wsS0FBSyxDQUFDTSxPQUFyQjtBQUNBLFlBQU1DLEtBQUssR0FBRztBQUFFTixRQUFBQSxRQUFGO0FBQVlFLFFBQUFBLEtBQVo7QUFBbUJFLFFBQUFBO0FBQW5CLE9BQWQ7QUFDQSxZQUFNRyxRQUFRLEdBQUdkLHNCQUFzQixDQUFDTSxLQUFELENBQXZDOztBQUNBLFVBQUlRLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQixDQUF0QixFQUF5QjtBQUV2QixhQUFLLE1BQU1DLE9BQVgsSUFBc0JGLFFBQXRCLEVBQWdDO0FBQzlCWixVQUFBQSxLQUFLLENBQUNlLElBQU4sQ0FBVyxDQUFDSixLQUFELEVBQVEsR0FBR0csT0FBWCxDQUFYO0FBQ0Q7QUFDRixPQUxELE1BS087QUFFTGQsUUFBQUEsS0FBSyxDQUFDZSxJQUFOLENBQVcsQ0FBQ0osS0FBRCxDQUFYO0FBQ0Q7QUFDRjtBQUNGOztBQUNELFNBQU9YLEtBQVA7QUFDRDs7QUFFTSxTQUFTZ0Isc0JBQVQsQ0FBZ0NDLElBQWhDLEVBQXNDQyxLQUFLLEdBQUcsQ0FBOUMsRUFBaUQ7QUFDdEQsU0FBTyxDQUFDQSxLQUFLLEdBQUdELElBQUksQ0FBQ0UsS0FBTCxDQUFXRCxLQUFYLENBQUgsR0FBdUJELElBQTdCLEVBQ0pHLEdBREksQ0FFSCxDQUFDO0FBQUVmLElBQUFBLFFBQUY7QUFBWUUsSUFBQUEsS0FBWjtBQUFtQkUsSUFBQUE7QUFBbkIsR0FBRCxLQUFpQztBQUMvQixVQUFNVixJQUFJLEdBQUdRLEtBQUssR0FBSSxHQUFFRixRQUFTLE9BQU1FLEtBQU0sRUFBM0IsR0FBK0JGLFFBQWpEO0FBQ0EsV0FBT0ksTUFBTSxDQUFDSSxNQUFQLEdBQWdCLENBQWhCLEdBQ0YsR0FBRWQsSUFBSyxJQUFHVSxNQUFNLENBQUNZLElBQVAsQ0FBWSxJQUFaLENBQWtCLEdBRDFCLEdBRUh0QixJQUZKO0FBR0QsR0FQRSxFQVNKc0IsSUFUSSxDQVNDLEdBVEQsQ0FBUDtBQVVEOztBQUVNLFNBQVNDLHNCQUFULENBQWdDQyxVQUFoQyxFQUE0Q3hCLElBQTVDLEVBQWtEO0FBQ3ZELE1BQUl3QixVQUFKLEVBQWdCO0FBQ2R4QixJQUFBQSxJQUFJLEdBQUdBLElBQUksSUFBSSxFQUFmOztBQUNBLFNBQUssTUFBTXlCLEtBQVgsSUFBb0Isb0JBQVFELFVBQVIsQ0FBcEIsRUFBeUM7QUFDdkMsVUFBSUMsS0FBSixFQUFXO0FBQ1QsY0FBTUMsU0FBUyxHQUFHRCxLQUFLLENBQUNFLFdBQU4sQ0FBa0JDLFlBQWxCLEVBQWxCOztBQUNBLGFBQUssTUFBTTtBQUFFQyxVQUFBQTtBQUFGLFNBQVgsSUFBdUIxQixNQUFNLENBQUMyQixNQUFQLENBQWNKLFNBQWQsQ0FBdkIsRUFBaUQ7QUFDL0MsY0FBSUQsS0FBSyxDQUFDTSxjQUFOLENBQXFCRixJQUFyQixDQUFKLEVBQWdDO0FBQzlCN0IsWUFBQUEsSUFBSSxDQUFDNkIsSUFBRCxDQUFKLEdBQWFOLHNCQUFzQixDQUFDRSxLQUFLLENBQUNJLElBQUQsQ0FBTixFQUFjN0IsSUFBSSxDQUFDNkIsSUFBRCxDQUFsQixDQUFuQztBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7O0FBQ0QsU0FBTzdCLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzT2JqZWN0LCBhc0FycmF5IH0gZnJvbSAnQGRpdG9qcy91dGlscydcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RFeHByZXNzaW9uUGF0aHMoZXhwcikge1xuICBjb25zdCBwYXRocyA9IFtdXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGV4cHIpKSB7XG4gICAgY29uc3QgY2hpbGQgPSBleHByW2tleV1cbiAgICBpZiAoaXNPYmplY3QoY2hpbGQpKSB7XG4gICAgICBjb25zdCByZWxhdGlvbiA9IGNoaWxkLiRyZWxhdGlvbiB8fCBrZXlcbiAgICAgIGNvbnN0IGFsaWFzID0gcmVsYXRpb24gIT09IGtleSA/IGtleSA6IHVuZGVmaW5lZFxuICAgICAgY29uc3QgbW9kaWZ5ID0gY2hpbGQuJG1vZGlmeVxuICAgICAgY29uc3QgZW50cnkgPSB7IHJlbGF0aW9uLCBhbGlhcywgbW9kaWZ5IH1cbiAgICAgIGNvbnN0IHN1YlBhdGhzID0gY29sbGVjdEV4cHJlc3Npb25QYXRocyhjaGlsZClcbiAgICAgIGlmIChzdWJQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBoYXMgaXRzZWxmIGNoaWxkcmVuLlxuICAgICAgICBmb3IgKGNvbnN0IHN1YlBhdGggb2Ygc3ViUGF0aHMpIHtcbiAgICAgICAgICBwYXRocy5wdXNoKFtlbnRyeSwgLi4uc3ViUGF0aF0pXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBpcyBhIGxlYWYuXG4gICAgICAgIHBhdGhzLnB1c2goW2VudHJ5XSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBhdGhzXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHByZXNzaW9uUGF0aFRvU3RyaW5nKHBhdGgsIHN0YXJ0ID0gMCkge1xuICByZXR1cm4gKHN0YXJ0ID8gcGF0aC5zbGljZShzdGFydCkgOiBwYXRoKVxuICAgIC5tYXAoXG4gICAgICAoeyByZWxhdGlvbiwgYWxpYXMsIG1vZGlmeSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGV4cHIgPSBhbGlhcyA/IGAke3JlbGF0aW9ufSBhcyAke2FsaWFzfWAgOiByZWxhdGlvblxuICAgICAgICByZXR1cm4gbW9kaWZ5Lmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGAke2V4cHJ9KCR7bW9kaWZ5LmpvaW4oJywgJyl9KWBcbiAgICAgICAgICA6IGV4cHJcbiAgICAgIH1cbiAgICApXG4gICAgLmpvaW4oJy4nKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9kZWxHcmFwaFRvRXhwcmVzc2lvbihtb2RlbEdyYXBoLCBleHByKSB7XG4gIGlmIChtb2RlbEdyYXBoKSB7XG4gICAgZXhwciA9IGV4cHIgfHwge31cbiAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIGFzQXJyYXkobW9kZWxHcmFwaCkpIHtcbiAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICBjb25zdCByZWxhdGlvbnMgPSBtb2RlbC5jb25zdHJ1Y3Rvci5nZXRSZWxhdGlvbnMoKVxuICAgICAgICBmb3IgKGNvbnN0IHsgbmFtZSB9IG9mIE9iamVjdC52YWx1ZXMocmVsYXRpb25zKSkge1xuICAgICAgICAgIGlmIChtb2RlbC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgZXhwcltuYW1lXSA9IG1vZGVsR3JhcGhUb0V4cHJlc3Npb24obW9kZWxbbmFtZV0sIGV4cHJbbmFtZV0pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBleHByXG59XG4iXX0=