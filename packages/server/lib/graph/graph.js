"use strict";

exports.__esModule = true;
exports.ensureModel = ensureModel;
exports.ensureModelArray = ensureModelArray;
exports.walkGraph = walkGraph;
exports.filterGraph = filterGraph;
exports.populateGraph = populateGraph;

require("core-js/modules/esnext.map.delete-all.js");

require("core-js/modules/esnext.map.every.js");

require("core-js/modules/esnext.map.filter.js");

require("core-js/modules/esnext.map.find.js");

require("core-js/modules/esnext.map.find-key.js");

require("core-js/modules/esnext.map.includes.js");

require("core-js/modules/esnext.map.key-of.js");

require("core-js/modules/esnext.map.map-keys.js");

require("core-js/modules/esnext.map.map-values.js");

require("core-js/modules/esnext.map.merge.js");

require("core-js/modules/esnext.map.reduce.js");

require("core-js/modules/esnext.map.some.js");

require("core-js/modules/esnext.map.update.js");

var _utils = require("@ditojs/utils");

var _query = require("../query");

var _expression = require("./expression.js");

function ensureModel(modelClass, model, options) {
  return !model ? null : model instanceof modelClass ? parseRelationsIntoModelInstances(model, model, options) : modelClass.fromJson(model, options);
}

function ensureModelArray(modelClass, data, options) {
  return data ? (0, _utils.asArray)(data).map(model => ensureModel(modelClass, model, options)) : [];
}

function parseRelationsIntoModelInstances(model, json, options = {}) {
  if (!options.cache) {
    options = { ...options,
      cache: new Map()
    };
  }

  options.cache.set(json, model);

  for (const relationName of model.constructor.getRelationNames()) {
    const jsonRelation = json[relationName];

    if (jsonRelation !== undefined) {
      const relation = model.constructor.getRelation(relationName);
      const parsedRelation = parseRelation(jsonRelation, relation, options);

      if (parsedRelation !== jsonRelation) {
        model[relation.name] = parsedRelation;
      }
    }
  }

  return model;
}

function parseRelation(json, relation, options) {
  return (0, _utils.isArray)(json) ? parseRelationArray(json, relation, options) : parseRelationObject(json, relation, options);
}

function parseRelationArray(json, relation, options) {
  const models = new Array(json.length);
  let changed = false;

  for (let i = 0, l = json.length; i < l; i++) {
    const model = parseRelationObject(json[i], relation, options);
    changed = changed || model !== json[i];
    models[i] = model;
  }

  return changed ? models : json;
}

function parseRelationObject(json, relation, options) {
  if ((0, _utils.isObject)(json)) {
    const modelClass = relation.relatedModelClass;
    let model = options.cache.get(json);

    if (model === undefined) {
      if (json instanceof modelClass) {
        model = parseRelationsIntoModelInstances(json, json, options);
      } else {
        model = modelClass.fromJson(json, options);
      }
    }

    return model;
  }

  return json;
}

function walkGraph(data, callback, path = []) {
  if ((0, _utils.isObject)(data) || (0, _utils.isArray)(data)) {
    for (const [key, value] of Object.entries(data)) {
      const dataPath = [...path, key];
      callback(value, dataPath, data, key);
      walkGraph(value, callback, dataPath);
    }
  }
}

function filterGraph(rootModelClass, modelGraph, expr) {
  expr = _query.QueryBuilder.parseRelationExpression(expr);
  const models = ensureModelArray(rootModelClass, modelGraph, {
    skipValidation: true
  });

  for (const model of models) {
    if (model) {
      const relations = model.constructor.getRelations();

      for (const key of Object.keys(model)) {
        const relation = relations[key];

        if (relation) {
          const child = expr[key];

          if (child) {
            filterGraph(relation.relatedModelClass, model[key], child);
          } else {
            delete model[key];
          }
        }
      }
    }
  }

  return modelGraph;
}

async function populateGraph(rootModelClass, graph, expr, trx) {
  expr = _query.QueryBuilder.parseRelationExpression(expr);
  const grouped = {};

  const addToGroup = (item, modelClass, isReference, modify, relation, expr) => {
    const id = item.$id();

    if (id != null) {
      const key = `${modelClass.name}_${modify}_${expr || ''}`;
      const group = grouped[key] || (grouped[key] = {
        modelClass,
        modify,
        relation,
        expr,
        targets: [],
        ids: [],
        modelsById: {}
      });
      group.targets.push({
        item,
        isReference
      });
      group.ids.push(id);
    }
  };

  for (const path of (0, _expression.collectExpressionPaths)(expr)) {
    let modelClass = rootModelClass;
    const modelClasses = [];
    let lastModify;

    for (const entry of path) {
      modelClasses.push(modelClass);
      modelClass = modelClass.getRelation(entry.relation).relatedModelClass;
      lastModify = entry.modify;
    }

    for (const model of (0, _utils.asArray)(graph)) {
      if (model) {
        let items = (0, _utils.asArray)(model);

        for (let i = 0, l = path.length; i < l; i++) {
          if (items.length === 0) break;
          const {
            relation
          } = path[i];
          const modelClass = modelClasses[i];
          items = items.reduce((items, item) => {
            item = ensureModel(modelClass, item, {
              skipValidation: true
            });
            let add = false;
            const isReference = modelClass.isReference(item);

            if (isReference) {
              add = true;
            } else {
              const value = item[relation];

              if (value != null) {
                items.push(...(0, _utils.asArray)(value));
              } else if (value === undefined) {
                add = true;
              }
            }

            if (add) {
              const modify = i > 0 ? path[i - 1].modify : null;
              const expr = (0, _expression.expressionPathToString)(path, i);
              addToGroup(item, modelClass, isReference, modify, relation, expr);
            }

            return items;
          }, []);
        }

        for (const item of items) {
          if (modelClass.isReference(item)) {
            addToGroup(item, modelClass, true, lastModify);
          }
        }
      }
    }
  }

  const groups = Object.values(grouped).filter(({
    ids
  }) => ids.length > 0);

  if (groups.length > 0) {
    await Promise.all(groups.map(async ({
      modelClass,
      modify,
      expr,
      ids,
      modelsById
    }) => {
      const query = modelClass.query(trx).findByIds(ids).modify(modify);

      if (expr) {
        query.withGraph(expr);
      }

      const models = await query;

      for (const model of models) {
        modelsById[model.$id()] = model;
      }
    }));

    for (const {
      targets,
      modelsById,
      relation
    } of groups) {
      for (const {
        item,
        isReference
      } of targets) {
        const model = modelsById[item.$id()];

        if (model) {
          if (isReference) {
            Object.assign(item, model);
          } else {
            item[relation] = model[relation];
          }
        }
      }
    }
  }

  return graph;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,