"use strict";

exports.__esModule = true;
exports.EventEmitter = void 0;

var _eventemitter = _interopRequireDefault(require("eventemitter2"));

var _utils = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class EventEmitter extends _eventemitter.default {
  _setupEmitter(events, options) {
    _eventemitter.default.call(this, {
      delimiter: ':',
      maxListeners: 0,
      ...options
    });

    for (const key in events) {
      for (const part of key.split(',')) {
        const event = part.trim();

        for (const callback of (0, _utils.asArray)(events[key])) {
          this.on(event, callback);
        }
      }
    }
  }

  emit(event, ...args) {
    return this.emitAsync(event, ...args);
  }

  _handle(method, event, callback) {
    if ((0, _utils.isString)(event)) {
      super[method](event, callback);
    } else if ((0, _utils.isArray)(event)) {
      for (const ev of event) {
        super[method](ev, callback);
      }
    } else if ((0, _utils.isPlainObject)(event)) {
      for (const key in event) {
        super[method](key, event[key]);
      }
    }

    return this;
  }

  on(event, callback) {
    return this._handle('on', event, callback);
  }

  off(event, callback) {
    return this._handle('off', event, callback);
  }

  once(event, callback) {
    return this._handle('once', event, callback);
  }

  static mixin(target) {
    Object.defineProperties(target, properties);
  }

}

exports.EventEmitter = EventEmitter;
const {
  constructor,
  ...properties
} = { ...Object.getOwnPropertyDescriptors(_eventemitter.default.prototype),
  ...Object.getOwnPropertyDescriptors(EventEmitter.prototype)
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvRXZlbnRFbWl0dGVyLmpzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlcjIiLCJfc2V0dXBFbWl0dGVyIiwiZXZlbnRzIiwib3B0aW9ucyIsImNhbGwiLCJkZWxpbWl0ZXIiLCJtYXhMaXN0ZW5lcnMiLCJrZXkiLCJwYXJ0Iiwic3BsaXQiLCJldmVudCIsInRyaW0iLCJjYWxsYmFjayIsIm9uIiwiZW1pdCIsImFyZ3MiLCJlbWl0QXN5bmMiLCJfaGFuZGxlIiwibWV0aG9kIiwiZXYiLCJvZmYiLCJvbmNlIiwibWl4aW4iLCJ0YXJnZXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImNvbnN0cnVjdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQTs7OztBQUVPLE1BQU1BLFlBQU4sU0FBMkJDLHFCQUEzQixDQUF5QztBQUU5Q0MsRUFBQUEsYUFBYSxDQUFDQyxNQUFELEVBQVNDLE9BQVQsRUFBa0I7QUFDN0JILDBCQUFjSSxJQUFkLENBQW1CLElBQW5CLEVBQXlCO0FBQ3ZCQyxNQUFBQSxTQUFTLEVBQUUsR0FEWTtBQUV2QkMsTUFBQUEsWUFBWSxFQUFFLENBRlM7QUFHdkIsU0FBR0g7QUFIb0IsS0FBekI7O0FBS0EsU0FBSyxNQUFNSSxHQUFYLElBQWtCTCxNQUFsQixFQUEwQjtBQUN4QixXQUFLLE1BQU1NLElBQVgsSUFBbUJELEdBQUcsQ0FBQ0UsS0FBSixDQUFVLEdBQVYsQ0FBbkIsRUFBbUM7QUFDakMsY0FBTUMsS0FBSyxHQUFHRixJQUFJLENBQUNHLElBQUwsRUFBZDs7QUFDQSxhQUFLLE1BQU1DLFFBQVgsSUFBdUIsb0JBQVFWLE1BQU0sQ0FBQ0ssR0FBRCxDQUFkLENBQXZCLEVBQTZDO0FBQzNDLGVBQUtNLEVBQUwsQ0FBUUgsS0FBUixFQUFlRSxRQUFmO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRURFLEVBQUFBLElBQUksQ0FBQ0osS0FBRCxFQUFRLEdBQUdLLElBQVgsRUFBaUI7QUFHbkIsV0FBTyxLQUFLQyxTQUFMLENBQWVOLEtBQWYsRUFBc0IsR0FBR0ssSUFBekIsQ0FBUDtBQUNEOztBQUVERSxFQUFBQSxPQUFPLENBQUNDLE1BQUQsRUFBU1IsS0FBVCxFQUFnQkUsUUFBaEIsRUFBMEI7QUFDL0IsUUFBSSxxQkFBU0YsS0FBVCxDQUFKLEVBQXFCO0FBQ25CLFlBQU1RLE1BQU4sRUFBY1IsS0FBZCxFQUFxQkUsUUFBckI7QUFDRCxLQUZELE1BRU8sSUFBSSxvQkFBUUYsS0FBUixDQUFKLEVBQW9CO0FBQ3pCLFdBQUssTUFBTVMsRUFBWCxJQUFpQlQsS0FBakIsRUFBd0I7QUFDdEIsY0FBTVEsTUFBTixFQUFjQyxFQUFkLEVBQWtCUCxRQUFsQjtBQUNEO0FBQ0YsS0FKTSxNQUlBLElBQUksMEJBQWNGLEtBQWQsQ0FBSixFQUEwQjtBQUMvQixXQUFLLE1BQU1ILEdBQVgsSUFBa0JHLEtBQWxCLEVBQXlCO0FBQ3ZCLGNBQU1RLE1BQU4sRUFBY1gsR0FBZCxFQUFtQkcsS0FBSyxDQUFDSCxHQUFELENBQXhCO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPLElBQVA7QUFDRDs7QUFFRE0sRUFBQUEsRUFBRSxDQUFDSCxLQUFELEVBQVFFLFFBQVIsRUFBa0I7QUFDbEIsV0FBTyxLQUFLSyxPQUFMLENBQWEsSUFBYixFQUFtQlAsS0FBbkIsRUFBMEJFLFFBQTFCLENBQVA7QUFDRDs7QUFFRFEsRUFBQUEsR0FBRyxDQUFDVixLQUFELEVBQVFFLFFBQVIsRUFBa0I7QUFDbkIsV0FBTyxLQUFLSyxPQUFMLENBQWEsS0FBYixFQUFvQlAsS0FBcEIsRUFBMkJFLFFBQTNCLENBQVA7QUFDRDs7QUFFRFMsRUFBQUEsSUFBSSxDQUFDWCxLQUFELEVBQVFFLFFBQVIsRUFBa0I7QUFDcEIsV0FBTyxLQUFLSyxPQUFMLENBQWEsTUFBYixFQUFxQlAsS0FBckIsRUFBNEJFLFFBQTVCLENBQVA7QUFDRDs7QUFFVyxTQUFMVSxLQUFLLENBQUNDLE1BQUQsRUFBUztBQUNuQkMsSUFBQUEsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkYsTUFBeEIsRUFBZ0NHLFVBQWhDO0FBQ0Q7O0FBckQ2Qzs7O0FBd0RoRCxNQUFNO0FBQ0pDLEVBQUFBLFdBREk7QUFFSixLQUFHRDtBQUZDLElBR0YsRUFDRixHQUFHRixNQUFNLENBQUNJLHlCQUFQLENBQWlDNUIsc0JBQWM2QixTQUEvQyxDQUREO0FBRUYsS0FBR0wsTUFBTSxDQUFDSSx5QkFBUCxDQUFpQzdCLFlBQVksQ0FBQzhCLFNBQTlDO0FBRkQsQ0FISiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudEVtaXR0ZXIyIGZyb20gJ2V2ZW50ZW1pdHRlcjInXG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0LCBpc1N0cmluZywgaXNBcnJheSwgYXNBcnJheSB9IGZyb20gJ0BkaXRvanMvdXRpbHMnXG5cbmV4cG9ydCBjbGFzcyBFdmVudEVtaXR0ZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIyIHtcbiAgLy8gTWV0aG9kIGZvciBjbGFzc2VzIHRoYXQgdXNlIGBFdmVudEVtaXR0ZXIubWl4aW4oKWAgdG8gc2V0dXAgdGhlIGVtaXR0ZXIuXG4gIF9zZXR1cEVtaXR0ZXIoZXZlbnRzLCBvcHRpb25zKSB7XG4gICAgRXZlbnRFbWl0dGVyMi5jYWxsKHRoaXMsIHtcbiAgICAgIGRlbGltaXRlcjogJzonLFxuICAgICAgbWF4TGlzdGVuZXJzOiAwLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pXG4gICAgZm9yIChjb25zdCBrZXkgaW4gZXZlbnRzKSB7XG4gICAgICBmb3IgKGNvbnN0IHBhcnQgb2Yga2V5LnNwbGl0KCcsJykpIHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBwYXJ0LnRyaW0oKVxuICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGFzQXJyYXkoZXZlbnRzW2tleV0pKSB7XG4gICAgICAgICAgdGhpcy5vbihldmVudCwgY2FsbGJhY2spXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbWl0KGV2ZW50LCAuLi5hcmdzKSB7XG4gICAgLy8gQWx3YXlzIHVzZSBhc3luYyB2ZXJzaW9uIHRvIGVtaXQgZXZlbnRzOiBJdCB3aWxsIHBlcmZvcm0gdGhlIHNhbWUgYXNcbiAgICAvLyB0aGUgbm9ybWFsIG9uZSB3aGVuIHRoZSBtZXRob2RzIGFyZW4ndCBhY3R1YWxseSBhc3luYy5cbiAgICByZXR1cm4gdGhpcy5lbWl0QXN5bmMoZXZlbnQsIC4uLmFyZ3MpXG4gIH1cblxuICBfaGFuZGxlKG1ldGhvZCwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGlzU3RyaW5nKGV2ZW50KSkge1xuICAgICAgc3VwZXJbbWV0aG9kXShldmVudCwgY2FsbGJhY2spXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yIChjb25zdCBldiBvZiBldmVudCkge1xuICAgICAgICBzdXBlclttZXRob2RdKGV2LCBjYWxsYmFjaylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoZXZlbnQpKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBldmVudCkge1xuICAgICAgICBzdXBlclttZXRob2RdKGtleSwgZXZlbnRba2V5XSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9oYW5kbGUoJ29uJywgZXZlbnQsIGNhbGxiYWNrKVxuICB9XG5cbiAgb2ZmKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9oYW5kbGUoJ29mZicsIGV2ZW50LCBjYWxsYmFjaylcbiAgfVxuXG4gIG9uY2UoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hhbmRsZSgnb25jZScsIGV2ZW50LCBjYWxsYmFjaylcbiAgfVxuXG4gIHN0YXRpYyBtaXhpbih0YXJnZXQpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BlcnRpZXMpXG4gIH1cbn1cblxuY29uc3Qge1xuICBjb25zdHJ1Y3RvciwgLy8gRG9uJ3QgZXh0cmFjdCBjb25zdHJ1Y3RvciwgYnV0IGV2ZXJ5dGhpbmcgZWxzZVxuICAuLi5wcm9wZXJ0aWVzXG59ID0ge1xuICAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhFdmVudEVtaXR0ZXIyLnByb3RvdHlwZSksXG4gIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKEV2ZW50RW1pdHRlci5wcm90b3R5cGUpXG59XG4iXX0=