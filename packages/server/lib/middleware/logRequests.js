"use strict";

exports.__esModule = true;
exports.logRequests = logRequests;

var _bytes = _interopRequireDefault(require("bytes"));

var _chalk = _interopRequireDefault(require("chalk"));

var _passthroughCounter = _interopRequireDefault(require("passthrough-counter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function logRequests({
  ignoreUrls
} = {}) {
  return async (ctx, next) => {
    if (ignoreUrls && ctx.req.url.match(ignoreUrls)) {
      return next();
    }

    const start = Date.now();
    logRequest(ctx);

    try {
      await next();
    } catch (err) {
      logResponse({
        ctx,
        start,
        err
      });
      throw err;
    }

    const {
      body,
      response: {
        length
      }
    } = ctx;
    let counter;

    if (length === null && body != null && body.readable) {
      ctx.body = body.pipe(counter = new _passthroughCounter.default()).on('error', ctx.onerror);
    }

    const {
      res
    } = ctx;
    const onfinish = done.bind(null, 'finish');
    const onclose = done.bind(null, 'close');
    res.once('finish', onfinish);
    res.once('close', onclose);

    function done() {
      res.removeListener('finish', onfinish);
      res.removeListener('close', onclose);
      logResponse({
        ctx,
        start,
        length: counter ? counter.length : length
      });
    }
  };
}

function logRequest(ctx) {
  var _ctx$logger;

  const logger = (_ctx$logger = ctx.logger) == null ? void 0 : _ctx$logger.child({
    name: 'http'
  });

  if (logger != null && logger.isLevelEnabled('trace')) {
    logger.trace({
      req: ctx.req
    }, `${_chalk.default.gray('<--')} ${_chalk.default.bold(ctx.method)} ${_chalk.default.gray(ctx.originalUrl)}`);
  }
}

function logResponse({
  ctx,
  start,
  length,
  err
}) {
  var _ctx$logger2;

  const logger = (_ctx$logger2 = ctx.logger) == null ? void 0 : _ctx$logger2.child({
    name: 'http'
  });
  const level = err ? 'warn' : 'info';

  if (logger != null && logger.isLevelEnabled(level)) {
    const status = err ? err.status || 500 : ctx.status || 404;
    const statusRange = status / 100 | 0;
    const statusColor = colorCodes[statusRange] || colorCodes[0];
    const formattedLength = [204, 205, 304].includes(status) ? '' : length == null ? '-' : (0, _bytes.default)(length).toLowerCase();
    const formattedTime = formatTime(start);
    logger[level]({
      req: ctx.req,
      res: ctx.res
    }, `${_chalk.default.bold(ctx.method)} ${_chalk.default.gray(ctx.originalUrl)} ${_chalk.default[statusColor](status)} ${_chalk.default.gray(formattedTime)} ${_chalk.default.gray(formattedLength)}`);
  }
}

function formatTime(start) {
  const delta = Date.now() - start;
  return delta < 10000 ? delta + 'ms' : Math.round(delta / 1000) + 's';
}

const colorCodes = {
  7: 'magenta',
  5: 'red',
  4: 'yellow',
  3: 'cyan',
  2: 'green',
  1: 'green',
  0: 'yellow'
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,