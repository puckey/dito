"use strict";

exports.__esModule = true;
exports.UserMixin = void 0;

var _bcryptjs = _interopRequireDefault(require("bcryptjs"));

var _koaPassport = _interopRequireDefault(require("koa-passport"));

var _passportLocal = require("passport-local");

var _errors = require("../errors");

var _utils = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const UserMixin = (0, _utils.mixin)(Model => {
  var _class, _temp;

  return _temp = _class = class extends Model {
    static get properties() {
      const {
        usernameProperty,
        passwordProperty
      } = this.definition.options;
      return {
        [usernameProperty]: {
          type: 'string',
          required: true
        },
        [passwordProperty]: {
          type: 'string',
          computed: true
        },
        hash: {
          type: 'string',
          hidden: true
        },
        lastLogin: {
          type: 'timestamp',
          nullable: true
        }
      };
    }

    get password() {
      return undefined;
    }

    set password(password) {
      this.hash = _bcryptjs.default.hashSync(password, _bcryptjs.default.genSaltSync(10));
    }

    async $verifyPassword(password) {
      return _bcryptjs.default.compare(password, this.hash);
    }

    $hasRole(...roles) {
      var _this$roles;

      return ((_this$roles = this.roles) == null ? void 0 : _this$roles.find(role => roles.includes(role))) || false;
    }

    $hasOwner(owner) {
      return this.$is(owner);
    }

    $isLoggedIn(ctx) {
      return this.$is(ctx.state.user);
    }

    static initialize() {
      super.initialize();
      userClasses[this.name] = this;
      const {
        usernameProperty,
        passwordProperty
      } = this.definition.options;

      _koaPassport.default.use(this.name, new _passportLocal.Strategy({
        usernameField: usernameProperty,
        passwordField: passwordProperty,
        passReqToCallback: true
      }, async (req, username, password, done) => {
        try {
          const user = await this.sessionQuery(req.ctx.transaction).findOne(usernameProperty, username);
          const res = user && (await user.$verifyPassword(password)) ? user : null;
          done(null, res);
        } catch (err) {
          done(err);
        }
      }));
    }

    static async login(ctx, options) {
      return new Promise((resolve, reject) => {
        _koaPassport.default.authenticate(this.name, async (err, user, message, status) => {
          if (err) {
            reject(err);
          } else if (user) {
            try {
              await ctx.login(user, options);
              resolve(user);
            } catch (err) {
              reject(err);
            }
          } else {
            reject(new _errors.AuthenticationError(message || 'Password or username is incorrect', status));
          }
        })(ctx);
      });
    }

    static sessionQuery(trx) {
      return this.query(trx).withScope(...(0, _utils.asArray)(this.definition.options.sessionScope));
    }

  }, _class.options = {
    usernameProperty: 'username',
    passwordProperty: 'password',
    sessionScope: undefined
  }, _temp;
});
exports.UserMixin = UserMixin;
const userClasses = {};

_koaPassport.default.serializeUser((req, user, done) => {
  const modelName = user == null ? void 0 : user.constructor.name;
  const identifier = modelName && userClasses[modelName] ? `${modelName}-${user.id}` : null;
  done(null, identifier);
});

_koaPassport.default.deserializeUser(async (req, identifier, done) => {
  const [modelName, userId] = identifier.split('-');
  const userClass = userClasses[modelName];

  try {
    const user = userClass ? await userClass.sessionQuery(req.ctx.transaction).findById(userId) : null;
    done(null, user);
  } catch (err) {
    done(err);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,