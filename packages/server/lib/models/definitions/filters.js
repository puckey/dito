"use strict";

exports.__esModule = true;
exports.default = filters;

var _utils = require("@ditojs/utils");

var _query = require("../../query");

var _utils2 = require("../../utils");

function filters(values) {
  const filters = {};

  for (const [name, definition] of Object.entries((0, _utils2.mergeReversed)(values))) {
    const filter = (0, _utils.isFunction)(definition) ? definition : (0, _utils.isObject)(definition) ? convertObjectFilter(definition, name) : null;

    if (!filter) {
      throw new Error(`Invalid filter '${name}': Unrecognized definition: ${definition}.`);
    }

    filters[name] = wrapWithValidation(filter, name, this.app);
  }

  return filters;
}

function convertObjectFilter(definition, name) {
  const {
    filter,
    properties
  } = definition;

  if ((0, _utils.isFunction)(filter)) {
    return addFunctionSettings(filter, definition);
  } else {
    const queryFilter = _query.QueryFilters.get(filter);

    if (!queryFilter) {
      throw new Error(`Invalid filter '${name}': Unknown filter type '${filter}'.`);
    }

    const func = properties ? (query, ...args) => {
      for (const property of properties) {
        query.orWhere(query => queryFilter(query, property, ...args));
      }
    } : (query, ...args) => {
      queryFilter(query, name, ...args);
    };
    return addFunctionSettings(func, queryFilter);
  }
}

function addFunctionSettings(filter, definition) {
  filter.parameters = definition.parameters;
  filter.validate = definition.validate;
  return filter;
}

function wrapWithValidation(filter, name, app) {
  const dataName = 'query';
  const validator = filter && app.compileParametersValidator(filter.parameters, { ...filter.validate,
    dataName
  });

  if (validator != null && validator.validate) {
    return (query, ...args) => {
      const object = {};
      let index = 0;

      for (const {
        name
      } of validator.list) {
        object[name || dataName] = args[index++];
      }

      try {
        validator.validate(object);
      } catch (error) {
        throw app.createValidationError({
          type: 'FilterValidation',
          message: `The provided data for query filter '${name}' is not valid`,
          errors: app.validator.prefixDataPaths(error.errors, `.${name}`)
        });
      }

      return filter(query, ...args);
    };
  }

  return filter;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvZGVmaW5pdGlvbnMvZmlsdGVycy5qcyJdLCJuYW1lcyI6WyJmaWx0ZXJzIiwidmFsdWVzIiwibmFtZSIsImRlZmluaXRpb24iLCJPYmplY3QiLCJlbnRyaWVzIiwiZmlsdGVyIiwiY29udmVydE9iamVjdEZpbHRlciIsIkVycm9yIiwid3JhcFdpdGhWYWxpZGF0aW9uIiwiYXBwIiwicHJvcGVydGllcyIsImFkZEZ1bmN0aW9uU2V0dGluZ3MiLCJxdWVyeUZpbHRlciIsIlF1ZXJ5RmlsdGVycyIsImdldCIsImZ1bmMiLCJxdWVyeSIsImFyZ3MiLCJwcm9wZXJ0eSIsIm9yV2hlcmUiLCJwYXJhbWV0ZXJzIiwidmFsaWRhdGUiLCJkYXRhTmFtZSIsInZhbGlkYXRvciIsImNvbXBpbGVQYXJhbWV0ZXJzVmFsaWRhdG9yIiwib2JqZWN0IiwiaW5kZXgiLCJsaXN0IiwiZXJyb3IiLCJjcmVhdGVWYWxpZGF0aW9uRXJyb3IiLCJ0eXBlIiwibWVzc2FnZSIsImVycm9ycyIsInByZWZpeERhdGFQYXRocyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFZSxTQUFTQSxPQUFULENBQWlCQyxNQUFqQixFQUF5QjtBQUN0QyxRQUFNRCxPQUFPLEdBQUcsRUFBaEI7O0FBQ0EsT0FBSyxNQUFNLENBQUNFLElBQUQsRUFBT0MsVUFBUCxDQUFYLElBQWlDQyxNQUFNLENBQUNDLE9BQVAsQ0FBZSwyQkFBY0osTUFBZCxDQUFmLENBQWpDLEVBQXdFO0FBQ3RFLFVBQU1LLE1BQU0sR0FBRyx1QkFBV0gsVUFBWCxJQUNYQSxVQURXLEdBRVgscUJBQVNBLFVBQVQsSUFDRUksbUJBQW1CLENBQUNKLFVBQUQsRUFBYUQsSUFBYixDQURyQixHQUVFLElBSk47O0FBS0EsUUFBSSxDQUFDSSxNQUFMLEVBQWE7QUFDWCxZQUFNLElBQUlFLEtBQUosQ0FDSCxtQkFBa0JOLElBQUssK0JBQThCQyxVQUFXLEdBRDdELENBQU47QUFHRDs7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QUNjLFNBQUosQ0FBY1UsZUFBZCxDQUNOTCxLQUFLLENBQUNJLE1BREEsRUFFTCxJQUFHL0IsSUFBSyxFQUZIO0FBSnNCLFNBQTFCLENBQU47QUFTRDs7QUFDRCxhQUFPSSxNQUFNLENBQUNXLEtBQUQsRUFBUSxHQUFHQyxJQUFYLENBQWI7QUFDRCxLQXZCRDtBQXdCRDs7QUFFRCxTQUFPWixNQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc09iamVjdCwgaXNGdW5jdGlvbiB9IGZyb20gJ0BkaXRvanMvdXRpbHMnXG5pbXBvcnQgeyBRdWVyeUZpbHRlcnMgfSBmcm9tICdAL3F1ZXJ5J1xuaW1wb3J0IHsgbWVyZ2VSZXZlcnNlZCB9IGZyb20gJ0AvdXRpbHMnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbHRlcnModmFsdWVzKSB7XG4gIGNvbnN0IGZpbHRlcnMgPSB7fVxuICBmb3IgKGNvbnN0IFtuYW1lLCBkZWZpbml0aW9uXSBvZiBPYmplY3QuZW50cmllcyhtZXJnZVJldmVyc2VkKHZhbHVlcykpKSB7XG4gICAgY29uc3QgZmlsdGVyID0gaXNGdW5jdGlvbihkZWZpbml0aW9uKVxuICAgICAgPyBkZWZpbml0aW9uXG4gICAgICA6IGlzT2JqZWN0KGRlZmluaXRpb24pXG4gICAgICAgID8gY29udmVydE9iamVjdEZpbHRlcihkZWZpbml0aW9uLCBuYW1lKVxuICAgICAgICA6IG51bGxcbiAgICBpZiAoIWZpbHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBmaWx0ZXIgJyR7bmFtZX0nOiBVbnJlY29nbml6ZWQgZGVmaW5pdGlvbjogJHtkZWZpbml0aW9ufS5gXG4gICAgICApXG4gICAgfVxuICAgIGZpbHRlcnNbbmFtZV0gPSB3cmFwV2l0aFZhbGlkYXRpb24oZmlsdGVyLCBuYW1lLCB0aGlzLmFwcClcbiAgfVxuICByZXR1cm4gZmlsdGVyc1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0T2JqZWN0RmlsdGVyKGRlZmluaXRpb24sIG5hbWUpIHtcbiAgY29uc3QgeyBmaWx0ZXIsIHByb3BlcnRpZXMgfSA9IGRlZmluaXRpb25cbiAgaWYgKGlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBhZGRGdW5jdGlvblNldHRpbmdzKGZpbHRlciwgZGVmaW5pdGlvbilcbiAgfSBlbHNlIHtcbiAgICAvLyBDb252ZXJ0IFF1ZXJ5RmlsdGVycyB0byBub3JtYWwgZmlsdGVyIGZ1bmN0aW9uc1xuICAgIGNvbnN0IHF1ZXJ5RmlsdGVyID0gUXVlcnlGaWx0ZXJzLmdldChmaWx0ZXIpXG4gICAgaWYgKCFxdWVyeUZpbHRlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBmaWx0ZXIgJyR7bmFtZX0nOiBVbmtub3duIGZpbHRlciB0eXBlICcke2ZpbHRlcn0nLmBcbiAgICAgIClcbiAgICB9XG4gICAgY29uc3QgZnVuYyA9IHByb3BlcnRpZXNcbiAgICAgID8gKHF1ZXJ5LCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGZpbHRlciBwcm92aWRlcyBtdWx0aXBsZSBwcm9wZXJ0aWVzLCBtYXRjaCB0aGVtXG4gICAgICAgIC8vIGFsbCwgYnV0IGNvbWJpbmUgdGhlIGV4cHJlc3Npb25zIHdpdGggT1IuXG4gICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgcHJvcGVydGllcykge1xuICAgICAgICAgIHF1ZXJ5Lm9yV2hlcmUocXVlcnkgPT4gcXVlcnlGaWx0ZXIocXVlcnksIHByb3BlcnR5LCAuLi5hcmdzKSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgOiAocXVlcnksIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgcXVlcnlGaWx0ZXIocXVlcnksIG5hbWUsIC4uLmFyZ3MpXG4gICAgICB9XG4gICAgcmV0dXJuIGFkZEZ1bmN0aW9uU2V0dGluZ3MoZnVuYywgcXVlcnlGaWx0ZXIpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkRnVuY3Rpb25TZXR0aW5ncyhmaWx0ZXIsIGRlZmluaXRpb24pIHtcbiAgLy8gQ29weSBvdmVyIEBwYXJhbWV0ZXJzKCkgYW5kIEB2YWxpZGF0ZSgpIHNldHRpbmdzXG4gIGZpbHRlci5wYXJhbWV0ZXJzID0gZGVmaW5pdGlvbi5wYXJhbWV0ZXJzXG4gIGZpbHRlci52YWxpZGF0ZSA9IGRlZmluaXRpb24udmFsaWRhdGVcbiAgcmV0dXJuIGZpbHRlclxufVxuXG5mdW5jdGlvbiB3cmFwV2l0aFZhbGlkYXRpb24oZmlsdGVyLCBuYW1lLCBhcHApIHtcbiAgLy8gSWYgcGFyYW1ldGVycyBhcmUgZGVmaW5lZCwgd3JhcCB0aGUgZnVuY3Rpb24gaW4gYSBjbG9zdXJlIHRoYXRcbiAgLy8gcGVyZm9ybXMgcGFyYW1ldGVyIHZhbGlkYXRpb24uLi5cbiAgY29uc3QgZGF0YU5hbWUgPSAncXVlcnknXG4gIGNvbnN0IHZhbGlkYXRvciA9IGZpbHRlciAmJiBhcHAuY29tcGlsZVBhcmFtZXRlcnNWYWxpZGF0b3IoXG4gICAgZmlsdGVyLnBhcmFtZXRlcnMsXG4gICAgeyAuLi5maWx0ZXIudmFsaWRhdGUsIGRhdGFOYW1lIH1cbiAgKVxuICBpZiAodmFsaWRhdG9yPy52YWxpZGF0ZSkge1xuICAgIHJldHVybiAocXVlcnksIC4uLmFyZ3MpID0+IHtcbiAgICAgIC8vIENvbnZlcnQgYXJncyB0byBvYmplY3QgZm9yIHZhbGlkYXRpb246XG4gICAgICBjb25zdCBvYmplY3QgPSB7fVxuICAgICAgbGV0IGluZGV4ID0gMFxuICAgICAgZm9yIChjb25zdCB7IG5hbWUgfSBvZiB2YWxpZGF0b3IubGlzdCkge1xuICAgICAgICAvLyBVc2UgZGF0YU5hbWUgaWYgbm8gbmFtZSBpcyBnaXZlbiwgc2VlOlxuICAgICAgICAvLyBBcHBsaWNhdGlvbi5jb21waWxlUGFyYW1ldGVyc1ZhbGlkYXRvcigpXG4gICAgICAgIG9iamVjdFtuYW1lIHx8IGRhdGFOYW1lXSA9IGFyZ3NbaW5kZXgrK11cbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhbGlkYXRvci52YWxpZGF0ZShvYmplY3QpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aHJvdyBhcHAuY3JlYXRlVmFsaWRhdGlvbkVycm9yKHtcbiAgICAgICAgICB0eXBlOiAnRmlsdGVyVmFsaWRhdGlvbicsXG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgIGBUaGUgcHJvdmlkZWQgZGF0YSBmb3IgcXVlcnkgZmlsdGVyICcke25hbWV9JyBpcyBub3QgdmFsaWRgLFxuICAgICAgICAgIGVycm9yczogYXBwLnZhbGlkYXRvci5wcmVmaXhEYXRhUGF0aHMoXG4gICAgICAgICAgICBlcnJvci5lcnJvcnMsXG4gICAgICAgICAgICBgLiR7bmFtZX1gXG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZpbHRlcihxdWVyeSwgLi4uYXJncylcbiAgICB9XG4gIH1cbiAgLy8gLi4ub3RoZXJ3aXNlIHVzZSB0aGUgZGVmaW5lZCBmaWx0ZXIgZnVuY3Rpb24gdW5tb2RpZmllZC5cbiAgcmV0dXJuIGZpbHRlclxufVxuIl19