"use strict";

exports.__esModule = true;
exports.default = properties;

var _utils = require("../../utils");

var _schema = require("../../schema");

function properties(values) {
  const properties = (0, _utils.mergeReversed)(values);

  const addIdProperty = (name, schema) => {
    if (!(name in properties)) {
      properties[name] = {
        type: 'integer',
        ...schema
      };
    }
  };

  for (const name of this.getIdPropertyArray()) {
    addIdProperty(name, {
      primary: true
    });
  }

  const addRelationProperties = (relation, propName) => {
    const modelClass = relation.ownerModelClass;
    const {
      nullable
    } = modelClass.definition.relations[relation.name];

    for (const property of relation[propName].props) {
      addIdProperty(property, {
        unsigned: true,
        foreign: true,
        index: true,
        ...(nullable && {
          nullable
        })
      });
    }
  };

  for (const relation of Object.values(this.getRelations())) {
    addRelationProperties(relation, 'ownerProp');
  }

  for (const relation of this.getRelatedRelations()) {
    addRelationProperties(relation, 'relatedProp');
  }

  properties[this.uidProp] = {
    type: 'string'
  };
  properties[this.uidRefProp] = {
    type: 'string'
  };
  const ids = [];
  const rest = [];

  for (let [name, property] of Object.entries(properties)) {
    property = (0, _schema.expandSchemaShorthand)(property);
    const entry = [name, property];

    if (property.primary) {
      ids.unshift(entry);
    } else if (property.foreign) {
      ids.push(entry);
    } else {
      rest.push(entry);
    }
  }

  return [...ids, ...rest].reduce((merged, [name, property]) => {
    merged[name] = property;
    return merged;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvZGVmaW5pdGlvbnMvcHJvcGVydGllcy5qcyJdLCJuYW1lcyI6WyJwcm9wZXJ0aWVzIiwidmFsdWVzIiwiYWRkSWRQcm9wZXJ0eSIsIm5hbWUiLCJzY2hlbWEiLCJ0eXBlIiwiZ2V0SWRQcm9wZXJ0eUFycmF5IiwicHJpbWFyeSIsImFkZFJlbGF0aW9uUHJvcGVydGllcyIsInJlbGF0aW9uIiwicHJvcE5hbWUiLCJtb2RlbENsYXNzIiwib3duZXJNb2RlbENsYXNzIiwibnVsbGFibGUiLCJkZWZpbml0aW9uIiwicmVsYXRpb25zIiwicHJvcGVydHkiLCJwcm9wcyIsInVuc2lnbmVkIiwiZm9yZWlnbiIsImluZGV4IiwiT2JqZWN0IiwiZ2V0UmVsYXRpb25zIiwiZ2V0UmVsYXRlZFJlbGF0aW9ucyIsInVpZFByb3AiLCJ1aWRSZWZQcm9wIiwiaWRzIiwicmVzdCIsImVudHJpZXMiLCJlbnRyeSIsInVuc2hpZnQiLCJwdXNoIiwicmVkdWNlIiwibWVyZ2VkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUNBOztBQUVlLFNBQVNBLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCO0FBQ3pDLFFBQU1ELFVBQVUsR0FBRywwQkFBY0MsTUFBZCxDQUFuQjs7QUFFQSxRQUFNQyxhQUFhLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEtBQWtCO0FBQ3RDLFFBQUksRUFBRUQsSUFBSSxJQUFJSCxVQUFWLENBQUosRUFBMkI7QUFDekJBLE1BQUFBLFVBQVUsQ0FBQ0csSUFBRCxDQUFWLEdBQW1CO0FBQ2pCRSxRQUFBQSxJQUFJLEVBQUUsU0FEVztBQUVqQixXQUFHRDtBQUZjLE9BQW5CO0FBSUQ7QUFDRixHQVBEOztBQVNBLE9BQUssTUFBTUQsSUFBWCxJQUFtQixLQUFLRyxrQkFBTCxFQUFuQixFQUE4QztBQUM1Q0osSUFBQUEsYUFBYSxDQUFDQyxJQUFELEVBQU87QUFDbEJJLE1BQUFBLE9BQU8sRUFBRTtBQURTLEtBQVAsQ0FBYjtBQUdEOztBQUVELFFBQU1DLHFCQUFxQixHQUFHLENBQUNDLFFBQUQsRUFBV0MsUUFBWCxLQUF3QjtBQUNwRCxVQUFNQyxVQUFVLEdBQUdGLFFBQVEsQ0FBQ0csZUFBNUI7QUFDQSxVQUFNO0FBQUVDLE1BQUFBO0FBQUYsUUFBZUYsVUFBVSxDQUFDRyxVQUFYLENBQXNCQyxTQUF0QixDQUFnQ04sUUFBUSxDQUFDTixJQUF6QyxDQUFyQjs7QUFDQSxTQUFLLE1BQU1hLFFBQVgsSUFBdUJQLFFBQVEsQ0FBQ0MsUUFBRCxDQUFSLENBQW1CTyxLQUExQyxFQUFpRDtBQUMvQ2YsTUFBQUEsYUFBYSxDQUFDYyxRQUFELEVBQVc7QUFDdEJFLFFBQUFBLFFBQVEsRUFBRSxJQURZO0FBRXRCQyxRQUFBQSxPQUFPLEVBQUUsSUFGYTtBQUd0QkMsUUFBQUEsS0FBSyxFQUFFLElBSGU7QUFJdEIsWUFBSVAsUUFBUSxJQUFJO0FBQUVBLFVBQUFBO0FBQUYsU0FBaEI7QUFKc0IsT0FBWCxDQUFiO0FBTUQ7QUFDRixHQVhEOztBQWFBLE9BQUssTUFBTUosUUFBWCxJQUF1QlksTUFBTSxDQUFDcEIsTUFBUCxDQUFjLEtBQUtxQixZQUFMLEVBQWQsQ0FBdkIsRUFBMkQ7QUFDekRkLElBQUFBLHFCQUFxQixDQUFDQyxRQUFELEVBQVcsV0FBWCxDQUFyQjtBQUNEOztBQUVELE9BQUssTUFBTUEsUUFBWCxJQUF1QixLQUFLYyxtQkFBTCxFQUF2QixFQUFtRDtBQUNqRGYsSUFBQUEscUJBQXFCLENBQUNDLFFBQUQsRUFBVyxhQUFYLENBQXJCO0FBQ0Q7O0FBR0RULEVBQUFBLFVBQVUsQ0FBQyxLQUFLd0IsT0FBTixDQUFWLEdBQTJCO0FBQ3pCbkIsSUFBQUEsSUFBSSxFQUFFO0FBRG1CLEdBQTNCO0FBR0FMLEVBQUFBLFVBQVUsQ0FBQyxLQUFLeUIsVUFBTixDQUFWLEdBQThCO0FBQzVCcEIsSUFBQUEsSUFBSSxFQUFFO0FBRHNCLEdBQTlCO0FBU0EsUUFBTXFCLEdBQUcsR0FBRyxFQUFaO0FBQ0EsUUFBTUMsSUFBSSxHQUFHLEVBQWI7O0FBQ0EsT0FBSyxJQUFJLENBQUN4QixJQUFELEVBQU9hLFFBQVAsQ0FBVCxJQUE2QkssTUFBTSxDQUFDTyxPQUFQLENBQWU1QixVQUFmLENBQTdCLEVBQXlEO0FBQ3ZEZ0IsSUFBQUEsUUFBUSxHQUFHLG1DQUFzQkEsUUFBdEIsQ0FBWDtBQUVBLFVBQU1hLEtBQUssR0FBRyxDQUFDMUIsSUFBRCxFQUFPYSxRQUFQLENBQWQ7O0FBQ0EsUUFBSUEsUUFBUSxDQUFDVCxPQUFiLEVBQXNCO0FBQ3BCbUIsTUFBQUEsR0FBRyxDQUFDSSxPQUFKLENBQVlELEtBQVo7QUFDRCxLQUZELE1BRU8sSUFBSWIsUUFBUSxDQUFDRyxPQUFiLEVBQXNCO0FBQzNCTyxNQUFBQSxHQUFHLENBQUNLLElBQUosQ0FBU0YsS0FBVDtBQUNELEtBRk0sTUFFQTtBQUNMRixNQUFBQSxJQUFJLENBQUNJLElBQUwsQ0FBVUYsS0FBVjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxDQUFDLEdBQUdILEdBQUosRUFBUyxHQUFHQyxJQUFaLEVBQWtCSyxNQUFsQixDQUF5QixDQUFDQyxNQUFELEVBQVMsQ0FBQzlCLElBQUQsRUFBT2EsUUFBUCxDQUFULEtBQThCO0FBQzVEaUIsSUFBQUEsTUFBTSxDQUFDOUIsSUFBRCxDQUFOLEdBQWVhLFFBQWY7QUFDQSxXQUFPaUIsTUFBUDtBQUNELEdBSE0sRUFHSixFQUhJLENBQVA7QUFJRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1lcmdlUmV2ZXJzZWQgfSBmcm9tICdAL3V0aWxzJ1xuaW1wb3J0IHsgZXhwYW5kU2NoZW1hU2hvcnRoYW5kIH0gZnJvbSAnQC9zY2hlbWEnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb3BlcnRpZXModmFsdWVzKSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBtZXJnZVJldmVyc2VkKHZhbHVlcylcbiAgLy8gSW5jbHVkZSBhdXRvLWdlbmVyYXRlZCAnaWQnIHByb3BlcnRpZXMgZm9yIG1vZGVscyBhbmQgcmVsYXRpb25zLlxuICBjb25zdCBhZGRJZFByb3BlcnR5ID0gKG5hbWUsIHNjaGVtYSkgPT4ge1xuICAgIGlmICghKG5hbWUgaW4gcHJvcGVydGllcykpIHtcbiAgICAgIHByb3BlcnRpZXNbbmFtZV0gPSB7XG4gICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgLi4uc2NoZW1hXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuZ2V0SWRQcm9wZXJ0eUFycmF5KCkpIHtcbiAgICBhZGRJZFByb3BlcnR5KG5hbWUsIHtcbiAgICAgIHByaW1hcnk6IHRydWVcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgYWRkUmVsYXRpb25Qcm9wZXJ0aWVzID0gKHJlbGF0aW9uLCBwcm9wTmFtZSkgPT4ge1xuICAgIGNvbnN0IG1vZGVsQ2xhc3MgPSByZWxhdGlvbi5vd25lck1vZGVsQ2xhc3NcbiAgICBjb25zdCB7IG51bGxhYmxlIH0gPSBtb2RlbENsYXNzLmRlZmluaXRpb24ucmVsYXRpb25zW3JlbGF0aW9uLm5hbWVdXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiByZWxhdGlvbltwcm9wTmFtZV0ucHJvcHMpIHtcbiAgICAgIGFkZElkUHJvcGVydHkocHJvcGVydHksIHtcbiAgICAgICAgdW5zaWduZWQ6IHRydWUsXG4gICAgICAgIGZvcmVpZ246IHRydWUsXG4gICAgICAgIGluZGV4OiB0cnVlLFxuICAgICAgICAuLi4obnVsbGFibGUgJiYgeyBudWxsYWJsZSB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmb3IgKGNvbnN0IHJlbGF0aW9uIG9mIE9iamVjdC52YWx1ZXModGhpcy5nZXRSZWxhdGlvbnMoKSkpIHtcbiAgICBhZGRSZWxhdGlvblByb3BlcnRpZXMocmVsYXRpb24sICdvd25lclByb3AnKVxuICB9XG5cbiAgZm9yIChjb25zdCByZWxhdGlvbiBvZiB0aGlzLmdldFJlbGF0ZWRSZWxhdGlvbnMoKSkge1xuICAgIGFkZFJlbGF0aW9uUHJvcGVydGllcyhyZWxhdGlvbiwgJ3JlbGF0ZWRQcm9wJylcbiAgfVxuXG4gIC8vIFN1cHBvcnQgT2JqZWN0aW9uJ3MgI2lkIGFuZCAjcmVmIHJlZmVyZW5jZXMgb24gYWxsIG1vZGVsczpcbiAgcHJvcGVydGllc1t0aGlzLnVpZFByb3BdID0ge1xuICAgIHR5cGU6ICdzdHJpbmcnXG4gIH1cbiAgcHJvcGVydGllc1t0aGlzLnVpZFJlZlByb3BdID0ge1xuICAgIHR5cGU6ICdzdHJpbmcnXG4gIH1cblxuICAvLyBDb252ZXJ0IHJvb3QtbGV2ZWwgc2hvcnQtZm9ybXMsIGZvciBlYXNpZXIgcHJvcGVydGllcyBoYW5kbGluZyBpblxuICAvLyBhdHRyaWJ1dGVzIGFuZCBpZENvbHVtbigpICYgY286XG4gIC8vIC0gYG5hbWU6IHR5cGVgIHRvIGBuYW1lOiB7IHR5cGUgfWBcbiAgLy8gLSBgbmFtZTogWy4uLml0ZW1zXWAgdG8gYG5hbWU6IHsgdHlwZTogJ2FycmF5JywgaXRlbXMgfVxuICAvLyBOT1RFOiBTdWJzdGl0dXRpb25zIG9uIGFsbCBvdGhlciBsZXZlbHMgaGFwcGVuIGluIGNvbnZlcnRTY2hlbWEoKVxuICBjb25zdCBpZHMgPSBbXVxuICBjb25zdCByZXN0ID0gW11cbiAgZm9yIChsZXQgW25hbWUsIHByb3BlcnR5XSBvZiBPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzKSkge1xuICAgIHByb3BlcnR5ID0gZXhwYW5kU2NoZW1hU2hvcnRoYW5kKHByb3BlcnR5KVxuICAgIC8vIEFsc28gc29ydCBwcm9wZXJ0aWVzIGJ5IGtpbmQ6IHByaW1hcnkgaWQgPiBmb3JlaWduIGlkID4gcmVzdDpcbiAgICBjb25zdCBlbnRyeSA9IFtuYW1lLCBwcm9wZXJ0eV1cbiAgICBpZiAocHJvcGVydHkucHJpbWFyeSkge1xuICAgICAgaWRzLnVuc2hpZnQoZW50cnkpXG4gICAgfSBlbHNlIGlmIChwcm9wZXJ0eS5mb3JlaWduKSB7XG4gICAgICBpZHMucHVzaChlbnRyeSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdC5wdXNoKGVudHJ5KVxuICAgIH1cbiAgfVxuICAvLyBGaW5hbGx5IHJlY29tcGlsZSBhIG5ldyBwcm9wZXJ0aWVzIG9iamVjdCBvdXQgb2YgdGhlIHNvcnRlZCBwcm9wZXJ0aWVzLlxuICByZXR1cm4gWy4uLmlkcywgLi4ucmVzdF0ucmVkdWNlKChtZXJnZWQsIFtuYW1lLCBwcm9wZXJ0eV0pID0+IHtcbiAgICBtZXJnZWRbbmFtZV0gPSBwcm9wZXJ0eVxuICAgIHJldHVybiBtZXJnZWRcbiAgfSwge30pXG59XG4iXX0=