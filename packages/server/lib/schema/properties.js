"use strict";

exports.__esModule = true;
exports.convertSchema = convertSchema;
exports.expandProperties = expandProperties;
exports.expandSchemaShorthand = expandSchemaShorthand;

var _utils = require("@ditojs/utils");

function convertSchema(schema, options = {}) {
  if ((0, _utils.isString)(schema)) {
    schema = {
      type: schema
    };
  } else if ((0, _utils.isArray)(schema)) {
    schema = schema.map(entry => convertSchema(entry, options));
  }

  if ((0, _utils.isObject)(schema)) {
    const {
      type
    } = schema;
    const {
      required,
      ...rest
    } = schema;
    schema = rest;

    if ((0, _utils.isString)(type)) {
      const jsonType = jsonTypes[type];

      if (jsonType) {
        schema.type = jsonType;

        if (jsonType === 'object') {
          let setAdditionalProperties = false;

          if (schema.properties) {
            const {
              properties,
              required
            } = expandProperties(schema.properties, options);
            schema.properties = properties;

            if (required.length > 0) {
              schema.required = required;
            }

            setAdditionalProperties = true;
          }

          if (schema.patternProperties) {
            const {
              properties
            } = expandProperties(schema.patternProperties, options);
            schema.patternProperties = properties;
            setAdditionalProperties = true;
          }

          if (setAdditionalProperties) {
            if (!('additionalProperties' in schema)) {
              schema.additionalProperties = false;
            }
          }
        } else if (jsonType === 'array') {
          const {
            items
          } = schema;

          if (items) {
            schema.items = convertSchema(items, options);
          }
        }
      } else if (['date', 'datetime', 'timestamp'].includes(type)) {
        schema.type = ['string', 'object'];
        schema = addFormat(schema, 'date-time');
      } else {
        if (options.useInstanceOf) {
          schema.type = 'object';
          schema.instanceof = type;
        } else {
          delete schema.type;
          schema.$ref = type;

          if (schema.nullable) {
            delete schema.nullable;
            schema = {
              oneOf: [{
                type: 'null'
              }, schema]
            };
          }
        }
      }
    } else {
      const expanded = expandSchemaShorthand(schema);
      schema = expanded !== schema ? convertSchema(expanded, options) : expanded;

      for (const key of ['allOf', 'anyOf', 'oneOf', 'not']) {
        if (key in schema) {
          schema[key] = convertSchema(schema[key], options);
        }
      }
    }

    if (required) {
      schema = addFormat(schema, 'required');
    }

    if (excludeDefaults[schema.default]) {
      delete schema.default;
    }

    if (schema.nullable && schema.enum && !schema.enum.includes(null)) {
      schema.enum.push(null);
    }
  }

  return schema;
}

function expandProperties(schemaProperties, options) {
  const properties = {};
  const required = [];

  for (let [key, property] of Object.entries(schemaProperties)) {
    var _property;

    property = expandSchemaShorthand(property);
    properties[key] = convertSchema(property, options);

    if ((_property = property) != null && _property.required) {
      required.push(key);
    }
  }

  return {
    properties,
    required
  };
}

function expandSchemaShorthand(schema) {
  if ((0, _utils.isString)(schema)) {
    schema = {
      type: schema
    };
  } else if ((0, _utils.isArray)(schema)) {
    schema = {
      type: 'array',
      items: schema.length > 1 ? schema : schema[0],
      default: []
    };
  } else if ((0, _utils.isObject)(schema) && !((0, _utils.isString)(schema.type) || (0, _utils.isString)(schema.$ref) || (0, _utils.isArray)(schema.allOf) || (0, _utils.isArray)(schema.anyOf) || (0, _utils.isArray)(schema.oneOf) || (0, _utils.isObject)(schema.not))) {
    const properties = {};
    const rest = {};

    for (const [key, value] of Object.entries(schema)) {
      if ((0, _utils.isObject)(value) || (0, _utils.isString)(value) || (0, _utils.isArray)(value)) {
        properties[key] = value;
      } else {
        rest[key] = value;
      }
    }

    schema = {
      type: 'object',
      properties,
      ...rest
    };
  }

  return schema;
}

function addFormat(schema, newFormat) {
  let {
    allOf,
    format,
    ...rest
  } = schema;

  if (format || allOf) {
    allOf || (allOf = []);

    if (!allOf.find(({
      format
    }) => format === newFormat)) {
      allOf.push({
        format
      }, {
        format: newFormat
      });
      schema = { ...rest,
        allOf
      };
    }
  } else {
    schema.format = newFormat;
  }

  return schema;
}

const jsonTypes = {
  string: 'string',
  text: 'string',
  number: 'number',
  integer: 'integer',
  boolean: 'boolean',
  object: 'object',
  array: 'array'
};
const excludeDefaults = {
  'now()': true
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,