"use strict";

exports.__esModule = true;
exports.getRelationClass = getRelationClass;
exports.isThroughRelationClass = isThroughRelationClass;
exports.convertRelation = convertRelation;
exports.convertRelations = convertRelations;
exports.addRelationSchemas = addRelationSchemas;

var _objection = require("objection");

var _errors = require("../errors");

var _utils = require("@ditojs/utils");

const relationLookup = {
  belongsTo: _objection.BelongsToOneRelation,
  hasOne: _objection.HasOneRelation,
  hasOneThrough: _objection.HasOneThroughRelation,
  hasMany: _objection.HasManyRelation,
  manyToMany: _objection.ManyToManyRelation
};
const relationClasses = {
  BelongsToOneRelation: _objection.BelongsToOneRelation,
  HasOneRelation: _objection.HasOneRelation,
  HasOneThroughRelation: _objection.HasOneThroughRelation,
  HasManyRelation: _objection.HasManyRelation,
  ManyToManyRelation: _objection.ManyToManyRelation
};
const throughRelationClasses = {
  ManyToManyRelation: _objection.ManyToManyRelation,
  HasOneThroughRelation: _objection.HasOneThroughRelation
};

class ModelReference {
  constructor(reference, models, allowUnknown = false) {
    this.modelName = null;
    this.modelClass = null;
    this.propertyNames = [];

    for (const ref of (0, _utils.asArray)(reference)) {
      const [modelName, propertyName] = (ref == null ? void 0 : ref.split('.')) || [];
      const modelClass = models[modelName];

      if (!modelClass && !allowUnknown) {
        throw new _errors.RelationError(`Unknown model reference: ${ref}`);
      }

      if (!this.modelName) {
        this.modelName = modelName;
        this.modelClass = modelClass;
      } else if (this.modelName !== modelName) {
        throw new _errors.RelationError(`Composite keys need to be defined on the same table: ${ref}`);
      }

      this.propertyNames.push(propertyName);
    }
  }

  asValue(properties) {
    return properties.length > 1 ? properties : properties[0];
  }

  toValue() {
    return this.asValue(this.propertyNames.map(propName => `${this.modelName}.${propName}`));
  }

  toString() {
    const value = this.toValue();
    return (0, _utils.isArray)(value) ? `[${value.join(', ')}]` : value;
  }

  buildThrough(toRef, inverse) {
    const fromName = this.modelName;
    const fromProperties = this.propertyNames;
    const toName = toRef.modelName;
    const toProperties = toRef.propertyNames;

    if (fromProperties.length !== toProperties.length) {
      throw new _errors.RelationError('Unable to create through join for ' + `composite keys from '${this}' to '${toRef}'`);
    }

    const from = [];
    const to = [];

    for (let i = 0; i < fromProperties.length; i++) {
      const fromProperty = fromProperties[i];
      const toProperty = toProperties[i];

      if (fromProperty && toProperty) {
        const throughName = `${fromName}${toName}`;
        const throughFrom = this.getThroughProperty(fromName, fromProperty);
        const throughTo = this.getThroughProperty(toName, toProperty);
        from.push(`${throughName}.${throughFrom}`);
        to.push(`${throughName}.${throughTo}`);
      } else {
        throw new _errors.RelationError(`Unable to create through join from '${this}' to '${to}'`);
      }
    }

    return {
      from: this.asValue(inverse ? to : from),
      to: this.asValue(inverse ? from : to)
    };
  }

  getThroughProperty(name, property) {
    return `${name[0].toLowerCase()}${name.slice(1)}${(0, _utils.capitalize)(property)}`;
  }

}

function getRelationClass(relation) {
  return (0, _utils.isString)(relation) ? relationLookup[(0, _utils.camelize)(relation)] || relationClasses[relation] : _objection.Relation.isPrototypeOf(relation) ? relation : null;
}

function isThroughRelationClass(relationClass) {
  return throughRelationClasses[relationClass.name];
}

function convertRelation(schema, models) {
  let {
    relation,
    from,
    to,
    through,
    inverse,
    modify,
    scope,
    join,
    filter,
    nullable,
    owner,
    ...rest
  } = schema || {};
  const relationClass = getRelationClass(relation);

  if (!relationClass) {
    throw new _errors.RelationError(`Unrecognized relation: ${relation}`);
  } else if (join && !(0, _utils.isString)(relation)) {
    return schema;
  } else {
    from = new ModelReference(from, models, false);
    to = new ModelReference(to, models, false);

    if (isThroughRelationClass(relationClass)) {
      if (!through) {
        through = inverse ? to.buildThrough(from, true) : from.buildThrough(to, false);
      } else if (through.from && through.to) {
        const throughFrom = new ModelReference(through.from, models, true);
        const throughTo = new ModelReference(through.to, models, true);

        if (throughFrom.modelClass || throughTo.modelClass) {
          if (throughFrom.modelClass === throughTo.modelClass) {
            through.modelClass = throughTo.modelClass;
            through.from = throughFrom.toValue();
            through.to = throughTo.toValue();
          } else {
            throw new _errors.RelationError('Both sides of the `through` definition ' + 'need to be on the same join model');
          }
        } else {}
      } else {
        throw new _errors.RelationError('The relation needs a `through.from` and ' + '`through.to` definition');
      }
    } else if (through) {
      throw new _errors.RelationError('Unsupported through join definition');
    }

    modify = modify || filter;

    if ((0, _utils.isObject)(modify)) {
      modify = query => query.find(modify);
    }

    if (scope) {
      const origModify = modify;

      modify = query => {
        query.applyScope(scope);

        if (origModify) {
          query.modify(origModify);
        }
      };
    }

    return {
      relation: relationClass,
      modelClass: to.modelClass,
      join: {
        from: from.toValue(),
        to: to.toValue(),
        ...(through && {
          through
        })
      },
      ...(modify && {
        modify
      }),
      ...rest
    };
  }
}

function convertRelations(ownerModelClass, relations, models) {
  const converted = {};

  for (const [name, relation] of Object.entries(relations)) {
    try {
      converted[name] = convertRelation(relation, models);
    } catch (err) {
      throw new _errors.RelationError(`${ownerModelClass.name}.relations.${name}: ${err.message || err}`);
    }
  }

  return converted;
}

function addRelationSchemas(modelClass, properties) {
  for (const relationInstance of Object.values(modelClass.getRelations())) {
    const {
      name,
      ownerModelClass,
      relatedModelClass
    } = relationInstance;
    const relationDefinition = ownerModelClass.definition.relations[name];
    const isOneToOne = relationInstance.isOneToOne();
    const {
      owner
    } = relationDefinition;
    const $ref = relatedModelClass.name;
    const anyOf = [];

    if (isOneToOne) {
      anyOf.push({
        type: 'null'
      });
    }

    if (!owner) {
      anyOf.push({
        relate: $ref
      });
    }

    anyOf.push({
      $ref
    });
    const items = anyOf.length > 1 ? {
      anyOf
    } : anyOf[0];
    properties[name] = isOneToOne ? items : {
      type: 'array',
      items
    };
  }

  return properties;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,