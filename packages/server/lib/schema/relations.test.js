"use strict";

var _objection = require("objection");

var _models = require("../models");

var _relations = require("./relations");

describe('getRelationClass()', () => {
  it('returns the corresponding relation classes', () => {
    expect((0, _relations.getRelationClass)('belongs-to')).toBe(_objection.BelongsToOneRelation);
    expect((0, _relations.getRelationClass)('has-one')).toBe(_objection.HasOneRelation);
    expect((0, _relations.getRelationClass)('has-one-through')).toBe(_objection.HasOneThroughRelation);
    expect((0, _relations.getRelationClass)('has-many')).toBe(_objection.HasManyRelation);
    expect((0, _relations.getRelationClass)('many-to-many')).toBe(_objection.ManyToManyRelation);
    expect((0, _relations.getRelationClass)('belongsTo')).toBe(_objection.BelongsToOneRelation);
    expect((0, _relations.getRelationClass)('hasOne')).toBe(_objection.HasOneRelation);
    expect((0, _relations.getRelationClass)('hasOneThrough')).toBe(_objection.HasOneThroughRelation);
    expect((0, _relations.getRelationClass)('hasMany')).toBe(_objection.HasManyRelation);
    expect((0, _relations.getRelationClass)('manyToMany')).toBe(_objection.ManyToManyRelation);
    expect((0, _relations.getRelationClass)('BelongsToOneRelation')).toBe(_objection.BelongsToOneRelation);
    expect((0, _relations.getRelationClass)('HasOneRelation')).toBe(_objection.HasOneRelation);
    expect((0, _relations.getRelationClass)('HasOneThroughRelation')).toBe(_objection.HasOneThroughRelation);
    expect((0, _relations.getRelationClass)('HasManyRelation')).toBe(_objection.HasManyRelation);
    expect((0, _relations.getRelationClass)('ManyToManyRelation')).toBe(_objection.ManyToManyRelation);
  });
});
describe('convertRelation()', () => {
  class ModelOne extends _models.Model {}

  class ModelTwo extends _models.Model {}

  const models = {
    ModelOne,
    ModelTwo
  };
  it('converts a belongs-to relation to Objection.js format', () => {
    expect((0, _relations.convertRelation)({
      relation: 'belongs-to',
      from: 'ModelOne.modelTwoId',
      to: 'ModelTwo.id',
      modify: 'myScope'
    }, models)).toEqual({
      relation: _objection.BelongsToOneRelation,
      modelClass: ModelTwo,
      join: {
        from: 'ModelOne.modelTwoId',
        to: 'ModelTwo.id'
      },
      modify: 'myScope'
    });
  });
  it('converts a many-to-many relation to Objection.js format', () => {
    expect((0, _relations.convertRelation)({
      relation: 'many-to-many',
      from: 'ModelOne.id',
      to: 'ModelTwo.id',
      inverse: false
    }, models)).toEqual({
      relation: _objection.ManyToManyRelation,
      modelClass: ModelTwo,
      join: {
        from: 'ModelOne.id',
        through: {
          from: 'ModelOneModelTwo.modelOneId',
          to: 'ModelOneModelTwo.modelTwoId'
        },
        to: 'ModelTwo.id'
      }
    });
  });
  it('converts an inverse many-to-many relation to Objection.js format', () => {
    expect((0, _relations.convertRelation)({
      relation: 'many-to-many',
      from: 'ModelTwo.id',
      to: 'ModelOne.id',
      inverse: true
    }, models)).toEqual({
      relation: _objection.ManyToManyRelation,
      modelClass: ModelOne,
      join: {
        from: 'ModelTwo.id',
        through: {
          from: 'ModelOneModelTwo.modelTwoId',
          to: 'ModelOneModelTwo.modelOneId'
        },
        to: 'ModelOne.id'
      }
    });
  });
  it('preserves Objection.js relation format', () => {
    const relation = {
      relation: _objection.BelongsToOneRelation,
      modelClass: ModelTwo,
      join: {
        from: 'ModelOne.modelTwoId',
        to: 'ModelTwo.id'
      },
      modify: 'myScope'
    };
    expect((0, _relations.convertRelation)(relation, models)).toEqual(relation);
  });
});
describe('addRelationSchemas()', () => {
  class ModelOne extends _models.Model {}

  ModelOne.relations = {
    modelTwo: {
      relation: 'belongs-to',
      from: 'ModelOne.modelTwoId',
      to: 'ModelTwo.id'
    }
  };

  class ModelTwo extends _models.Model {}

  ModelTwo.relations = {
    modelOnes: {
      relation: 'has-many',
      from: 'ModelTwo.id',
      to: 'ModelOne.modelTwoId',
      owner: true
    }
  };
  ModelOne.app = ModelTwo.app = {
    models: {
      ModelOne,
      ModelTwo
    }
  };
  it('adds correct property schema for a belongs-to relation', () => {
    expect((0, _relations.addRelationSchemas)(ModelOne, {})).toEqual({
      modelTwo: {
        anyOf: [{
          type: 'null'
        }, {
          relate: 'ModelTwo'
        }, {
          $ref: 'ModelTwo'
        }]
      }
    });
  });
  it('adds correct property schema for a has-many owner relation', () => {
    expect((0, _relations.addRelationSchemas)(ModelTwo, {})).toEqual({
      modelOnes: {
        type: 'array',
        items: {
          $ref: 'ModelOne'
        }
      }
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,