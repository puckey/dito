"use strict";

exports.__esModule = true;
exports.AssetFile = void 0;

var _path = _interopRequireDefault(require("path"));

var _mimeTypes = _interopRequireDefault(require("mime-types"));

var _dataUriToBuffer = _interopRequireDefault(require("data-uri-to-buffer"));

var _uuid = require("uuid");

var _utils = require("@ditojs/utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SYMBOL_STORAGE = Symbol('storage');
const SYMBOL_DATA = Symbol('data');

class AssetFile {
  constructor(name, data, type) {
    this.key = AssetFile.getUniqueKey(name);
    this.name = name;
    this.type = type;
    this.data = data;
  }

  get storage() {
    return this[SYMBOL_STORAGE] || null;
  }

  get data() {
    return this[SYMBOL_DATA] || null;
  }

  set data(data) {
    if ((0, _utils.isString)(data)) {
      if (data.startsWith('data:')) {
        data = (0, _dataUriToBuffer.default)(data);
        this.type || (this.type = data.type || _mimeTypes.default.lookup(this.name));
      } else {
        data = Buffer.from(data);
        this.type || (this.type = _mimeTypes.default.lookup(this.name) || 'text/plain');
      }
    } else {
      data = Buffer.isBuffer(data) ? data : Buffer.from(data);
      this.type || (this.type = data.type || _mimeTypes.default.lookup(this.name) || 'application/octet-stream');
    }

    this.size = Buffer.byteLength(data);
    setHiddenProperty(this, SYMBOL_DATA, data);
  }

  get path() {
    var _this$storage;

    return (_this$storage = this.storage) == null ? void 0 : _this$storage.getFilePath(this);
  }

  async read() {
    var _this$storage2;

    return ((_this$storage2 = this.storage) == null ? void 0 : _this$storage2.readFile(this)) || null;
  }

  static convert(object, storage) {
    Object.setPrototypeOf(object, AssetFile.prototype);
    setHiddenProperty(object, SYMBOL_STORAGE, storage);
    return object;
  }

  static create({
    name,
    data,
    type
  }) {
    return new AssetFile(name, data, type);
  }

  static getUniqueKey(name) {
    return `${(0, _uuid.v4)()}${_path.default.extname(name).toLowerCase()}`;
  }

}

exports.AssetFile = AssetFile;

function setHiddenProperty(object, key, value) {
  Object.defineProperty(object, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdG9yYWdlL0Fzc2V0RmlsZS5qcyJdLCJuYW1lcyI6WyJTWU1CT0xfU1RPUkFHRSIsIlN5bWJvbCIsIlNZTUJPTF9EQVRBIiwiQXNzZXRGaWxlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZGF0YSIsInR5cGUiLCJrZXkiLCJnZXRVbmlxdWVLZXkiLCJzdG9yYWdlIiwic3RhcnRzV2l0aCIsIm1pbWUiLCJsb29rdXAiLCJCdWZmZXIiLCJmcm9tIiwiaXNCdWZmZXIiLCJzaXplIiwiYnl0ZUxlbmd0aCIsInNldEhpZGRlblByb3BlcnR5IiwicGF0aCIsImdldEZpbGVQYXRoIiwicmVhZCIsInJlYWRGaWxlIiwiY29udmVydCIsIm9iamVjdCIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiZXh0bmFtZSIsInRvTG93ZXJDYXNlIiwidmFsdWUiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLGNBQWMsR0FBR0MsTUFBTSxDQUFDLFNBQUQsQ0FBN0I7QUFDQSxNQUFNQyxXQUFXLEdBQUdELE1BQU0sQ0FBQyxNQUFELENBQTFCOztBQUVPLE1BQU1FLFNBQU4sQ0FBZ0I7QUFDckJDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWFDLElBQWIsRUFBbUI7QUFDNUIsU0FBS0MsR0FBTCxHQUFXTCxTQUFTLENBQUNNLFlBQVYsQ0FBdUJKLElBQXZCLENBQVg7QUFDQSxTQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFFQSxTQUFLRSxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLRCxJQUFMLEdBQVlBLElBQVo7QUFDRDs7QUFFVSxNQUFQSSxPQUFPLEdBQUc7QUFDWixXQUFPLEtBQUtWLGNBQUwsS0FBd0IsSUFBL0I7QUFDRDs7QUFFTyxNQUFKTSxJQUFJLEdBQUc7QUFDVCxXQUFPLEtBQUtKLFdBQUwsS0FBcUIsSUFBNUI7QUFDRDs7QUFFTyxNQUFKSSxJQUFJLENBQUNBLElBQUQsRUFBTztBQUNiLFFBQUkscUJBQVNBLElBQVQsQ0FBSixFQUFvQjtBQUNsQixVQUFJQSxJQUFJLENBQUNLLFVBQUwsQ0FBZ0IsT0FBaEIsQ0FBSixFQUE4QjtBQUM1QkwsUUFBQUEsSUFBSSxHQUFHLDhCQUFnQkEsSUFBaEIsQ0FBUDtBQUNBLGFBQUtDLElBQUwsVUFBS0EsSUFBTCxHQUFjRCxJQUFJLENBQUNDLElBQUwsSUFBYUssbUJBQUtDLE1BQUwsQ0FBWSxLQUFLUixJQUFqQixDQUEzQjtBQUNELE9BSEQsTUFHTztBQUNMQyxRQUFBQSxJQUFJLEdBQUdRLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxJQUFaLENBQVA7QUFDQSxhQUFLQyxJQUFMLFVBQUtBLElBQUwsR0FBY0ssbUJBQUtDLE1BQUwsQ0FBWSxLQUFLUixJQUFqQixLQUEwQixZQUF4QztBQUNEO0FBQ0YsS0FSRCxNQVFPO0FBRUxDLE1BQUFBLElBQUksR0FBR1EsTUFBTSxDQUFDRSxRQUFQLENBQWdCVixJQUFoQixJQUF3QkEsSUFBeEIsR0FBK0JRLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZVCxJQUFaLENBQXRDO0FBQ0EsV0FBS0MsSUFBTCxVQUFLQSxJQUFMLEdBQ0VELElBQUksQ0FBQ0MsSUFBTCxJQUNBSyxtQkFBS0MsTUFBTCxDQUFZLEtBQUtSLElBQWpCLENBREEsSUFFQSwwQkFIRjtBQUtEOztBQUNELFNBQUtZLElBQUwsR0FBWUgsTUFBTSxDQUFDSSxVQUFQLENBQWtCWixJQUFsQixDQUFaO0FBQ0FhLElBQUFBLGlCQUFpQixDQUFDLElBQUQsRUFBT2pCLFdBQVAsRUFBb0JJLElBQXBCLENBQWpCO0FBQ0Q7O0FBRU8sTUFBSmMsSUFBSSxHQUFHO0FBQUE7O0FBQ1QsNEJBQU8sS0FBS1YsT0FBWixxQkFBTyxjQUFjVyxXQUFkLENBQTBCLElBQTFCLENBQVA7QUFDRDs7QUFFUyxRQUFKQyxJQUFJLEdBQUc7QUFBQTs7QUFDWCxXQUFPLHdCQUFLWixPQUFMLG9DQUFjYSxRQUFkLENBQXVCLElBQXZCLE1BQWdDLElBQXZDO0FBQ0Q7O0FBRWEsU0FBUEMsT0FBTyxDQUFDQyxNQUFELEVBQVNmLE9BQVQsRUFBa0I7QUFDOUJnQixJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JGLE1BQXRCLEVBQThCdEIsU0FBUyxDQUFDeUIsU0FBeEM7QUFDQVQsSUFBQUEsaUJBQWlCLENBQUNNLE1BQUQsRUFBU3pCLGNBQVQsRUFBeUJVLE9BQXpCLENBQWpCO0FBQ0EsV0FBT2UsTUFBUDtBQUNEOztBQUVZLFNBQU5JLE1BQU0sQ0FBQztBQUFFeEIsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxJQUFSO0FBQWNDLElBQUFBO0FBQWQsR0FBRCxFQUF1QjtBQUNsQyxXQUFPLElBQUlKLFNBQUosQ0FBY0UsSUFBZCxFQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLENBQVA7QUFDRDs7QUFFa0IsU0FBWkUsWUFBWSxDQUFDSixJQUFELEVBQU87QUFDeEIsV0FBUSxHQUFFLGVBQVMsR0FBRWUsY0FBS1UsT0FBTCxDQUFhekIsSUFBYixFQUFtQjBCLFdBQW5CLEVBQWlDLEVBQXREO0FBQ0Q7O0FBM0RvQjs7OztBQThEdkIsU0FBU1osaUJBQVQsQ0FBMkJNLE1BQTNCLEVBQW1DakIsR0FBbkMsRUFBd0N3QixLQUF4QyxFQUErQztBQUM3Q04sRUFBQUEsTUFBTSxDQUFDTyxjQUFQLENBQXNCUixNQUF0QixFQUE4QmpCLEdBQTlCLEVBQW1DO0FBQ2pDMEIsSUFBQUEsWUFBWSxFQUFFLElBRG1CO0FBRWpDQyxJQUFBQSxVQUFVLEVBQUUsS0FGcUI7QUFHakNDLElBQUFBLFFBQVEsRUFBRSxJQUh1QjtBQUlqQ0osSUFBQUE7QUFKaUMsR0FBbkM7QUFNRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgbWltZSBmcm9tICdtaW1lLXR5cGVzJ1xuaW1wb3J0IGRhdGFVcmlUb0J1ZmZlciBmcm9tICdkYXRhLXVyaS10by1idWZmZXInXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJ1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICdAZGl0b2pzL3V0aWxzJ1xuXG5jb25zdCBTWU1CT0xfU1RPUkFHRSA9IFN5bWJvbCgnc3RvcmFnZScpXG5jb25zdCBTWU1CT0xfREFUQSA9IFN5bWJvbCgnZGF0YScpXG5cbmV4cG9ydCBjbGFzcyBBc3NldEZpbGUge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBkYXRhLCB0eXBlKSB7XG4gICAgdGhpcy5rZXkgPSBBc3NldEZpbGUuZ2V0VW5pcXVlS2V5KG5hbWUpXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIC8vIFNldCBgdHlwZWAgYmVmb3JlIGBkYXRhYCwgc28gaXQgY2FuIGJlIHVzZWQgYXMgZGVmYXVsdCBpbiBgc2V0IGRhdGFgXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMuZGF0YSA9IGRhdGFcbiAgfVxuXG4gIGdldCBzdG9yYWdlKCkge1xuICAgIHJldHVybiB0aGlzW1NZTUJPTF9TVE9SQUdFXSB8fCBudWxsXG4gIH1cblxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpc1tTWU1CT0xfREFUQV0gfHwgbnVsbFxuICB9XG5cbiAgc2V0IGRhdGEoZGF0YSkge1xuICAgIGlmIChpc1N0cmluZyhkYXRhKSkge1xuICAgICAgaWYgKGRhdGEuc3RhcnRzV2l0aCgnZGF0YTonKSkge1xuICAgICAgICBkYXRhID0gZGF0YVVyaVRvQnVmZmVyKGRhdGEpXG4gICAgICAgIHRoaXMudHlwZSB8fD0gZGF0YS50eXBlIHx8IG1pbWUubG9va3VwKHRoaXMubmFtZSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKVxuICAgICAgICB0aGlzLnR5cGUgfHw9IG1pbWUubG9va3VwKHRoaXMubmFtZSkgfHwgJ3RleHQvcGxhaW4nXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEJ1ZmZlciAmIGNvLlxuICAgICAgZGF0YSA9IEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSA/IGRhdGEgOiBCdWZmZXIuZnJvbShkYXRhKVxuICAgICAgdGhpcy50eXBlIHx8PSAoXG4gICAgICAgIGRhdGEudHlwZSB8fFxuICAgICAgICBtaW1lLmxvb2t1cCh0aGlzLm5hbWUpIHx8XG4gICAgICAgICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nXG4gICAgICApXG4gICAgfVxuICAgIHRoaXMuc2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGRhdGEpXG4gICAgc2V0SGlkZGVuUHJvcGVydHkodGhpcywgU1lNQk9MX0RBVEEsIGRhdGEpXG4gIH1cblxuICBnZXQgcGF0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlPy5nZXRGaWxlUGF0aCh0aGlzKVxuICB9XG5cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlPy5yZWFkRmlsZSh0aGlzKSB8fCBudWxsXG4gIH1cblxuICBzdGF0aWMgY29udmVydChvYmplY3QsIHN0b3JhZ2UpIHtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqZWN0LCBBc3NldEZpbGUucHJvdG90eXBlKVxuICAgIHNldEhpZGRlblByb3BlcnR5KG9iamVjdCwgU1lNQk9MX1NUT1JBR0UsIHN0b3JhZ2UpXG4gICAgcmV0dXJuIG9iamVjdFxuICB9XG5cbiAgc3RhdGljIGNyZWF0ZSh7IG5hbWUsIGRhdGEsIHR5cGUgfSkge1xuICAgIHJldHVybiBuZXcgQXNzZXRGaWxlKG5hbWUsIGRhdGEsIHR5cGUpXG4gIH1cblxuICBzdGF0aWMgZ2V0VW5pcXVlS2V5KG5hbWUpIHtcbiAgICByZXR1cm4gYCR7dXVpZHY0KCl9JHtwYXRoLmV4dG5hbWUobmFtZSkudG9Mb3dlckNhc2UoKX1gXG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0SGlkZGVuUHJvcGVydHkob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZVxuICB9KVxufVxuIl19