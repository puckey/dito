"use strict";

exports.__esModule = true;
exports.DiskStorage = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _multer = _interopRequireDefault(require("@koa/multer"));

var _Storage = require("./Storage");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class DiskStorage extends _Storage.Storage {
  constructor(app, config) {
    super(app, config);

    if (!this.path) {
      throw new Error(`Missing configuration (path) for storage ${this.name}`);
    }

    this.storage = _multer.default.diskStorage({
      destination: (req, storageFile, cb) => {
        storageFile.key = this.getUniqueKey(storageFile.originalname);

        const dir = this._getPath(this._getNestedFolder(storageFile.key));

        _fsExtra.default.ensureDir(dir).then(() => cb(null, dir)).catch(cb);
      },
      filename: (req, storageFile, cb) => {
        cb(null, storageFile.key);
      }
    });
  }

  _getFilePath(file) {
    return this._getPath(this._getNestedFolder(file.key), file.key);
  }

  _getFileUrl(file) {
    return this._getUrl(this._getNestedFolder(file.key, true), file.key);
  }

  async _addFile(file, buffer) {
    const filePath = this._getFilePath(file);

    const dir = _path.default.dirname(filePath);

    await _fsExtra.default.ensureDir(dir);
    await _fsExtra.default.writeFile(filePath, buffer);
    return file;
  }

  async _removeFile(file) {
    const filePath = this._getFilePath(file);

    await _fsExtra.default.unlink(filePath);

    const removeIfEmpty = async dir => {
      if ((await _fsExtra.default.readdir(dir)).length === 0) {
        try {
          await _fsExtra.default.rmdir(dir);
        } catch (err) {
          if (err.code !== 'ENOENT') {
            throw err;
          }
        }
      }
    };

    const dir = _path.default.dirname(filePath);

    const parentDir = _path.default.dirname(dir);

    await removeIfEmpty(dir);
    await removeIfEmpty(parentDir);
  }

  async _readFile(file) {
    return _fsExtra.default.readFile(this._getFilePath(file));
  }

  async _listKeys() {
    const readDir = (...parts) => _fsExtra.default.readdir(this._getPath(...parts), {
      withFileTypes: true
    });

    const files = [];
    const list1 = await readDir();
    await Promise.all(list1.map(async level1 => {
      if (level1.isDirectory() && level1.name.length === 1) {
        const list2 = await readDir(level1.name);
        await Promise.all(list2.map(async level2 => {
          if (level2.isDirectory() && level2.name.length === 1) {
            const nestedFolder = this._getPath(level1.name, level2.name);

            for (const file of await _fsExtra.default.readdir(nestedFolder)) {
              if (!file.startsWith('.')) {
                files.push(file);
              }
            }
          }
        }));
      }
    }));
    return files;
  }

  _getNestedFolder(key, posix = false) {
    return (posix ? _path.default.posix : _path.default).join(key[0], key[1]);
  }

}

exports.DiskStorage = DiskStorage;
DiskStorage.type = 'disk';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,