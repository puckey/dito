"use strict";

exports.__esModule = true;
exports.S3Storage = void 0;

var _awsSdk = _interopRequireDefault(require("aws-sdk"));

var _multerS = _interopRequireDefault(require("multer-s3"));

var _fileType = _interopRequireDefault(require("file-type"));

var _isSvg = _interopRequireDefault(require("is-svg"));

var _Storage = require("./Storage");

var _stream = require("stream");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class S3Storage extends _Storage.Storage {
  constructor(app, config) {
    super(app, config);
    const {
      name,
      s3,
      acl,
      bucket,
      ...options
    } = config;
    this.s3 = new _awsSdk.default.S3(s3);
    this.acl = acl;
    this.bucket = bucket;
    this.storage = (0, _multerS.default)({
      s3: this.s3,
      acl,
      bucket,
      ...options,
      key: (req, file, cb) => {
        cb(null, this.getUniqueKey(file.originalname));
      },
      contentType: (req, file, cb) => {
        const {
          mimetype,
          stream
        } = file;

        if (mimetype) {
          cb(null, mimetype);
        } else {
          let data = null;

          const done = type => {
            const outStream = new _stream.PassThrough();
            outStream.write(data);
            stream.pipe(outStream);
            cb(null, type, outStream);
          };

          const onData = chunk => {
            if (!data) {
              var _FileType$fromBuffer;

              const type = (_FileType$fromBuffer = _fileType.default.fromBuffer(chunk)) == null ? void 0 : _FileType$fromBuffer.mime;

              if (type) {
                stream.off('data', onData);
                done(type);
              } else {
                stream.once('end', () => {
                  var _FileType$fromBuffer2;

                  const type = ((_FileType$fromBuffer2 = _fileType.default.fromBuffer(data)) == null ? void 0 : _FileType$fromBuffer2.mime) || ((0, _isSvg.default)(data) ? 'image/svg+xml' : 'application/octet-stream');
                  done(type);
                });
              }
            }

            data = data ? Buffer.concat([data, chunk]) : chunk;
          };

          stream.on('data', onData);
        }
      },
      metadata: (req, file, cb) => {
        const {
          width,
          height
        } = file;

        if (width != null || height != null) {
          cb(null, {
            width: `${width}`,
            height: `${height}`
          });
        } else {
          cb(null, {});
        }
      }
    });
  }

  _getFilePath(_file) {
    return undefined;
  }

  _getFileUrl(file) {
    var _this$_getUrl;

    return (_this$_getUrl = this._getUrl(file.key)) != null ? _this$_getUrl : file.url;
  }

  async _addFile(file, buffer) {
    const data = await this.s3.upload({
      Bucket: this.bucket,
      ACL: this.acl,
      Key: file.key,
      ContentType: file.type,
      Body: buffer
    }).promise();
    return { ...file,
      location: data.Location
    };
  }

  async _removeFile(file) {
    await this.s3.deleteObject({
      Bucket: this.bucket,
      Key: file.key
    }).promise();
  }

  async _readFile(file) {
    const {
      ContentType: type,
      Body: data
    } = await this.s3.getObject({
      Bucket: this.bucket,
      Key: file.key
    }).promise();
    const buffer = Buffer.isBuffer(data) ? data : Buffer.from(data);
    buffer.type = type;
    return buffer;
  }

  async _listKeys() {
    const files = [];
    const params = {
      Bucket: this.bucket
    };
    let result;

    do {
      result = await this.s3.listObjectsV2(params).promise();

      for (const {
        Key: key
      } of result.Contents) {
        files.push(key);
      }

      params.ContinuationToken = result.NextContinuationToken;
    } while (result.IsTruncated);

    return files;
  }

}

exports.S3Storage = S3Storage;
S3Storage.type = 's3';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,