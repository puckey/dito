"use strict";

var _function = require("./function");

describe('describeFunction()', () => {
  it('describes normal functions', () => {
    expect((0, _function.describeFunction)(function (a, b, c) {
      return a + b + c;
    })).toBe('function (a, b, c) { ... }');
  });
  it('describes lambdas with one param and a body', () => {
    expect((0, _function.describeFunction)(a => {
      return a;
    })).toBe('a => { ... }');
  });
  it('describes lambdas with one param and no body', () => {
    expect((0, _function.describeFunction)(a => a)).toBe('a => ...');
  });
  it('describes lambdas with multiple params and a body', () => {
    expect((0, _function.describeFunction)((a, b, c) => {
      return a + b + c;
    })).toBe('(a, b, c) => { ... }');
  });
  it('describes lambdas with multiple params and no body', () => {
    expect((0, _function.describeFunction)((a, b, c) => a + b + c)).toBe('(a, b, c) => ...');
  });
  it('describes async functions', () => {
    expect((0, _function.describeFunction)(async function (a, b, c) {
      return a + b + c;
    })).toBe('async function (a, b, c) { ... }');
  });
  it('describes lambdas with one param and a body', () => {
    expect((0, _function.describeFunction)(async a => {
      return a;
    })).toBe('async a => { ... }');
  });
  it('describes lambdas with one param and no body', () => {
    expect((0, _function.describeFunction)(async a => a)).toBe('async a => ...');
  });
  it('describes lambdas with multiple params and a body', () => {
    expect((0, _function.describeFunction)(async (a, b, c) => {
      return a + b + c;
    })).toBe('async (a, b, c) => { ... }');
  });
  it('describes lambdas with multiple params and no body', () => {
    expect((0, _function.describeFunction)(async (a, b, c) => a + b + c)).toBe('async (a, b, c) => ...');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9mdW5jdGlvbi50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJhIiwiYiIsImMiLCJ0b0JlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBQSxRQUFRLENBQUMsb0JBQUQsRUFBdUIsTUFBTTtBQUNuQ0MsRUFBQUEsRUFBRSxDQUFDLDRCQUFELEVBQStCLE1BQU07QUFDckNDLElBQUFBLE1BQU0sQ0FBQyxnQ0FBaUIsVUFBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWVDLENBQWYsRUFBa0I7QUFBRSxhQUFPRixDQUFDLEdBQUdDLENBQUosR0FBUUMsQ0FBZjtBQUFrQixLQUF2RCxDQUFELENBQU4sQ0FDR0MsSUFESCxDQUNRLDRCQURSO0FBRUQsR0FIQyxDQUFGO0FBS0FMLEVBQUFBLEVBQUUsQ0FBQyw2Q0FBRCxFQUFnRCxNQUFNO0FBQ3REQyxJQUFBQSxNQUFNLENBQUMsZ0NBQWlCQyxDQUFDLElBQUk7QUFBRSxhQUFPQSxDQUFQO0FBQVUsS0FBbEMsQ0FBRCxDQUFOLENBQ0dHLElBREgsQ0FDUSxjQURSO0FBRUQsR0FIQyxDQUFGO0FBS0FMLEVBQUFBLEVBQUUsQ0FBQyw4Q0FBRCxFQUFpRCxNQUFNO0FBQ3ZEQyxJQUFBQSxNQUFNLENBQUMsZ0NBQWlCQyxDQUFDLElBQUlBLENBQXRCLENBQUQsQ0FBTixDQUNHRyxJQURILENBQ1EsVUFEUjtBQUVELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsbURBQUQsRUFBc0QsTUFBTTtBQUM1REMsSUFBQUEsTUFBTSxDQUFDLGdDQUFpQixDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxLQUFhO0FBQUUsYUFBT0YsQ0FBQyxHQUFHQyxDQUFKLEdBQVFDLENBQWY7QUFBa0IsS0FBbEQsQ0FBRCxDQUFOLENBQ0dDLElBREgsQ0FDUSxzQkFEUjtBQUVELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsb0RBQUQsRUFBdUQsTUFBTTtBQUM3REMsSUFBQUEsTUFBTSxDQUFDLGdDQUFpQixDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsQ0FBUCxLQUFhRixDQUFDLEdBQUdDLENBQUosR0FBUUMsQ0FBdEMsQ0FBRCxDQUFOLENBQ0dDLElBREgsQ0FDUSxrQkFEUjtBQUVELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsMkJBQUQsRUFBOEIsTUFBTTtBQUNwQ0MsSUFBQUEsTUFBTSxDQUFDLGdDQUFpQixnQkFBZUMsQ0FBZixFQUFrQkMsQ0FBbEIsRUFBcUJDLENBQXJCLEVBQXdCO0FBQUUsYUFBT0YsQ0FBQyxHQUFHQyxDQUFKLEdBQVFDLENBQWY7QUFBa0IsS0FBN0QsQ0FBRCxDQUFOLENBQ0dDLElBREgsQ0FDUSxrQ0FEUjtBQUVELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsNkNBQUQsRUFBZ0QsTUFBTTtBQUN0REMsSUFBQUEsTUFBTSxDQUFDLGdDQUFpQixNQUFNQyxDQUFOLElBQVc7QUFBRSxhQUFPQSxDQUFQO0FBQVUsS0FBeEMsQ0FBRCxDQUFOLENBQ0dHLElBREgsQ0FDUSxvQkFEUjtBQUVELEdBSEMsQ0FBRjtBQUtBTCxFQUFBQSxFQUFFLENBQUMsOENBQUQsRUFBaUQsTUFBTTtBQUN2REMsSUFBQUEsTUFBTSxDQUFDLGdDQUFpQixNQUFNQyxDQUFOLElBQVdBLENBQTVCLENBQUQsQ0FBTixDQUNHRyxJQURILENBQ1EsZ0JBRFI7QUFFRCxHQUhDLENBQUY7QUFLQUwsRUFBQUEsRUFBRSxDQUFDLG1EQUFELEVBQXNELE1BQU07QUFDNURDLElBQUFBLE1BQU0sQ0FBQyxnQ0FBaUIsT0FBT0MsQ0FBUCxFQUFVQyxDQUFWLEVBQWFDLENBQWIsS0FBbUI7QUFBRSxhQUFPRixDQUFDLEdBQUdDLENBQUosR0FBUUMsQ0FBZjtBQUFrQixLQUF4RCxDQUFELENBQU4sQ0FDR0MsSUFESCxDQUNRLDRCQURSO0FBRUQsR0FIQyxDQUFGO0FBS0FMLEVBQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxNQUFNO0FBQzdEQyxJQUFBQSxNQUFNLENBQUMsZ0NBQWlCLE9BQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiLEtBQW1CRixDQUFDLEdBQUdDLENBQUosR0FBUUMsQ0FBNUMsQ0FBRCxDQUFOLENBQ0dDLElBREgsQ0FDUSx3QkFEUjtBQUVELEdBSEMsQ0FBRjtBQUlELENBbERPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZUZ1bmN0aW9uIH0gZnJvbSAnLi9mdW5jdGlvbidcblxuZGVzY3JpYmUoJ2Rlc2NyaWJlRnVuY3Rpb24oKScsICgpID0+IHtcbiAgaXQoJ2Rlc2NyaWJlcyBub3JtYWwgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGV4cGVjdChkZXNjcmliZUZ1bmN0aW9uKGZ1bmN0aW9uKGEsIGIsIGMpIHsgcmV0dXJuIGEgKyBiICsgYyB9KSlcbiAgICAgIC50b0JlKCdmdW5jdGlvbiAoYSwgYiwgYykgeyAuLi4gfScpXG4gIH0pXG5cbiAgaXQoJ2Rlc2NyaWJlcyBsYW1iZGFzIHdpdGggb25lIHBhcmFtIGFuZCBhIGJvZHknLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlc2NyaWJlRnVuY3Rpb24oYSA9PiB7IHJldHVybiBhIH0pKVxuICAgICAgLnRvQmUoJ2EgPT4geyAuLi4gfScpXG4gIH0pXG5cbiAgaXQoJ2Rlc2NyaWJlcyBsYW1iZGFzIHdpdGggb25lIHBhcmFtIGFuZCBubyBib2R5JywgKCkgPT4ge1xuICAgIGV4cGVjdChkZXNjcmliZUZ1bmN0aW9uKGEgPT4gYSkpXG4gICAgICAudG9CZSgnYSA9PiAuLi4nKVxuICB9KVxuXG4gIGl0KCdkZXNjcmliZXMgbGFtYmRhcyB3aXRoIG11bHRpcGxlIHBhcmFtcyBhbmQgYSBib2R5JywgKCkgPT4ge1xuICAgIGV4cGVjdChkZXNjcmliZUZ1bmN0aW9uKChhLCBiLCBjKSA9PiB7IHJldHVybiBhICsgYiArIGMgfSkpXG4gICAgICAudG9CZSgnKGEsIGIsIGMpID0+IHsgLi4uIH0nKVxuICB9KVxuXG4gIGl0KCdkZXNjcmliZXMgbGFtYmRhcyB3aXRoIG11bHRpcGxlIHBhcmFtcyBhbmQgbm8gYm9keScsICgpID0+IHtcbiAgICBleHBlY3QoZGVzY3JpYmVGdW5jdGlvbigoYSwgYiwgYykgPT4gYSArIGIgKyBjKSlcbiAgICAgIC50b0JlKCcoYSwgYiwgYykgPT4gLi4uJylcbiAgfSlcblxuICBpdCgnZGVzY3JpYmVzIGFzeW5jIGZ1bmN0aW9ucycsICgpID0+IHtcbiAgICBleHBlY3QoZGVzY3JpYmVGdW5jdGlvbihhc3luYyBmdW5jdGlvbihhLCBiLCBjKSB7IHJldHVybiBhICsgYiArIGMgfSkpXG4gICAgICAudG9CZSgnYXN5bmMgZnVuY3Rpb24gKGEsIGIsIGMpIHsgLi4uIH0nKVxuICB9KVxuXG4gIGl0KCdkZXNjcmliZXMgbGFtYmRhcyB3aXRoIG9uZSBwYXJhbSBhbmQgYSBib2R5JywgKCkgPT4ge1xuICAgIGV4cGVjdChkZXNjcmliZUZ1bmN0aW9uKGFzeW5jIGEgPT4geyByZXR1cm4gYSB9KSlcbiAgICAgIC50b0JlKCdhc3luYyBhID0+IHsgLi4uIH0nKVxuICB9KVxuXG4gIGl0KCdkZXNjcmliZXMgbGFtYmRhcyB3aXRoIG9uZSBwYXJhbSBhbmQgbm8gYm9keScsICgpID0+IHtcbiAgICBleHBlY3QoZGVzY3JpYmVGdW5jdGlvbihhc3luYyBhID0+IGEpKVxuICAgICAgLnRvQmUoJ2FzeW5jIGEgPT4gLi4uJylcbiAgfSlcblxuICBpdCgnZGVzY3JpYmVzIGxhbWJkYXMgd2l0aCBtdWx0aXBsZSBwYXJhbXMgYW5kIGEgYm9keScsICgpID0+IHtcbiAgICBleHBlY3QoZGVzY3JpYmVGdW5jdGlvbihhc3luYyAoYSwgYiwgYykgPT4geyByZXR1cm4gYSArIGIgKyBjIH0pKVxuICAgICAgLnRvQmUoJ2FzeW5jIChhLCBiLCBjKSA9PiB7IC4uLiB9JylcbiAgfSlcblxuICBpdCgnZGVzY3JpYmVzIGxhbWJkYXMgd2l0aCBtdWx0aXBsZSBwYXJhbXMgYW5kIG5vIGJvZHknLCAoKSA9PiB7XG4gICAgZXhwZWN0KGRlc2NyaWJlRnVuY3Rpb24oYXN5bmMgKGEsIGIsIGMpID0+IGEgKyBiICsgYykpXG4gICAgICAudG9CZSgnYXN5bmMgKGEsIGIsIGMpID0+IC4uLicpXG4gIH0pXG59KVxuIl19