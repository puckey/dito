"use strict";

var _flatten = require("./flatten");

describe('flatten()', function () {
  it('should support flattening of nested arrays', function () {
    var array = [1, [2, [3, [4]], 5]];
    expect((0, _flatten.flatten)(array)).toStrictEqual([1, 2, 3, 4, 5]);
    expect((0, _flatten.flatten)(array, 1)).toStrictEqual([1, 2, [3, [4]], 5]);
    expect((0, _flatten.flatten)(array, 2)).toStrictEqual([1, 2, 3, [4], 5]);
  });
  it('should work with empty arrays', function () {
    var array = [[], [[]], [[], [[[]]]]];
    expect((0, _flatten.flatten)(array)).toStrictEqual([]);
    expect((0, _flatten.flatten)(array, 1)).toStrictEqual([[], [], [[[]]]]);
    expect((0, _flatten.flatten)(array, 2)).toStrictEqual([[[]]]);
  });
  it('should treat sparse arrays as dense', function () {
    var array = [[1, 2, 3], Array(3)];
    var expected = [1, 2, 3];
    expected.push(undefined, undefined, undefined);
    expect((0, _flatten.flatten)(array)).toStrictEqual(expected);
  });
  it('should return an empty array for non array-like objects', function () {
    expect((0, _flatten.flatten)({
      0: 'a'
    })).toStrictEqual([]);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcnJheS9mbGF0dHRlbi50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiaXQiLCJhcnJheSIsImV4cGVjdCIsInRvU3RyaWN0RXF1YWwiLCJBcnJheSIsImV4cGVjdGVkIiwicHVzaCIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQUEsUUFBUSxDQUFDLFdBQUQsRUFBYyxZQUFNO0FBQzFCQyxFQUFBQSxFQUFFLENBQUMsNENBQUQsRUFBK0MsWUFBTTtBQUNyRCxRQUFNQyxLQUFLLEdBQUcsQ0FBQyxDQUFELEVBQUksQ0FBQyxDQUFELEVBQUksQ0FBQyxDQUFELEVBQUksQ0FBQyxDQUFELENBQUosQ0FBSixFQUFjLENBQWQsQ0FBSixDQUFkO0FBQ0FDLElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixDQUFELENBQU4sQ0FBdUJFLGFBQXZCLENBQXFDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixFQUFhLENBQWIsQ0FBckM7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLHNCQUFRRCxLQUFSLEVBQWUsQ0FBZixDQUFELENBQU4sQ0FBMEJFLGFBQTFCLENBQXdDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFDLENBQUQsRUFBSSxDQUFDLENBQUQsQ0FBSixDQUFQLEVBQWlCLENBQWpCLENBQXhDO0FBQ0FELElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixFQUFlLENBQWYsQ0FBRCxDQUFOLENBQTBCRSxhQUExQixDQUF3QyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQUMsQ0FBRCxDQUFWLEVBQWUsQ0FBZixDQUF4QztBQUNELEdBTEMsQ0FBRjtBQU9BSCxFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBTTtBQUN4QyxRQUFNQyxLQUFLLEdBQUcsQ0FBQyxFQUFELEVBQUssQ0FBQyxFQUFELENBQUwsRUFBVyxDQUFDLEVBQUQsRUFBSyxDQUFDLENBQUMsRUFBRCxDQUFELENBQUwsQ0FBWCxDQUFkO0FBRUFDLElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixDQUFELENBQU4sQ0FBdUJFLGFBQXZCLENBQXFDLEVBQXJDO0FBQ0FELElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixFQUFlLENBQWYsQ0FBRCxDQUFOLENBQTBCRSxhQUExQixDQUF3QyxDQUFDLEVBQUQsRUFBSyxFQUFMLEVBQVMsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxDQUFULENBQXhDO0FBQ0FELElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixFQUFlLENBQWYsQ0FBRCxDQUFOLENBQTBCRSxhQUExQixDQUF3QyxDQUFDLENBQUMsRUFBRCxDQUFELENBQXhDO0FBQ0QsR0FOQyxDQUFGO0FBUUFILEVBQUFBLEVBQUUsQ0FBQyxxQ0FBRCxFQUF3QyxZQUFNO0FBQzlDLFFBQU1DLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQUQsRUFBWUcsS0FBSyxDQUFDLENBQUQsQ0FBakIsQ0FBZDtBQUNBLFFBQU1DLFFBQVEsR0FBRyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxDQUFqQjtBQUNBQSxJQUFBQSxRQUFRLENBQUNDLElBQVQsQ0FBY0MsU0FBZCxFQUF5QkEsU0FBekIsRUFBb0NBLFNBQXBDO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQyxzQkFBUUQsS0FBUixDQUFELENBQU4sQ0FBdUJFLGFBQXZCLENBQXFDRSxRQUFyQztBQUNELEdBTEMsQ0FBRjtBQU9BTCxFQUFBQSxFQUFFLENBQUMseURBQUQsRUFBNEQsWUFBTTtBQUNsRUUsSUFBQUEsTUFBTSxDQUFDLHNCQUFRO0FBQUUsU0FBRztBQUFMLEtBQVIsQ0FBRCxDQUFOLENBQTRCQyxhQUE1QixDQUEwQyxFQUExQztBQUNELEdBRkMsQ0FBRjtBQUdELENBMUJPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi9mbGF0dGVuJ1xuXG5kZXNjcmliZSgnZmxhdHRlbigpJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHN1cHBvcnQgZmxhdHRlbmluZyBvZiBuZXN0ZWQgYXJyYXlzJywgKCkgPT4ge1xuICAgIGNvbnN0IGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dXG4gICAgZXhwZWN0KGZsYXR0ZW4oYXJyYXkpKS50b1N0cmljdEVxdWFsKFsxLCAyLCAzLCA0LCA1XSlcbiAgICBleHBlY3QoZmxhdHRlbihhcnJheSwgMSkpLnRvU3RyaWN0RXF1YWwoWzEsIDIsIFszLCBbNF1dLCA1XSlcbiAgICBleHBlY3QoZmxhdHRlbihhcnJheSwgMikpLnRvU3RyaWN0RXF1YWwoWzEsIDIsIDMsIFs0XSwgNV0pXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggZW1wdHkgYXJyYXlzJywgKCkgPT4ge1xuICAgIGNvbnN0IGFycmF5ID0gW1tdLCBbW11dLCBbW10sIFtbW11dXV1dXG5cbiAgICBleHBlY3QoZmxhdHRlbihhcnJheSkpLnRvU3RyaWN0RXF1YWwoW10pXG4gICAgZXhwZWN0KGZsYXR0ZW4oYXJyYXksIDEpKS50b1N0cmljdEVxdWFsKFtbXSwgW10sIFtbW11dXV0pXG4gICAgZXhwZWN0KGZsYXR0ZW4oYXJyYXksIDIpKS50b1N0cmljdEVxdWFsKFtbW11dXSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgYXJyYXkgPSBbWzEsIDIsIDNdLCBBcnJheSgzKV1cbiAgICBjb25zdCBleHBlY3RlZCA9IFsxLCAyLCAzXVxuICAgIGV4cGVjdGVkLnB1c2godW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZClcbiAgICBleHBlY3QoZmxhdHRlbihhcnJheSkpLnRvU3RyaWN0RXF1YWwoZXhwZWN0ZWQpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZW1wdHkgYXJyYXkgZm9yIG5vbiBhcnJheS1saWtlIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGZsYXR0ZW4oeyAwOiAnYScgfSkpLnRvU3RyaWN0RXF1YWwoW10pXG4gIH0pXG59KVxuIl19