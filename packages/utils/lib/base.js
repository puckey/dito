"use strict";

exports.__esModule = true;
exports.isPlainObject = isPlainObject;
exports.isObject = isObject;
exports.isFunction = isFunction;
exports.isDate = isDate;
exports.isRegExp = isRegExp;
exports.isPromise = isPromise;
exports.isAsync = isAsync;
exports.isArrayLike = isArrayLike;
exports.isEmpty = isEmpty;
exports.asObject = asObject;
exports.asArray = asArray;
exports.asFunction = asFunction;
exports.isInteger = exports.isBoolean = exports.isString = exports.isNumber = exports.is = exports.isArray = void 0;

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.object.is.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.number.is-integer.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.symbol.to-string-tag.js");

require("core-js/modules/es.json.to-string-tag.js");

require("core-js/modules/es.math.to-string-tag.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.number.max-safe-integer.js");

require("core-js/modules/es.object.keys.js");

var isArray = Array.isArray;
exports.isArray = isArray;
var toString = Object.prototype.toString;

var is = Object.is || function (x, y) {
  return x === y ? x !== 0 || 1 / x === 1 / y : x !== x && y !== y;
};

exports.is = is;

function isPlainObject(arg) {
  var ctor = arg == null ? void 0 : arg.constructor;
  return !!arg && (!ctor || ctor === Object || ctor.name === 'Object');
}

function isObject(arg) {
  return !!arg && typeof arg === 'object' && !isArray(arg);
}

function isFunction(arg) {
  return !!arg && typeof arg === 'function';
}

function getPrimitiveCheck(name) {
  var typeName = name.toLowerCase();
  var toStringName = "[object " + name + "]";
  return function (val) {
    var type = typeof val;
    return type === typeName || !!val && type === 'object' && toString.call(val) === toStringName;
  };
}

var isNumber = getPrimitiveCheck('Number');
exports.isNumber = isNumber;
var isString = getPrimitiveCheck('String');
exports.isString = isString;
var isBoolean = getPrimitiveCheck('Boolean');
exports.isBoolean = isBoolean;

function isDate(arg) {
  return !!arg && toString.call(arg) === '[object Date]';
}

function isRegExp(arg) {
  return !!arg && toString.call(arg) === '[object RegExp]';
}

function isPromise(arg) {
  return !!arg && isFunction(arg.then) && isFunction(arg.catch);
}

var isInteger = Number.isInteger || function isInteger(arg) {
  return isNumber(arg) && isFinite(arg) && Math.floor(arg) === arg;
};

exports.isInteger = isInteger;

function isAsync(arg) {
  return (arg == null ? void 0 : arg[Symbol.toStringTag]) === 'AsyncFunction';
}

function isArrayLike(arg) {
  var length = arg == null ? void 0 : arg.length;
  return length != null && !isFunction(arg) && isNumber(length) && length >= 0 && length <= Number.MAX_SAFE_INTEGER;
}

function isEmpty(arg) {
  return arg == null || isArrayLike(arg) && arg.length === 0 || isObject(arg) && Object.keys(arg).length === 0;
}

function asObject(arg) {
  return arg != null ? Object(arg) : arg;
}

function asArray(arg) {
  return isArray(arg) ? arg : arg !== undefined ? [arg] : [];
}

function asFunction(arg) {
  return isFunction(arg) ? arg : function () {
    return arg;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,