"use strict";

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

var _base = require("./base");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var object = {
  a: 1
};
var array = [1, 2, 3];
var string = 'a';
var number = 1;
var boolean = true;
var date = new Date();
var regexp = /x/;
var symbol = Symbol('a');
var instance = new (function () {
  function _class() {}

  return _class;
}())();
var promise = new Promise(function () {});

var func = function func() {};

var lambda = function lambda() {};

var asyncFunc = function () {
  var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function asyncFunc() {
    return _ref.apply(this, arguments);
  };
}();

var asyncLambda = function () {
  var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function asyncLambda() {
    return _ref2.apply(this, arguments);
  };
}();

describe('isPlainObject()', function () {
  describe.each([[null, false], [object, true], [array, false], [string, false], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isPlainObject(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isPlainObject)(value)).toBe(expected);
    });
  });
});
describe('isObject()', function () {
  describe.each([[null, false], [object, true], [array, false], [string, false], [number, false], [boolean, false], [Object(number), true], [Object(string), true], [Object(boolean), true], [date, true], [regexp, true], [symbol, false], [instance, true], [promise, true], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isObject(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isObject)(value)).toBe(expected);
    });
  });
});
describe('isArray()', function () {
  describe.each([[null, false], [object, false], [array, true], [string, false], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isArray(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isArray)(value)).toBe(expected);
    });
  });
});
describe('isFunction()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, true], [lambda, true], [asyncFunc, true], [asyncLambda, true]])('isFunction(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isFunction)(value)).toBe(expected);
    });
  });
});
describe('isNumber()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, true], [Object(number), true], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isNumber(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isNumber)(value)).toBe(expected);
    });
  });
});
describe('isInteger()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, true], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isInteger(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isInteger)(value)).toBe(expected);
    });
  });
  describe.each([13, 123, 0, -0, 1, -1, +1])('isInteger(%o)', function (str) {
    it('returns true', function () {
      expect((0, _base.isInteger)(str)).toBe(true);
    });
  });
  describe.each([-0.00000000001, 123.123])('isInteger(%o)', function (str) {
    it('returns false', function () {
      expect((0, _base.isInteger)(str)).toBe(false);
    });
  });
});
describe('isString()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, true], [Object(string), true], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isString(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isString)(value)).toBe(expected);
    });
  });
});
describe('isBoolean()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, true], [Object(boolean), true], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isBoolean(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isBoolean)(value)).toBe(expected);
    });
  });
});
describe('isDate()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, false], [date, true], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isDate(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isDate)(value)).toBe(expected);
    });
  });
});
describe('isRegExp()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, false], [date, false], [regexp, true], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isRegExp(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isRegExp)(value)).toBe(expected);
    });
  });
});
describe('isPromise()', function () {
  var thenable = {
    then: function then() {}
  };
  var thenableCatchable = {
    then: function then() {},
    catch: function _catch() {}
  };
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, true], [thenable, false], [thenableCatchable, true], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isPromise(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isPromise)(value)).toBe(expected);
    });
  });
});
describe('isAsync()', function () {
  describe.each([[null, false], [object, false], [array, false], [string, false], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, true], [asyncLambda, true]])('isAsync(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isAsync)(value)).toBe(expected);
    });
  });
});
describe('isArrayLike()', function () {
  describe.each([[null, false], [object, false], [array, true], [string, true], [number, false], [boolean, false], [date, false], [regexp, false], [symbol, false], [instance, false], [promise, false], [func, false], [lambda, false], [asyncFunc, false], [asyncLambda, false]])('isArrayLike(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isArrayLike)(value)).toBe(expected);
    });
  });
});
describe('isEmpty()', function () {
  describe.each([[null, true], [object, false], [{}, true], [array, false], [[], true], [string, false], ['', true]])('isEmpty(%o)', function (value, expected) {
    it("returns " + expected, function () {
      expect((0, _base.isEmpty)(value)).toBe(expected);
    });
  });
});
describe('asObject()', function () {
  it('returns received objects', function () {
    expect((0, _base.asObject)(object)).toBe(object);
  });
  it('converts a number to an object', function () {
    var actual = (0, _base.asObject)(number);
    expect(actual).toBeInstanceOf(Object);
    expect(actual.valueOf()).toBe(number);
  });
  it('converts a string to an object', function () {
    var actual = (0, _base.asObject)(string);
    expect(actual).toBeInstanceOf(Object);
    expect(actual.valueOf()).toBe(string);
  });
  it('converts a boolean to an object', function () {
    var actual = (0, _base.asObject)(boolean);
    expect(actual).toBeInstanceOf(Object);
    expect(actual.valueOf()).toBe(boolean);
  });
  it('does not convert null or undefined', function () {
    expect((0, _base.asObject)(null)).toBe(null);
    expect((0, _base.asObject)(undefined)).toBe(undefined);
  });
});
describe('asArray()', function () {
  it('returns received objects', function () {
    expect((0, _base.asArray)(array)).toBe(array);
  });
  it('converts a primitive value to an array', function () {
    expect((0, _base.asArray)(number)).toStrictEqual([number]);
  });
  it('converts `null` to an array containing `null`', function () {
    expect((0, _base.asArray)(null)).toStrictEqual([null]);
  });
  it('converts `undefined` to an empty array', function () {
    expect((0, _base.asArray)(undefined)).toStrictEqual([]);
  });
});
describe('asFunction()', function () {
  it('returns received functions', function () {
    expect((0, _base.asFunction)(func)).toBe(func);
  });
  it('converts a value to a function returning this value', function () {
    var actual = (0, _base.asFunction)(number);
    expect(actual).toBeInstanceOf(Function);
    expect(actual()).toEqual(number);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,