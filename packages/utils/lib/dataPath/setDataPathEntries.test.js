"use strict";

var _setDataPathEntries = require("./setDataPathEntries");

describe('setDataPathEntries()', function () {
  var data = {
    object: {
      array: [{}],
      number: 10
    }
  };
  var add = {
    prop: 'new'
  };
  it('should add data at a path to a given object and array', function () {
    expect(function () {
      return (0, _setDataPathEntries.setDataPathEntries)(data, {
        'object.array[0].added': add,
        'object.array[1]': add
      });
    }).not.toThrow();
    expect(data.object.array[0].added).toStrictEqual(add);
    expect(data.object.array[1]).toStrictEqual(add);
  });
  it('should throw an error with faulty paths', function () {
    expect(function () {
      return (0, _setDataPathEntries.setDataPathEntries)(data, {
        'object/unknown/prop': add
      });
    }).toThrow();
  });
  it('should throw an error with invalid target', function () {
    expect(function () {
      return (0, _setDataPathEntries.setDataPathEntries)(data, {
        'object/number/invalid': add
      });
    }).toThrow('Invalid path: object/number/invalid');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhUGF0aC9zZXREYXRhUGF0aEVudHJpZXMudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsImRhdGEiLCJvYmplY3QiLCJhcnJheSIsIm51bWJlciIsImFkZCIsInByb3AiLCJpdCIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3ciLCJhZGRlZCIsInRvU3RyaWN0RXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUFBLFFBQVEsQ0FBQyxzQkFBRCxFQUF5QixZQUFNO0FBQ3JDLE1BQU1DLElBQUksR0FBRztBQUNYQyxJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsS0FBSyxFQUFFLENBQ0wsRUFESyxDQUREO0FBSU5DLE1BQUFBLE1BQU0sRUFBRTtBQUpGO0FBREcsR0FBYjtBQVNBLE1BQU1DLEdBQUcsR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUU7QUFBUixHQUFaO0FBRUFDLEVBQUFBLEVBQUUsQ0FBQyx1REFBRCxFQUEwRCxZQUFNO0FBQ2hFQyxJQUFBQSxNQUFNLENBQUM7QUFBQSxhQUFNLDRDQUFtQlAsSUFBbkIsRUFBeUI7QUFDcEMsaUNBQXlCSSxHQURXO0FBRXBDLDJCQUFtQkE7QUFGaUIsT0FBekIsQ0FBTjtBQUFBLEtBQUQsQ0FBTixDQUlHSSxHQUpILENBSU9DLE9BSlA7QUFLQUYsSUFBQUEsTUFBTSxDQUFDUCxJQUFJLENBQUNDLE1BQUwsQ0FBWUMsS0FBWixDQUFrQixDQUFsQixFQUFxQlEsS0FBdEIsQ0FBTixDQUFtQ0MsYUFBbkMsQ0FBaURQLEdBQWpEO0FBQ0FHLElBQUFBLE1BQU0sQ0FBQ1AsSUFBSSxDQUFDQyxNQUFMLENBQVlDLEtBQVosQ0FBa0IsQ0FBbEIsQ0FBRCxDQUFOLENBQTZCUyxhQUE3QixDQUEyQ1AsR0FBM0M7QUFDRCxHQVJDLENBQUY7QUFVQUUsRUFBQUEsRUFBRSxDQUFDLHlDQUFELEVBQTRDLFlBQU07QUFDbERDLElBQUFBLE1BQU0sQ0FBQztBQUFBLGFBQU0sNENBQW1CUCxJQUFuQixFQUF5QjtBQUFFLCtCQUF1Qkk7QUFBekIsT0FBekIsQ0FBTjtBQUFBLEtBQUQsQ0FBTixDQUNHSyxPQURIO0FBRUQsR0FIQyxDQUFGO0FBS0FILEVBQUFBLEVBQUUsQ0FBQywyQ0FBRCxFQUE4QyxZQUFNO0FBQ3BEQyxJQUFBQSxNQUFNLENBQUM7QUFBQSxhQUFNLDRDQUFtQlAsSUFBbkIsRUFBeUI7QUFBRSxpQ0FBeUJJO0FBQTNCLE9BQXpCLENBQU47QUFBQSxLQUFELENBQU4sQ0FDR0ssT0FESCxDQUNXLHFDQURYO0FBRUQsR0FIQyxDQUFGO0FBSUQsQ0EvQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNldERhdGFQYXRoRW50cmllcyB9IGZyb20gJy4vc2V0RGF0YVBhdGhFbnRyaWVzJ1xuXG5kZXNjcmliZSgnc2V0RGF0YVBhdGhFbnRyaWVzKCknLCAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgb2JqZWN0OiB7XG4gICAgICBhcnJheTogW1xuICAgICAgICB7fVxuICAgICAgXSxcbiAgICAgIG51bWJlcjogMTBcbiAgICB9XG4gIH1cblxuICBjb25zdCBhZGQgPSB7IHByb3A6ICduZXcnIH1cblxuICBpdCgnc2hvdWxkIGFkZCBkYXRhIGF0IGEgcGF0aCB0byBhIGdpdmVuIG9iamVjdCBhbmQgYXJyYXknLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHNldERhdGFQYXRoRW50cmllcyhkYXRhLCB7XG4gICAgICAnb2JqZWN0LmFycmF5WzBdLmFkZGVkJzogYWRkLFxuICAgICAgJ29iamVjdC5hcnJheVsxXSc6IGFkZFxuICAgIH0pKVxuICAgICAgLm5vdC50b1Rocm93KClcbiAgICBleHBlY3QoZGF0YS5vYmplY3QuYXJyYXlbMF0uYWRkZWQpLnRvU3RyaWN0RXF1YWwoYWRkKVxuICAgIGV4cGVjdChkYXRhLm9iamVjdC5hcnJheVsxXSkudG9TdHJpY3RFcXVhbChhZGQpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aXRoIGZhdWx0eSBwYXRocycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gc2V0RGF0YVBhdGhFbnRyaWVzKGRhdGEsIHsgJ29iamVjdC91bmtub3duL3Byb3AnOiBhZGQgfSkpXG4gICAgICAudG9UaHJvdygpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aXRoIGludmFsaWQgdGFyZ2V0JywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBzZXREYXRhUGF0aEVudHJpZXMoZGF0YSwgeyAnb2JqZWN0L251bWJlci9pbnZhbGlkJzogYWRkIH0pKVxuICAgICAgLnRvVGhyb3coJ0ludmFsaWQgcGF0aDogb2JqZWN0L251bWJlci9pbnZhbGlkJylcbiAgfSlcbn0pXG4iXX0=