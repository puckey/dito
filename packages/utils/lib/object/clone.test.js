"use strict";

var _clone = require("./clone");

describe('clone()', function () {
  it('should clone objects', function () {
    var object = {
      a: 1,
      b: 2
    };
    var copy = (0, _clone.clone)(object);
    expect(copy).toEqual(object);
    expect(copy).not.toBe(object);
  });
  it('should clone arrays', function () {
    var array = [1, 2, 3];
    var copy = (0, _clone.clone)(array);
    expect(copy).toStrictEqual(array);
    expect(copy).not.toBe(array);
  });
  it('should clone dates', function () {
    var date = new Date(2012, 5, 9);
    var copy = (0, _clone.clone)(date);
    expect(copy).toStrictEqual(date);
    expect(copy).not.toBe(date);
  });
  it('should clone regular expressions', function () {
    var regexp = /regexp/gi;
    var copy = (0, _clone.clone)(regexp);
    expect(copy).toStrictEqual(regexp);
    expect(copy).not.toBe(regexp);
  });
  it('should return functions unmodified', function () {
    var func = function func() {};

    expect((0, _clone.clone)(func)).toBe(func);
  });
  it('should clone nested objects and arrays', function () {
    var object = {
      a: [1, 2, 3],
      b: {
        c: 4,
        d: 5
      }
    };
    var copy = (0, _clone.clone)(object);
    expect(copy).toStrictEqual(object);
    expect(copy).not.toBe(object);
    expect(copy.a).not.toBe(object.a);
    expect(copy.b).not.toBe(object.b);
  });
  it('should use clone() methods if available', function () {
    var object = {
      a: 1,
      clone: jest.fn(function () {
        return {
          b: 2
        };
      })
    };
    var copy = (0, _clone.clone)(object);
    expect(object.clone).toBeCalledTimes(1);
    expect(copy).toStrictEqual({
      b: 2
    });
  });
  it('should transform cloned values by `callback`', function () {
    var object = {
      a: {
        b: 1,
        c: 2
      },
      d: {
        e: 3,
        f: 4
      }
    };
    var copy = (0, _clone.clone)(object, function (value) {
      if (typeof value === 'object') {
        value.g = 5;
      }
    });
    var expected = {
      a: {
        b: 1,
        c: 2,
        g: 5
      },
      d: {
        e: 3,
        f: 4,
        g: 5
      },
      g: 5
    };
    expect(copy).toStrictEqual(expected);
  });
  it('should call `callback` after cloning all children', function () {
    var array = [{
      a: 1,
      b: 2
    }, {
      a: 3,
      b: 4
    }];
    var copy = (0, _clone.clone)(array, function (value) {
      if (typeof value === 'object') {
        delete value.b;
      }
    });
    var expected = [{
      a: 1
    }, {
      a: 3
    }];
    expect(copy).toStrictEqual(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,