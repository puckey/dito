"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.array.filter.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.array.splice.js");

require("core-js/modules/es.regexp.exec.js");

var _equals = require("./equals");

describe('equals()', function () {
  var symbol1 = Symbol('a');
  var symbol2 = Symbol('b');
  describe.each([[1, 1, true], [1, Object(1), true], [1, '1', false], [1, 2, false], [-0, -0, true], [0, 0, true], [0, Object(0), true], [Object(0), Object(0), true], [-0, 0, true], [0, '0', false], [0, null, false], [NaN, NaN, true], [NaN, Object(NaN), true], [Object(NaN), Object(NaN), true], [NaN, 'a', false], [NaN, Infinity, false], ['a', 'a', true], ['a', Object('a'), true], [Object('a'), Object('a'), true], ['a', 'b', false], ['a', ['a'], false], [true, true, true], [true, Object(true), true], [Object(true), Object(true), true], [true, 1, false], [true, 'a', false], [false, false, true], [false, Object(false), true], [Object(false), Object(false), true], [false, 0, false], [false, '', false], [symbol1, symbol1, true], [symbol1, Object(symbol1), true], [Object(symbol1), Object(symbol1), true], [symbol1, symbol2, false], [null, null, true], [null, undefined, false], [null, {}, false], [null, '', false], [undefined, undefined, true], [undefined, null, false], [undefined, '', false]])('equals(%o, %o) (should compare primitives)', function (a, b, expected) {
    it("returns " + expected, function () {
      expect((0, _equals.equals)(a, b)).toBe(expected);
    });
  });
  it('should compare arrays', function () {
    var array1 = [true, null, 1, 'a', undefined];
    var array2 = [true, null, 1, 'a', undefined];
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = [[1, 2, 3], new Date(2012, 4, 23), /x/, {
      e: 1
    }];
    array2 = [[1, 2, 3], new Date(2012, 4, 23), /x/, {
      e: 1
    }];
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = [1];
    array1[2] = 3;
    array2 = [1];
    array2[1] = undefined;
    array2[2] = 3;
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = [Object(1), false, Object('a'), /x/, new Date(2012, 4, 23), ['a', 'b', [Object('c')]], {
      a: 1
    }];
    array2 = [1, Object(false), 'a', /x/, new Date(2012, 4, 23), ['a', Object('b'), ['c']], {
      a: 1
    }];
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = [1, 2, 3];
    array2 = [3, 2, 1];
    expect((0, _equals.equals)(array1, array2)).toBe(false);
    array1 = [1, 2];
    array2 = [1, 2, 3];
    expect((0, _equals.equals)(array1, array2)).toBe(false);
  });
  it("should treat arrays with identical values but different non-index properties as equal", function () {
    var array1 = [1, 2, 3];
    var array2 = [1, 2, 3];
    array1.every = array1.filter = array1.forEach = array1.indexOf = array1.lastIndexOf = array1.map = array1.some = array1.reduce = array1.reduceRight = null;
    array2.concat = array2.join = array2.pop = array2.reverse = array2.shift = array2.slice = array2.sort = array2.splice = array2.unshift = null;
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = [1, 2, 3];
    array1.a = 1;
    array2 = [1, 2, 3];
    array2.b = 1;
    expect((0, _equals.equals)(array1, array2)).toBe(true);
    array1 = /c/.exec('abcde');
    array2 = ['c'];
    expect((0, _equals.equals)(array1, array2)).toBe(true);
  });
  it('should compare sparse arrays', function () {
    var array = Array(1);
    expect((0, _equals.equals)(array, Array(1))).toBe(true);
    expect((0, _equals.equals)(array, [undefined])).toBe(true);
    expect((0, _equals.equals)(array, Array(2))).toBe(false);
  });
  it('should compare plain objects', function () {
    var object1 = {
      a: true,
      b: null,
      c: 1,
      d: 'a',
      e: undefined
    };
    var object2 = {
      a: true,
      b: null,
      c: 1,
      d: 'a',
      e: undefined
    };
    expect((0, _equals.equals)(object1, object2)).toBe(true);
    object1 = {
      a: [1, 2, 3],
      b: new Date(2012, 4, 23),
      c: /x/,
      d: {
        e: 1
      }
    };
    object2 = {
      a: [1, 2, 3],
      b: new Date(2012, 4, 23),
      c: /x/,
      d: {
        e: 1
      }
    };
    expect((0, _equals.equals)(object1, object2)).toBe(true);
    object1 = {
      a: 1,
      b: 2,
      c: 3
    };
    object2 = {
      a: 3,
      b: 2,
      c: 1
    };
    expect((0, _equals.equals)(object1, object2)).toBe(false);
    object1 = {
      a: 1,
      b: 2,
      c: 3
    };
    object2 = {
      d: 1,
      e: 2,
      f: 3
    };
    expect((0, _equals.equals)(object1, object2)).toBe(false);
    object1 = {
      a: 1,
      b: 2
    };
    object2 = {
      a: 1,
      b: 2,
      c: 3
    };
    expect((0, _equals.equals)(object1, object2)).toBe(false);
  });
  it('should compare objects regardless of key order', function () {
    var object1 = {
      a: 1,
      b: 2,
      c: 3
    };
    var object2 = {
      c: 3,
      a: 1,
      b: 2
    };
    expect((0, _equals.equals)(object1, object2)).toBe(true);
  });
  it('should compare nested objects', function () {
    function noop() {}

    var object1 = {
      a: [1, 2, 3],
      b: true,
      c: Object(1),
      d: 'a',
      e: {
        f: ['a', Object('b'), 'c'],
        g: Object(false),
        h: new Date(2012, 4, 23),
        i: noop,
        j: 'a'
      }
    };
    var object2 = {
      a: [1, Object(2), 3],
      b: Object(true),
      c: 1,
      d: Object('a'),
      e: {
        f: ['a', 'b', 'c'],
        g: false,
        h: new Date(2012, 4, 23),
        i: noop,
        j: 'a'
      }
    };
    expect((0, _equals.equals)(object1, object2)).toBe(true);
  });
  it('should compare objects with shared property values', function () {
    var object1 = {
      a: [1, 2]
    };
    var object2 = {
      a: [1, 2],
      b: [1, 2]
    };
    object1.b = object1.a;
    expect((0, _equals.equals)(object1, object2)).toBe(true);
  });
  it('should avoid common type coercions', function () {
    expect((0, _equals.equals)(true, Object(false))).toBe(false);
    expect((0, _equals.equals)(Object(false), Object(0))).toBe(false);
    expect((0, _equals.equals)(false, Object(''))).toBe(false);
    expect((0, _equals.equals)(Object(36), Object('36'))).toBe(false);
    expect((0, _equals.equals)(0, '')).toBe(false);
    expect((0, _equals.equals)(1, true)).toBe(false);
    expect((0, _equals.equals)(1337756400000, new Date(2012, 4, 23))).toBe(false);
    expect((0, _equals.equals)('36', 36)).toBe(false);
    expect((0, _equals.equals)(36, '36')).toBe(false);
  });
  it('should compare functions', function () {
    function a() {
      return 1 + 2;
    }

    function b() {
      return 1 + 2;
    }

    expect((0, _equals.equals)(a, a)).toBe(true);
    expect((0, _equals.equals)(a, b)).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vYmplY3QvZXF1YWxzLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJzeW1ib2wxIiwiU3ltYm9sIiwic3ltYm9sMiIsImVhY2giLCJPYmplY3QiLCJOYU4iLCJJbmZpbml0eSIsInVuZGVmaW5lZCIsImEiLCJiIiwiZXhwZWN0ZWQiLCJpdCIsImV4cGVjdCIsInRvQmUiLCJhcnJheTEiLCJhcnJheTIiLCJEYXRlIiwiZSIsImV2ZXJ5IiwiZmlsdGVyIiwiZm9yRWFjaCIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsIm1hcCIsInNvbWUiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsImNvbmNhdCIsImpvaW4iLCJwb3AiLCJyZXZlcnNlIiwic2hpZnQiLCJzbGljZSIsInNvcnQiLCJzcGxpY2UiLCJ1bnNoaWZ0IiwiZXhlYyIsImFycmF5IiwiQXJyYXkiLCJvYmplY3QxIiwiYyIsImQiLCJvYmplY3QyIiwiZiIsIm5vb3AiLCJnIiwiaCIsImkiLCJqIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBQSxRQUFRLENBQUMsVUFBRCxFQUFhLFlBQU07QUFDekIsTUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUMsR0FBRCxDQUF0QjtBQUNBLE1BQU1DLE9BQU8sR0FBR0QsTUFBTSxDQUFDLEdBQUQsQ0FBdEI7QUFDQUYsRUFBQUEsUUFBUSxDQUFDSSxJQUFULENBQWMsQ0FDWixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sSUFBUCxDQURZLEVBQ0UsQ0FBQyxDQUFELEVBQUlDLE1BQU0sQ0FBQyxDQUFELENBQVYsRUFBZSxJQUFmLENBREYsRUFDd0IsQ0FBQyxDQUFELEVBQUksR0FBSixFQUFTLEtBQVQsQ0FEeEIsRUFDeUMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEtBQVAsQ0FEekMsRUFFWixDQUFDLENBQUMsQ0FBRixFQUFLLENBQUMsQ0FBTixFQUFTLElBQVQsQ0FGWSxFQUVJLENBQUMsQ0FB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M0I7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLG9CQUFPLENBQVAsRUFBVSxJQUFWLENBQUQsQ0FBTixDQUF3QkMsSUFBeEIsQ0FBNkIsS0FBN0I7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLG9CQUFPLGFBQVAsRUFBc0IsSUFBSUksSUFBSixDQUFTLElBQVQsRUFBZSxDQUFmLEVBQWtCLEVBQWxCLENBQXRCLENBQUQsQ0FBTixDQUFxREgsSUFBckQsQ0FBMEQsS0FBMUQ7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLG9CQUFPLElBQVAsRUFBYSxFQUFiLENBQUQsQ0FBTixDQUF5QkMsSUFBekIsQ0FBOEIsS0FBOUI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLG9CQUFPLEVBQVAsRUFBVyxJQUFYLENBQUQsQ0FBTixDQUF5QkMsSUFBekIsQ0FBOEIsS0FBOUI7QUFDRCxHQVZDLENBQUY7QUFZQUYsRUFBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLFlBQU07QUFDbkMsYUFBU0gsQ0FBVCxHQUFhO0FBQUUsYUFBTyxJQUFJLENBQVg7QUFBYzs7QUFDN0IsYUFBU0MsQ0FBVCxHQUFhO0FBQUUsYUFBTyxJQUFJLENBQVg7QUFBYzs7QUFFN0JHLElBQUFBLE1BQU0sQ0FBQyxvQkFBT0osQ0FBUCxFQUFVQSxDQUFWLENBQUQsQ0FBTixDQUFxQkssSUFBckIsQ0FBMEIsSUFBMUI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLG9CQUFPSixDQUFQLEVBQVVDLENBQVYsQ0FBRCxDQUFOLENBQXFCSSxJQUFyQixDQUEwQixLQUExQjtBQUNELEdBTkMsQ0FBRjtBQU9ELENBL05PLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcXVhbHMgfSBmcm9tICcuL2VxdWFscydcblxuZGVzY3JpYmUoJ2VxdWFscygpJywgKCkgPT4ge1xuICBjb25zdCBzeW1ib2wxID0gU3ltYm9sKCdhJylcbiAgY29uc3Qgc3ltYm9sMiA9IFN5bWJvbCgnYicpXG4gIGRlc2NyaWJlLmVhY2goW1xuICAgIFsxLCAxLCB0cnVlXSwgWzEsIE9iamVjdCgxKSwgdHJ1ZV0sIFsxLCAnMScsIGZhbHNlXSwgWzEsIDIsIGZhbHNlXSxcbiAgICBbLTAsIC0wLCB0cnVlXSwgWzAsIDAsIHRydWVdLCBbMCwgT2JqZWN0KDApLCB0cnVlXSxcbiAgICBbT2JqZWN0KDApLCBPYmplY3QoMCksIHRydWVdLCBbLTAsIDAsIHRydWVdLCBbMCwgJzAnLCBmYWxzZV0sXG4gICAgWzAsIG51bGwsIGZhbHNlXSxcblxuICAgIFtOYU4sIE5hTiwgdHJ1ZV0sIFtOYU4sIE9iamVjdChOYU4pLCB0cnVlXSxcbiAgICBbT2JqZWN0KE5hTiksIE9iamVjdChOYU4pLCB0cnVlXSwgW05hTiwgJ2EnLCBmYWxzZV0sIFtOYU4sIEluZmluaXR5LCBmYWxzZV0sXG5cbiAgICBbJ2EnLCAnYScsIHRydWVdLCBbJ2EnLCBPYmplY3QoJ2EnKSwgdHJ1ZV0sXG4gICAgW09iamVjdCgnYScpLCBPYmplY3QoJ2EnKSwgdHJ1ZV0sIFsnYScsICdiJywgZmFsc2VdLCBbJ2EnLCBbJ2EnXSwgZmFsc2VdLFxuXG4gICAgW3RydWUsIHRydWUsIHRydWVdLCBbdHJ1ZSwgT2JqZWN0KHRydWUpLCB0cnVlXSxcbiAgICBbT2JqZWN0KHRydWUpLCBPYmplY3QodHJ1ZSksIHRydWVdLCBbdHJ1ZSwgMSwgZmFsc2VdLCBbdHJ1ZSwgJ2EnLCBmYWxzZV0sXG4gICAgW2ZhbHNlLCBmYWxzZSwgdHJ1ZV0sIFtmYWxzZSwgT2JqZWN0KGZhbHNlKSwgdHJ1ZV0sXG4gICAgW09iamVjdChmYWxzZSksIE9iamVjdChmYWxzZSksIHRydWVdLCBbZmFsc2UsIDAsIGZhbHNlXSwgW2ZhbHNlLCAnJywgZmFsc2VdLFxuXG4gICAgW3N5bWJvbDEsIHN5bWJvbDEsIHRydWVdLCBbc3ltYm9sMSwgT2JqZWN0KHN5bWJvbDEpLCB0cnVlXSxcbiAgICBbT2JqZWN0KHN5bWJvbDEpLCBPYmplY3Qoc3ltYm9sMSksIHRydWVdLCBbc3ltYm9sMSwgc3ltYm9sMiwgZmFsc2VdLFxuXG4gICAgW251bGwsIG51bGwsIHRydWVdLCBbbnVsbCwgdW5kZWZpbmVkLCBmYWxzZV0sIFtudWxsLCB7fSwgZmFsc2VdLFxuICAgIFtudWxsLCAnJywgZmFsc2VdLCBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWVdLCBbdW5kZWZpbmVkLCBudWxsLCBmYWxzZV0sXG4gICAgW3VuZGVmaW5lZCwgJycsIGZhbHNlXVxuICBdKShcbiAgICAnZXF1YWxzKCVvLCAlbykgKHNob3VsZCBjb21wYXJlIHByaW1pdGl2ZXMpJyxcbiAgICAoYSwgYiwgZXhwZWN0ZWQpID0+IHtcbiAgICAgIGl0KGByZXR1cm5zICR7ZXhwZWN0ZWR9YCwgKCkgPT4ge1xuICAgICAgICBleHBlY3QoZXF1YWxzKGEsIGIpKS50b0JlKGV4cGVjdGVkKVxuICAgICAgfSlcbiAgICB9XG4gIClcblxuICBpdCgnc2hvdWxkIGNvbXBhcmUgYXJyYXlzJywgKCkgPT4ge1xuICAgIGxldCBhcnJheTEgPSBbdHJ1ZSwgbnVsbCwgMSwgJ2EnLCB1bmRlZmluZWRdXG4gICAgbGV0IGFycmF5MiA9IFt0cnVlLCBudWxsLCAxLCAnYScsIHVuZGVmaW5lZF1cblxuICAgIGV4cGVjdChlcXVhbHMoYXJyYXkxLCBhcnJheTIpKS50b0JlKHRydWUpXG5cbiAgICBhcnJheTEgPSBbWzEsIDIsIDNdLCBuZXcgRGF0ZSgyMDEyLCA0LCAyMyksIC94LywgeyBlOiAxIH1dXG4gICAgYXJyYXkyID0gW1sxLCAyLCAzXSwgbmV3IERhdGUoMjAxMiwgNCwgMjMpLCAveC8sIHsgZTogMSB9XVxuXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheTEsIGFycmF5MikpLnRvQmUodHJ1ZSlcblxuICAgIGFycmF5MSA9IFsxXVxuICAgIGFycmF5MVsyXSA9IDNcblxuICAgIGFycmF5MiA9IFsxXVxuICAgIGFycmF5MlsxXSA9IHVuZGVmaW5lZFxuICAgIGFycmF5MlsyXSA9IDNcblxuICAgIGV4cGVjdChlcXVhbHMoYXJyYXkxLCBhcnJheTIpKS50b0JlKHRydWUpXG5cbiAgICBhcnJheTEgPSBbXG4gICAgICBPYmplY3QoMSksXG4gICAgICBmYWxzZSxcbiAgICAgIE9iamVjdCgnYScpLFxuICAgICAgL3gvLFxuICAgICAgbmV3IERhdGUoMjAxMiwgNCwgMjMpLFxuICAgICAgWydhJywgJ2InLCBbT2JqZWN0KCdjJyldXSxcbiAgICAgIHsgYTogMSB9XG4gICAgXVxuICAgIGFycmF5MiA9IFtcbiAgICAgIDEsXG4gICAgICBPYmplY3QoZmFsc2UpLFxuICAgICAgJ2EnLFxuICAgICAgL3gvLFxuICAgICAgbmV3IERhdGUoMjAxMiwgNCwgMjMpLFxuICAgICAgWydhJywgT2JqZWN0KCdiJyksIFsnYyddXSxcbiAgICAgIHsgYTogMSB9XG4gICAgXVxuXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheTEsIGFycmF5MikpLnRvQmUodHJ1ZSlcblxuICAgIGFycmF5MSA9IFsxLCAyLCAzXVxuICAgIGFycmF5MiA9IFszLCAyLCAxXVxuXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheTEsIGFycmF5MikpLnRvQmUoZmFsc2UpXG5cbiAgICBhcnJheTEgPSBbMSwgMl1cbiAgICBhcnJheTIgPSBbMSwgMiwgM11cblxuICAgIGV4cGVjdChlcXVhbHMoYXJyYXkxLCBhcnJheTIpKS50b0JlKGZhbHNlKVxuICB9KVxuXG4gIGl0KGBzaG91bGQgdHJlYXQgYXJyYXlzIHdpdGggaWRlbnRpY2FsIHZhbHVlcyBidXQgZGlmZmVyZW50IG5vbi1pbmRleCBwcm9wZXJ0aWVzIGFzIGVxdWFsYCwgKCkgPT4ge1xuICAgIGxldCBhcnJheTEgPSBbMSwgMiwgM11cbiAgICBsZXQgYXJyYXkyID0gWzEsIDIsIDNdXG5cbiAgICBhcnJheTEuZXZlcnkgPSBhcnJheTEuZmlsdGVyID0gYXJyYXkxLmZvckVhY2ggPVxuICAgIGFycmF5MS5pbmRleE9mID0gYXJyYXkxLmxhc3RJbmRleE9mID0gYXJyYXkxLm1hcCA9XG4gICAgYXJyYXkxLnNvbWUgPSBhcnJheTEucmVkdWNlID0gYXJyYXkxLnJlZHVjZVJpZ2h0ID0gbnVsbFxuXG4gICAgYXJyYXkyLmNvbmNhdCA9IGFycmF5Mi5qb2luID0gYXJyYXkyLnBvcCA9XG4gICAgYXJyYXkyLnJldmVyc2UgPSBhcnJheTIuc2hpZnQgPSBhcnJheTIuc2xpY2UgPVxuICAgIGFycmF5Mi5zb3J0ID0gYXJyYXkyLnNwbGljZSA9IGFycmF5Mi51bnNoaWZ0ID0gbnVsbFxuXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheTEsIGFycmF5MikpLnRvQmUodHJ1ZSlcblxuICAgIGFycmF5MSA9IFsxLCAyLCAzXVxuICAgIGFycmF5MS5hID0gMVxuXG4gICAgYXJyYXkyID0gWzEsIDIsIDNdXG4gICAgYXJyYXkyLmIgPSAxXG5cbiAgICBleHBlY3QoZXF1YWxzKGFycmF5MSwgYXJyYXkyKSkudG9CZSh0cnVlKVxuXG4gICAgYXJyYXkxID0gL2MvLmV4ZWMoJ2FiY2RlJylcbiAgICBhcnJheTIgPSBbJ2MnXVxuXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheTEsIGFycmF5MikpLnRvQmUodHJ1ZSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNvbXBhcmUgc3BhcnNlIGFycmF5cycsICgpID0+IHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5KDEpXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheSwgQXJyYXkoMSkpKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheSwgW3VuZGVmaW5lZF0pKS50b0JlKHRydWUpXG4gICAgZXhwZWN0KGVxdWFscyhhcnJheSwgQXJyYXkoMikpKS50b0JlKGZhbHNlKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY29tcGFyZSBwbGFpbiBvYmplY3RzJywgKCkgPT4ge1xuICAgIGxldCBvYmplY3QxID0geyBhOiB0cnVlLCBiOiBudWxsLCBjOiAxLCBkOiAnYScsIGU6IHVuZGVmaW5lZCB9XG4gICAgbGV0IG9iamVjdDIgPSB7IGE6IHRydWUsIGI6IG51bGwsIGM6IDEsIGQ6ICdhJywgZTogdW5kZWZpbmVkIH1cblxuICAgIGV4cGVjdChlcXVhbHMob2JqZWN0MSwgb2JqZWN0MikpLnRvQmUodHJ1ZSlcblxuICAgIG9iamVjdDEgPSB7IGE6IFsxLCAyLCAzXSwgYjogbmV3IERhdGUoMjAxMiwgNCwgMjMpLCBjOiAveC8sIGQ6IHsgZTogMSB9IH1cbiAgICBvYmplY3QyID0geyBhOiBbMSwgMiwgM10sIGI6IG5ldyBEYXRlKDIwMTIsIDQsIDIzKSwgYzogL3gvLCBkOiB7IGU6IDEgfSB9XG5cbiAgICBleHBlY3QoZXF1YWxzKG9iamVjdDEsIG9iamVjdDIpKS50b0JlKHRydWUpXG5cbiAgICBvYmplY3QxID0geyBhOiAxLCBiOiAyLCBjOiAzIH1cbiAgICBvYmplY3QyID0geyBhOiAzLCBiOiAyLCBjOiAxIH1cblxuICAgIGV4cGVjdChlcXVhbHMob2JqZWN0MSwgb2JqZWN0MikpLnRvQmUoZmFsc2UpXG5cbiAgICBvYmplY3QxID0geyBhOiAxLCBiOiAyLCBjOiAzIH1cbiAgICBvYmplY3QyID0geyBkOiAxLCBlOiAyLCBmOiAzIH1cblxuICAgIGV4cGVjdChlcXVhbHMob2JqZWN0MSwgb2JqZWN0MikpLnRvQmUoZmFsc2UpXG5cbiAgICBvYmplY3QxID0geyBhOiAxLCBiOiAyIH1cbiAgICBvYmplY3QyID0geyBhOiAxLCBiOiAyLCBjOiAzIH1cblxuICAgIGV4cGVjdChlcXVhbHMob2JqZWN0MSwgb2JqZWN0MikpLnRvQmUoZmFsc2UpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjb21wYXJlIG9iamVjdHMgcmVnYXJkbGVzcyBvZiBrZXkgb3JkZXInLCAoKSA9PiB7XG4gICAgY29uc3Qgb2JqZWN0MSA9IHsgYTogMSwgYjogMiwgYzogMyB9XG4gICAgY29uc3Qgb2JqZWN0MiA9IHsgYzogMywgYTogMSwgYjogMiB9XG5cbiAgICBleHBlY3QoZXF1YWxzKG9iamVjdDEsIG9iamVjdDIpKS50b0JlKHRydWUpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBjb21wYXJlIG5lc3RlZCBvYmplY3RzJywgKCkgPT4ge1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7fVxuICAgIGNvbnN0IG9iamVjdDEgPSB7XG4gICAgICBhOiBbMSwgMiwgM10sXG4gICAgICBiOiB0cnVlLFxuICAgICAgYzogT2JqZWN0KDEpLFxuICAgICAgZDogJ2EnLFxuICAgICAgZToge1xuICAgICAgICBmOiBbJ2EnLCBPYmplY3QoJ2InKSwgJ2MnXSxcbiAgICAgICAgZzogT2JqZWN0KGZhbHNlKSxcbiAgICAgICAgaDogbmV3IERhdGUoMjAxMiwgNCwgMjMpLFxuICAgICAgICBpOiBub29wLFxuICAgICAgICBqOiAnYSdcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvYmplY3QyID0ge1xuICAgICAgYTogWzEsIE9iamVjdCgyKSwgM10sXG4gICAgICBiOiBPYmplY3QodHJ1ZSksXG4gICAgICBjOiAxLFxuICAgICAgZDogT2JqZWN0KCdhJyksXG4gICAgICBlOiB7XG4gICAgICAgIGY6IFsnYScsICdiJywgJ2MnXSxcbiAgICAgICAgZzogZmFsc2UsXG4gICAgICAgIGg6IG5ldyBEYXRlKDIwMTIsIDQsIDIzKSxcbiAgICAgICAgaTogbm9vcCxcbiAgICAgICAgajogJ2EnXG4gICAgICB9XG4gICAgfVxuXG4gICAgZXhwZWN0KGVxdWFscyhvYmplY3QxLCBvYmplY3QyKSkudG9CZSh0cnVlKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgY29tcGFyZSBvYmplY3RzIHdpdGggc2hhcmVkIHByb3BlcnR5IHZhbHVlcycsICgpID0+IHtcbiAgICBjb25zdCBvYmplY3QxID0ge1xuICAgICAgYTogWzEsIDJdXG4gICAgfVxuXG4gICAgY29uc3Qgb2JqZWN0MiA9IHtcbiAgICAgIGE6IFsxLCAyXSxcbiAgICAgIGI6IFsxLCAyXVxuICAgIH1cblxuICAgIG9iamVjdDEuYiA9IG9iamVjdDEuYVxuXG4gICAgZXhwZWN0KGVxdWFscyhvYmplY3QxLCBvYmplY3QyKSkudG9CZSh0cnVlKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgYXZvaWQgY29tbW9uIHR5cGUgY29lcmNpb25zJywgKCkgPT4ge1xuICAgIGV4cGVjdChlcXVhbHModHJ1ZSwgT2JqZWN0KGZhbHNlKSkpLnRvQmUoZmFsc2UpXG4gICAgZXhwZWN0KGVxdWFscyhPYmplY3QoZmFsc2UpLCBPYmplY3QoMCkpKS50b0JlKGZhbHNlKVxuICAgIGV4cGVjdChlcXVhbHMoZmFsc2UsIE9iamVjdCgnJykpKS50b0JlKGZhbHNlKVxuICAgIGV4cGVjdChlcXVhbHMoT2JqZWN0KDM2KSwgT2JqZWN0KCczNicpKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoZXF1YWxzKDAsICcnKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoZXF1YWxzKDEsIHRydWUpKS50b0JlKGZhbHNlKVxuICAgIGV4cGVjdChlcXVhbHMoMTMzNzc1NjQwMDAwMCwgbmV3IERhdGUoMjAxMiwgNCwgMjMpKSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoZXF1YWxzKCczNicsIDM2KSkudG9CZShmYWxzZSlcbiAgICBleHBlY3QoZXF1YWxzKDM2LCAnMzYnKSkudG9CZShmYWxzZSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGNvbXBhcmUgZnVuY3Rpb25zJywgKCkgPT4ge1xuICAgIGZ1bmN0aW9uIGEoKSB7IHJldHVybiAxICsgMiB9XG4gICAgZnVuY3Rpb24gYigpIHsgcmV0dXJuIDEgKyAyIH1cblxuICAgIGV4cGVjdChlcXVhbHMoYSwgYSkpLnRvQmUodHJ1ZSlcbiAgICBleHBlY3QoZXF1YWxzKGEsIGIpKS50b0JlKGZhbHNlKVxuICB9KVxufSlcbiJdfQ==