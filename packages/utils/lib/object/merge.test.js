"use strict";

var _merge = require("./merge");

describe('merge()', function () {
  it('should merge nested objects', function () {
    var source1 = {
      a: {
        b: []
      }
    };
    var source2 = {
      a: {
        c: []
      }
    };
    var expected = {
      a: {
        b: [],
        c: []
      }
    };
    expect((0, _merge.merge)({}, source1, source2)).toStrictEqual(expected);
    expect((0, _merge.merge)({}, source2, source1)).toStrictEqual(expected);
  });
  it('should override keys in target with different types', function () {
    var source1 = {
      a: {
        b: 1
      }
    };
    var source2 = {
      a: {
        b: []
      }
    };
    expect((0, _merge.merge)({}, source1, source2)).toStrictEqual(source2);
    expect((0, _merge.merge)({}, source2, source1)).toStrictEqual(source1);
  });
  it('should merge objects at the same indices inside arrays', function () {
    var source1 = [{
      a: 1
    }, {
      b: 2
    }];
    var source2 = [{
      c: 3
    }, {
      d: 4
    }];
    var expected = [{
      a: 1,
      c: 3
    }, {
      b: 2,
      d: 4
    }];
    expect((0, _merge.merge)([], source1, source2)).toStrictEqual(expected);
  });
  it('should merge `source` into `object`', function () {
    var names = {
      characters: [{
        name: 'barney'
      }, {
        name: 'fred'
      }]
    };
    var ages = {
      characters: [{
        age: 36
      }, {
        age: 40
      }]
    };
    var heights = {
      characters: [{
        height: '5\'4"'
      }, {
        height: '5\'5"'
      }]
    };
    var expected = {
      characters: [{
        name: 'barney',
        age: 36,
        height: '5\'4"'
      }, {
        name: 'fred',
        age: 40,
        height: '5\'5"'
      }]
    };
    expect((0, _merge.merge)(names, ages, heights)).toEqual(expected);
  });
  it('should work with multiple arguments', function () {
    var expected = {
      a: 4
    };
    var actual = (0, _merge.merge)({
      a: 1
    }, {
      a: 2
    }, {
      a: 3
    }, expected);
    expect(actual).toStrictEqual(expected);
  });
  it('should not augment source objects', function () {
    var source1 = {
      a: [{
        a: 1
      }]
    };
    var source2 = {
      a: [{
        b: 2
      }]
    };
    var actual1 = (0, _merge.merge)({}, source1, source2);
    expect(source1.a).toStrictEqual([{
      a: 1
    }]);
    expect(source2.a).toStrictEqual([{
      b: 2
    }]);
    expect(actual1.a).toStrictEqual([{
      a: 1,
      b: 2
    }]);
    var source3 = {
      a: [[1, 2, 3]]
    };
    var source4 = {
      a: [[4, 5]]
    };
    var actual2 = (0, _merge.merge)({}, source3, source4);
    expect(source3.a).toStrictEqual([[1, 2, 3]]);
    expect(source4.a).toStrictEqual([[4, 5]]);
    expect(actual2.a).toStrictEqual([[4, 5, 3]]);
  });
  it('should not overwrite existing values with `undefined` in objects', function () {
    var actual = (0, _merge.merge)({
      a: 1
    }, {
      a: undefined,
      b: undefined
    });
    expect(actual).toStrictEqual({
      a: 1,
      b: undefined
    });
  });
  it('should not overwrite existing values with `undefined` in arrays', function () {
    var array1 = [1];
    array1[2] = 3;
    var actual1 = (0, _merge.merge)([4, 5, 6], array1);
    var expected1 = [1, 5, 3];
    expect(actual1).toStrictEqual(expected1);
    var array2 = [1, undefined, 3];
    var actual2 = (0, _merge.merge)([4, 5, 6], array2);
    expect(actual2).toStrictEqual(expected1);
  });
  it('should merge regexps', function () {
    var source1 = {
      a: /1/
    };
    var source2 = {
      a: /2/
    };
    var expected = {
      a: /2/
    };
    expect((0, _merge.merge)({}, source1, source2)).toStrictEqual(expected);
  });
  it('should merge dates', function () {
    var source1 = {
      a: new Date(2012, 5, 9)
    };
    var source2 = {
      a: new Date(2021, 5, 9)
    };
    var expected = {
      a: new Date(2021, 5, 9)
    };
    expect((0, _merge.merge)({}, source1, source2)).toStrictEqual(expected);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,