"use strict";

exports.__esModule = true;
exports.format = format;
exports.defaultFormats = void 0;

require("core-js/modules/es.object.entries.js");

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.includes.js");

var _base = require("../base");

var defaultFormats = {
  number: {
    style: 'decimal'
  },
  date: {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  },
  time: {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
  }
};
exports.defaultFormats = defaultFormats;

function format(value, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$locale = _ref.locale,
      locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,
      number = _ref.number,
      date = _ref.date,
      time = _ref.time,
      _ref$defaults = _ref.defaults,
      defaults = _ref$defaults === void 0 ? defaultFormats : _ref$defaults;

  var formats = {
    number: number,
    date: date,
    time: time
  };
  var defaultValue = number || date || time ? undefined : true;

  var getOptions = function getOptions(name) {
    var _formats$name;

    var defaultOption = defaults[name];
    var option = (_formats$name = formats[name]) != null ? _formats$name : defaultValue;
    return option === true ? defaultOption : (0, _base.isObject)(option) ? Object.entries(Object.assign({}, defaultOption, option)).reduce(function (opt, _ref2) {
      var key = _ref2[0],
          value = _ref2[1];

      if (value !== false) {
        opt[key] = value;
      }

      return opt;
    }, {}) : {};
  };

  if (value != null) {
    if (number) {
      value = (0, _base.isNumber)(value) ? value : parseFloat(value);
    } else if (date || time) {
      value = (0, _base.isDate)(value) ? value : new Date(value);
    }
  }

  var options;

  if ((0, _base.isNumber)(value)) {
    if (number === false) {
      return '';
    } else {
      options = getOptions('number');

      if (options.format) {
        var parts = new Intl.NumberFormat(locale, options).formatToParts(value);
        return parts.map(function (_ref3) {
          var _options$format;

          var type = _ref3.type,
              value = _ref3.value;
          return (_options$format = options.format(value, type, options)) != null ? _options$format : value;
        }).join('');
      }
    }
  } else if ((0, _base.isDate)(value)) {
    if (date === false && time === false) {
      return '';
    } else {
      var opts = {
        date: getOptions('date'),
        time: getOptions('time')
      };
      options = Object.assign({}, opts.date, opts.time);

      if (options.format) {
        var _parts = new Intl.DateTimeFormat(locale, options).formatToParts(value);

        var modeOpts = null;
        return _parts.map(function (_ref4) {
          var _modeOpts$format, _modeOpts;

          var type = _ref4.type,
              value = _ref4.value;

          if (type !== 'literal') {
            var mode = ['weekday', 'day', 'month', 'year'].includes(type) ? 'date' : 'time';
            modeOpts = opts[mode];
          }

          return (_modeOpts$format = (_modeOpts = modeOpts) == null ? void 0 : _modeOpts.format == null ? void 0 : _modeOpts.format(value, type, modeOpts)) != null ? _modeOpts$format : value;
        }).join('');
      }
    }
  }

  return value != null ? value.toLocaleString(locale, options) : value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,