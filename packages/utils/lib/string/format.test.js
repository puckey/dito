"use strict";

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

var _format = require("./format");

describe('format()', function () {
  var integer = 123456789;
  var float = 123456.789;
  var date = new Date(2012, 5, 9, 22, 45, 30);
  it('should return undefined when no value is given', function () {
    expect((0, _format.format)()).toBe(undefined);
  });
  it('should return null when value is null', function () {
    expect((0, _format.format)(null)).toBe(null);
    expect((0, _format.format)(null, {
      number: true
    })).toBe(null);
    expect((0, _format.format)(null, {
      date: true
    })).toBe(null);
    expect((0, _format.format)(null, {
      time: true
    })).toBe(null);
  });
  it('should use the en-US locale by default', function () {
    expect((0, _format.format)(integer)).toBe('123,456,789');
    expect((0, _format.format)(float)).toBe('123,456.789');
    expect((0, _format.format)(date)).toBe('June 9, 2012, 10:45:30 PM');
  });
  it('should format numbers with different locale and default options', function () {
    expect((0, _format.format)(integer, {
      locale: 'de-DE'
    })).toBe('123.456.789');
    expect((0, _format.format)(float, {
      locale: 'de-DE'
    })).toBe('123.456,789');
  });
  it('should format dates with different locale and default options', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE'
    })).toBe('9. Juni 2012, 22:45:30');
  });
  it('should format string as numbers if told so', function () {
    expect((0, _format.format)('123456789', {
      locale: 'de-DE',
      number: true
    })).toBe('123.456.789');
  });
  it('should format numbers as dates if told so', function () {
    expect((0, _format.format)(integer, {
      locale: 'de-DE',
      date: false,
      time: true
    })).toBe('11:17:36');
    expect((0, _format.format)(integer, {
      locale: 'de-DE',
      date: true,
      time: false
    })).toBe('2. Januar 1970');
    expect((0, _format.format)(integer, {
      locale: 'de-DE',
      date: true,
      time: true
    })).toBe('2. Januar 1970, 11:17:36');
  });
  it('should omit time when `options.date = true`', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      date: true
    })).toBe('9. Juni 2012');
  });
  it('should omit date when `options.time = true`', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      time: true
    })).toBe('22:45:30');
  });
  it('should omit time when `options.time = false`', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      time: false
    })).toBe('9. Juni 2012');
  });
  it('should omit date when `options.date = false`', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      date: false
    })).toBe('22:45:30');
  });
  it("should return an empty string when `options.date = false` and `options.time = false`", function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      date: false,
      time: false
    })).toBe('');
  });
  it('should support fine-grained control of `options.number`', function () {
    expect((0, _format.format)(integer, {
      locale: 'de-DE',
      number: {
        style: 'currency',
        currency: 'EUR'
      }
    })).toBe('123.456.789,00 €');
    expect((0, _format.format)(integer, {
      locale: 'de-CH',
      number: {
        style: 'currency',
        currency: 'CHF'
      }
    })).toBe('CHF 123’456’789.00');
    expect((0, _format.format)(float, {
      locale: 'de-DE',
      number: {
        style: 'currency',
        currency: 'EUR'
      }
    })).toBe('123.456,79 €');
    expect((0, _format.format)(float, {
      locale: 'de-CH',
      number: {
        style: 'currency',
        currency: 'CHF'
      }
    })).toBe('CHF 123’456.79');
  });
  it('should support fine-grained control of `options.date`', function () {
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      date: {
        month: 'short',
        day: false
      },
      time: false
    })).toBe('Juni 2012');
    expect((0, _format.format)(date, {
      locale: 'de-DE',
      date: {
        year: false,
        day: '2-digit'
      },
      time: false
    })).toBe('09. Juni');
  });
  it('should support custom `options.number.format()` overrides', function () {
    expect((0, _format.format)(integer, {
      locale: 'en-GB',
      number: {
        style: 'currency',
        currency: 'GBP',
        format: function format(value, type) {
          return type === 'group' ? "\u2019" : type === 'decimal' ? ',' : undefined;
        }
      }
    })).toBe("\xA3123\u2019456\u2019789,00");
  });
  it("should support custom `options.date.format()` and `options.time.format()` overrides", function () {
    expect((0, _format.format)(date, {
      locale: 'en-GB',
      date: {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric',
        format: function format(value, type, options) {
          return type === 'literal' && options.month === 'numeric' ? value.replace(/\//, '.').replace(/,/, '') : undefined;
        }
      },
      time: {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        format: function format(value) {
          return value.replace(/:/, '_');
        }
      }
    })).toBe('09.06.2012 22_45_30');
  });
  it('should handle string values', function () {
    expect((0, _format.format)('2016-05-24T15:54:14.876Z', {
      date: true
    })).toBe('May 24, 2016');
    expect((0, _format.format)('2016-05-24T15:54:14.876Z', {
      date: true,
      time: true
    })).toBe('May 24, 2016, 05:54:14 PM');
    expect((0, _format.format)('123456789', {
      number: true
    })).toBe('123,456,789');
    expect((0, _format.format)('123456.789', {
      number: true
    })).toBe('123,456.789');
    expect((0, _format.format)('Hello World')).toBe('Hello World');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,