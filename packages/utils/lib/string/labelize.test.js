"use strict";

var _labelize = require("./labelize");

describe('labelize()', function () {
  it('should labelize hyphenated text', function () {
    expect((0, _labelize.labelize)('some-hyphenated-text')).toBe('Some Hyphenated Text');
  });
  it('should labelize underscored text', function () {
    expect((0, _labelize.labelize)('some_underscored_text')).toBe('Some Underscored Text');
  });
  it('should labelize camel-cased text', function () {
    expect((0, _labelize.labelize)('SomeCamelCasedText')).toBe('Some Camel Cased Text');
  });
  it('should labelize normal text', function () {
    expect((0, _labelize.labelize)('some normal text')).toBe('Some Normal Text');
  });
  it('should split numbers and words', function () {
    expect((0, _labelize.labelize)('one2')).toBe('One 2');
  });
  it('should split words and numbers both sides', function () {
    expect((0, _labelize.labelize)('one2three')).toBe('One 2 Three');
  });
  it('should keep multiple numbers together', function () {
    expect((0, _labelize.labelize)('one234five')).toBe('One 234 Five');
  });
  it('should return an empty string if nothing can be processed', function () {
    expect((0, _labelize.labelize)()).toBe('');
    expect((0, _labelize.labelize)(null)).toBe('');
    expect((0, _labelize.labelize)('')).toBe('');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpbmcvbGFiZWxpemUudGVzdC5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwidG9CZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQUEsUUFBUSxDQUFDLFlBQUQsRUFBZSxZQUFNO0FBQzNCQyxFQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsWUFBTTtBQUMxQ0MsSUFBQUEsTUFBTSxDQUFDLHdCQUFTLHNCQUFULENBQUQsQ0FBTixDQUF5Q0MsSUFBekMsQ0FBOEMsc0JBQTlDO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQyxrQ0FBRCxFQUFxQyxZQUFNO0FBQzNDQyxJQUFBQSxNQUFNLENBQUMsd0JBQVMsdUJBQVQsQ0FBRCxDQUFOLENBQTBDQyxJQUExQyxDQUErQyx1QkFBL0M7QUFDRCxHQUZDLENBQUY7QUFJQUYsRUFBQUEsRUFBRSxDQUFDLGtDQUFELEVBQXFDLFlBQU07QUFDM0NDLElBQUFBLE1BQU0sQ0FBQyx3QkFBUyxvQkFBVCxDQUFELENBQU4sQ0FBdUNDLElBQXZDLENBQTRDLHVCQUE1QztBQUNELEdBRkMsQ0FBRjtBQUlBRixFQUFBQSxFQUFFLENBQUMsNkJBQUQsRUFBZ0MsWUFBTTtBQUN0Q0MsSUFBQUEsTUFBTSxDQUFDLHdCQUFTLGtCQUFULENBQUQsQ0FBTixDQUFxQ0MsSUFBckMsQ0FBMEMsa0JBQTFDO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxZQUFNO0FBQ3pDQyxJQUFBQSxNQUFNLENBQUMsd0JBQVMsTUFBVCxDQUFELENBQU4sQ0FBeUJDLElBQXpCLENBQThCLE9BQTlCO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQywyQ0FBRCxFQUE4QyxZQUFNO0FBQ3BEQyxJQUFBQSxNQUFNLENBQUMsd0JBQVMsV0FBVCxDQUFELENBQU4sQ0FBOEJDLElBQTlCLENBQW1DLGFBQW5DO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxZQUFNO0FBQ2hEQyxJQUFBQSxNQUFNLENBQUMsd0JBQVMsWUFBVCxDQUFELENBQU4sQ0FBK0JDLElBQS9CLENBQW9DLGNBQXBDO0FBQ0QsR0FGQyxDQUFGO0FBSUFGLEVBQUFBLEVBQUUsQ0FBQywyREFBRCxFQUE4RCxZQUFNO0FBQ3BFQyxJQUFBQSxNQUFNLENBQUMseUJBQUQsQ0FBTixDQUFtQkMsSUFBbkIsQ0FBd0IsRUFBeEI7QUFDQUQsSUFBQUEsTUFBTSxDQUFDLHdCQUFTLElBQVQsQ0FBRCxDQUFOLENBQXVCQyxJQUF2QixDQUE0QixFQUE1QjtBQUNBRCxJQUFBQSxNQUFNLENBQUMsd0JBQVMsRUFBVCxDQUFELENBQU4sQ0FBcUJDLElBQXJCLENBQTBCLEVBQTFCO0FBQ0QsR0FKQyxDQUFGO0FBS0QsQ0FsQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxhYmVsaXplIH0gZnJvbSAnLi9sYWJlbGl6ZSdcblxuZGVzY3JpYmUoJ2xhYmVsaXplKCknLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgbGFiZWxpemUgaHlwaGVuYXRlZCB0ZXh0JywgKCkgPT4ge1xuICAgIGV4cGVjdChsYWJlbGl6ZSgnc29tZS1oeXBoZW5hdGVkLXRleHQnKSkudG9CZSgnU29tZSBIeXBoZW5hdGVkIFRleHQnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgbGFiZWxpemUgdW5kZXJzY29yZWQgdGV4dCcsICgpID0+IHtcbiAgICBleHBlY3QobGFiZWxpemUoJ3NvbWVfdW5kZXJzY29yZWRfdGV4dCcpKS50b0JlKCdTb21lIFVuZGVyc2NvcmVkIFRleHQnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgbGFiZWxpemUgY2FtZWwtY2FzZWQgdGV4dCcsICgpID0+IHtcbiAgICBleHBlY3QobGFiZWxpemUoJ1NvbWVDYW1lbENhc2VkVGV4dCcpKS50b0JlKCdTb21lIENhbWVsIENhc2VkIFRleHQnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgbGFiZWxpemUgbm9ybWFsIHRleHQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGxhYmVsaXplKCdzb21lIG5vcm1hbCB0ZXh0JykpLnRvQmUoJ1NvbWUgTm9ybWFsIFRleHQnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgc3BsaXQgbnVtYmVycyBhbmQgd29yZHMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGxhYmVsaXplKCdvbmUyJykpLnRvQmUoJ09uZSAyJylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHNwbGl0IHdvcmRzIGFuZCBudW1iZXJzIGJvdGggc2lkZXMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGxhYmVsaXplKCdvbmUydGhyZWUnKSkudG9CZSgnT25lIDIgVGhyZWUnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQga2VlcCBtdWx0aXBsZSBudW1iZXJzIHRvZ2V0aGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdChsYWJlbGl6ZSgnb25lMjM0Zml2ZScpKS50b0JlKCdPbmUgMjM0IEZpdmUnKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIGNhbiBiZSBwcm9jZXNzZWQnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGxhYmVsaXplKCkpLnRvQmUoJycpXG4gICAgZXhwZWN0KGxhYmVsaXplKG51bGwpKS50b0JlKCcnKVxuICAgIGV4cGVjdChsYWJlbGl6ZSgnJykpLnRvQmUoJycpXG4gIH0pXG59KVxuIl19