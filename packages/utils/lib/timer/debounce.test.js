"use strict";

require("core-js/modules/es.promise.js");

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

var _debounce = require("./debounce");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

jest.useFakeTimers();
describe('debounce()', function () {
  var fixture = Symbol('fixture');
  it('should never execute if intervals are less than wait', function () {
    var func = jest.fn();
    var debounced = (0, _debounce.debounce)(func, 1000);

    for (var i = 0; i < 10; i++) {
      jest.advanceTimersByTime(500);
      debounced();
    }

    expect(func).toBeCalledTimes(0);
  });
  it('should execute just once if an interval is big enough', function () {
    var func = jest.fn();
    var debounced = (0, _debounce.debounce)(func, 1000);

    for (var i = 0; i < 10; i++) {
      jest.advanceTimersByTime(500);
      debounced();
    }

    jest.advanceTimersByTime(1000);
    debounced();
    expect(func).toBeCalledTimes(1);
  });
  it('should pass through argument', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var func, debounced;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            func = jest.fn(function (value) {
              return value;
            });
            debounced = (0, _debounce.debounce)(func, 1000);
            expect(debounced(fixture)).toBeUndefined();
            jest.advanceTimersByTime(1000);
            expect(debounced()).toBe(fixture);
            expect(func).toBeCalledTimes(1);

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('should pass through return value', function () {
    var func = jest.fn().mockReturnValue(fixture);
    var debounced = (0, _debounce.debounce)(func, 1000);
    expect(debounced()).toBeUndefined();
    jest.advanceTimersByTime(1000);
    expect(debounced()).toBe(fixture);
    expect(func).toBeCalledTimes(1);
  });
  it('should pass through `this`', function () {
    var func = jest.fn().mockReturnThis();
    var debounced = (0, _debounce.debounce)(func, 0);
    var obj = {};
    expect(debounced.call(obj)).toBeUndefined();
    jest.advanceTimersByTime(1000);
    expect(debounced.call(obj)).toBe(obj);
  });
  it('should allow to cancel', function () {
    var func = jest.fn();
    var debounced = (0, _debounce.debounce)(func, 1000);
    debounced();
    jest.advanceTimersByTime(500);
    expect(debounced.cancel()).toBe(true);
    expect(debounced.cancel()).toBe(false);
    jest.advanceTimersByTime(500);
    expect(func).toBeCalledTimes(0);
    jest.advanceTimersByTime(1000);
    expect(func).toBeCalledTimes(0);
    debounced();
    jest.advanceTimersByTime(1000);
    expect(func).toBeCalledTimes(1);
  });
  it('should execute once immediately if intervals are less than wait', function () {
    var func = jest.fn();
    var debounced = (0, _debounce.debounce)(func, {
      delay: 1000,
      immediate: true
    });
    debounced();
    expect(func).toBeCalledTimes(1);

    for (var i = 0; i < 10; i++) {
      jest.advanceTimersByTime(500);
      debounced();
    }

    expect(func).toBeCalledTimes(1);
  });
  it("should execute once immediately and once at the end with long enough intervals", function () {
    var func = jest.fn();
    var debounced = (0, _debounce.debounce)(func, {
      delay: 1000,
      immediate: true
    });
    debounced();
    expect(func).toBeCalledTimes(1);

    for (var i = 0; i < 10; i++) {
      jest.advanceTimersByTime(500);
      debounced();
    }

    expect(func).toBeCalledTimes(1);
    jest.advanceTimersByTime(1000);
    debounced();
    expect(func).toBeCalledTimes(2);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90aW1lci9kZWJvdW5jZS50ZXN0LmpzIl0sIm5hbWVzIjpbImplc3QiLCJ1c2VGYWtlVGltZXJzIiwiZGVzY3JpYmUiLCJmaXh0dXJlIiwiU3ltYm9sIiwiaXQiLCJmdW5jIiwiZm4iLCJkZWJvdW5jZWQiLCJpIiwiYWR2YW5jZVRpbWVyc0J5VGltZSIsImV4cGVjdCIsInRvQmVDYWxsZWRUaW1lcyIsInZhbHVlIiwidG9CZVVuZGVmaW5lZCIsInRvQmUiLCJtb2NrUmV0dXJuVmFsdWUiLCJtb2NrUmV0dXJuVGhpcyIsIm9iaiIsImNhbGwiLCJjYW5jZWwiLCJkZWxheSIsImltbWVkaWF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUdBQSxJQUFJLENBQUNDLGFBQUw7QUFFQUMsUUFBUSxDQUFDLFlBQUQsRUFBZSxZQUFNO0FBQzNCLE1BQU1DLE9BQU8sR0FBR0MsTUFBTSxDQUFDLFNBQUQsQ0FBdEI7QUFFQUMsRUFBQUEsRUFBRSxDQUFDLHNEQUFELEVBQXlELFlBQU07QUFDL0QsUUFBTUMsSUFBSSxHQUFHTixJQUFJLENBQUNPLEVBQUwsRUFBYjtBQUNBLFFBQU1DLFNBQVMsR0FBRyx3QkFBU0YsSUFBVCxFQUFlLElBQWYsQ0FBbEI7O0FBQ0EsU0FBSyxJQUFJRyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEVBQXBCLEVBQXdCQSxDQUFDLEVBQXpCLEVBQTZCO0FBQzNCVCxNQUFBQSxJQUFJLENBQUNVLG1CQUFMLENBQXlCLEdBQXpCO0FBQ0FGLE1BQUFBLFNBQVM7QUFDVjs7QUFDREcsSUFBQUEsTUFBTSxDQUFDTCxJQUFELENBQU4sQ0FBYU0sZUFBYixDQUE2QixDQUE3QjtBQUNELEdBUkMsQ0FBRjtBQVVBUCxFQUFBQSxFQUFFLENBQUMsdURBQUQsRUFBMEQsWUFBTTtBQUNoRSxRQUFNQyxJQUFJLEdBQUdOLElBQUksQ0FBQ08sRUFBTCxFQUFiO0FBQ0EsUUFBTUMsU0FBUyxHQUFHLHdCQUFT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QU07QUFDekYsUUFBTUMsSUFBSSxHQUFHTixJQUFJLENBQUNPLEVBQUwsRUFBYjtBQUNBLFFBQU1DLFNBQVMsR0FBRyx3QkFBU0YsSUFBVCxFQUFlO0FBQUVlLE1BQUFBLEtBQUssRUFBRSxJQUFUO0FBQWVDLE1BQUFBLFNBQVMsRUFBRTtBQUExQixLQUFmLENBQWxCO0FBQ0FkLElBQUFBLFNBQVM7QUFDVEcsSUFBQUEsTUFBTSxDQUFDTCxJQUFELENBQU4sQ0FBYU0sZUFBYixDQUE2QixDQUE3Qjs7QUFDQSxTQUFLLElBQUlILENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsRUFBcEIsRUFBd0JBLENBQUMsRUFBekIsRUFBNkI7QUFDM0JULE1BQUFBLElBQUksQ0FBQ1UsbUJBQUwsQ0FBeUIsR0FBekI7QUFDQUYsTUFBQUEsU0FBUztBQUNWOztBQUNERyxJQUFBQSxNQUFNLENBQUNMLElBQUQsQ0FBTixDQUFhTSxlQUFiLENBQTZCLENBQTdCO0FBQ0FaLElBQUFBLElBQUksQ0FBQ1UsbUJBQUwsQ0FBeUIsSUFBekI7QUFDQUYsSUFBQUEsU0FBUztBQUNURyxJQUFBQSxNQUFNLENBQUNMLElBQUQsQ0FBTixDQUFhTSxlQUFiLENBQTZCLENBQTdCO0FBQ0QsR0FiQyxDQUFGO0FBY0QsQ0E5Rk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlYm91bmNlIH0gZnJvbSAnLi9kZWJvdW5jZSdcblxuLy8gVGVsbCBqZXN0IHRvIG1vY2sgYWxsIHRpbWVvdXQgZnVuY3Rpb25zOlxuamVzdC51c2VGYWtlVGltZXJzKClcblxuZGVzY3JpYmUoJ2RlYm91bmNlKCknLCAoKSA9PiB7XG4gIGNvbnN0IGZpeHR1cmUgPSBTeW1ib2woJ2ZpeHR1cmUnKVxuXG4gIGl0KCdzaG91bGQgbmV2ZXIgZXhlY3V0ZSBpZiBpbnRlcnZhbHMgYXJlIGxlc3MgdGhhbiB3YWl0JywgKCkgPT4ge1xuICAgIGNvbnN0IGZ1bmMgPSBqZXN0LmZuKClcbiAgICBjb25zdCBkZWJvdW5jZWQgPSBkZWJvdW5jZShmdW5jLCAxMDAwKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDUwMClcbiAgICAgIGRlYm91bmNlZCgpXG4gICAgfVxuICAgIGV4cGVjdChmdW5jKS50b0JlQ2FsbGVkVGltZXMoMClcbiAgfSlcblxuICBpdCgnc2hvdWxkIGV4ZWN1dGUganVzdCBvbmNlIGlmIGFuIGludGVydmFsIGlzIGJpZyBlbm91Z2gnLCAoKSA9PiB7XG4gICAgY29uc3QgZnVuYyA9IGplc3QuZm4oKVxuICAgIGNvbnN0IGRlYm91bmNlZCA9IGRlYm91bmNlKGZ1bmMsIDEwMDApXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKVxuICAgICAgZGVib3VuY2VkKClcbiAgICB9XG4gICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDEwMDApXG4gICAgZGVib3VuY2VkKClcbiAgICBleHBlY3QoZnVuYykudG9CZUNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBwYXNzIHRocm91Z2ggYXJndW1lbnQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZnVuYyA9IGplc3QuZm4odmFsdWUgPT4gdmFsdWUpXG4gICAgY29uc3QgZGVib3VuY2VkID0gZGVib3VuY2UoZnVuYywgMTAwMClcbiAgICBleHBlY3QoZGVib3VuY2VkKGZpeHR1cmUpKS50b0JlVW5kZWZpbmVkKClcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMClcbiAgICBleHBlY3QoZGVib3VuY2VkKCkpLnRvQmUoZml4dHVyZSlcbiAgICBleHBlY3QoZnVuYykudG9CZUNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBwYXNzIHRocm91Z2ggcmV0dXJuIHZhbHVlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZ1bmMgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKGZpeHR1cmUpXG4gICAgY29uc3QgZGVib3VuY2VkID0gZGVib3VuY2UoZnVuYywgMTAwMClcbiAgICBleHBlY3QoZGVib3VuY2VkKCkpLnRvQmVVbmRlZmluZWQoKVxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKVxuICAgIGV4cGVjdChkZWJvdW5jZWQoKSkudG9CZShmaXh0dXJlKVxuICAgIGV4cGVjdChmdW5jKS50b0JlQ2FsbGVkVGltZXMoMSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIHBhc3MgdGhyb3VnaCBgdGhpc2AnLCAoKSA9PiB7XG4gICAgY29uc3QgZnVuYyA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpXG4gICAgY29uc3QgZGVib3VuY2VkID0gZGVib3VuY2UoZnVuYywgMClcbiAgICBjb25zdCBvYmogPSB7fVxuICAgIGV4cGVjdChkZWJvdW5jZWQuY2FsbChvYmopKS50b0JlVW5kZWZpbmVkKClcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoMTAwMClcbiAgICBleHBlY3QoZGVib3VuY2VkLmNhbGwob2JqKSkudG9CZShvYmopXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBhbGxvdyB0byBjYW5jZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgZnVuYyA9IGplc3QuZm4oKVxuICAgIGNvbnN0IGRlYm91bmNlZCA9IGRlYm91bmNlKGZ1bmMsIDEwMDApXG4gICAgZGVib3VuY2VkKClcbiAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKVxuICAgIGV4cGVjdChkZWJvdW5jZWQuY2FuY2VsKCkpLnRvQmUodHJ1ZSlcbiAgICBleHBlY3QoZGVib3VuY2VkLmNhbmNlbCgpKS50b0JlKGZhbHNlKVxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg1MDApXG4gICAgZXhwZWN0KGZ1bmMpLnRvQmVDYWxsZWRUaW1lcygwKVxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKVxuICAgIGV4cGVjdChmdW5jKS50b0JlQ2FsbGVkVGltZXMoMClcbiAgICBkZWJvdW5jZWQoKVxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKVxuICAgIGV4cGVjdChmdW5jKS50b0JlQ2FsbGVkVGltZXMoMSlcbiAgfSlcblxuICBpdCgnc2hvdWxkIGV4ZWN1dGUgb25jZSBpbW1lZGlhdGVseSBpZiBpbnRlcnZhbHMgYXJlIGxlc3MgdGhhbiB3YWl0JywgKCkgPT4ge1xuICAgIGNvbnN0IGZ1bmMgPSBqZXN0LmZuKClcbiAgICBjb25zdCBkZWJvdW5jZWQgPSBkZWJvdW5jZShmdW5jLCB7IGRlbGF5OiAxMDAwLCBpbW1lZGlhdGU6IHRydWUgfSlcbiAgICBkZWJvdW5jZWQoKVxuICAgIGV4cGVjdChmdW5jKS50b0JlQ2FsbGVkVGltZXMoMSlcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg1MDApXG4gICAgICBkZWJvdW5jZWQoKVxuICAgIH1cbiAgICBleHBlY3QoZnVuYykudG9CZUNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoYHNob3VsZCBleGVjdXRlIG9uY2UgaW1tZWRpYXRlbHkgYW5kIG9uY2UgYXQgdGhlIGVuZCB3aXRoIGxvbmcgZW5vdWdoIGludGVydmFsc2AsICgpID0+IHtcbiAgICBjb25zdCBmdW5jID0gamVzdC5mbigpXG4gICAgY29uc3QgZGVib3VuY2VkID0gZGVib3VuY2UoZnVuYywgeyBkZWxheTogMTAwMCwgaW1tZWRpYXRlOiB0cnVlIH0pXG4gICAgZGVib3VuY2VkKClcbiAgICBleHBlY3QoZnVuYykudG9CZUNhbGxlZFRpbWVzKDEpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKVxuICAgICAgZGVib3VuY2VkKClcbiAgICB9XG4gICAgZXhwZWN0KGZ1bmMpLnRvQmVDYWxsZWRUaW1lcygxKVxuICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMDAwKVxuICAgIGRlYm91bmNlZCgpXG4gICAgZXhwZWN0KGZ1bmMpLnRvQmVDYWxsZWRUaW1lcygyKVxuICB9KVxufSlcbiJdfQ==